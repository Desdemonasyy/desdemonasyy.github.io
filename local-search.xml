<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>流程控制</title>
    <link href="/2023/04/15/Python%E2%80%94%E2%80%94%E6%B5%81%E7%A8%8B%E6%8E%A7%E5%88%B6/"/>
    <url>/2023/04/15/Python%E2%80%94%E2%80%94%E6%B5%81%E7%A8%8B%E6%8E%A7%E5%88%B6/</url>
    
    <content type="html"><![CDATA[<h1 id="流程控制"><a href="#流程控制" class="headerlink" title="流程控制"></a>流程控制</h1><h2 id="if分支结构"><a href="#if分支结构" class="headerlink" title="if分支结构"></a>if分支结构</h2><h3 id="格式"><a href="#格式" class="headerlink" title="格式"></a>格式</h3><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-keyword">if</span> expression :<br>    statements<br><span class="hljs-keyword">elif</span> expression :<br>    statements<br><span class="hljs-keyword">else</span> expression :<br>    statements<br></code></pre></td></tr></table></figure><h3 id="注意点"><a href="#注意点" class="headerlink" title="注意点"></a>注意点</h3><ul><li>缩进</li><li>冒号</li><li>此处expression为False的情况有多种，当expression为False None ””、 （）、［］、｛｝时都会将其当作False</li><li>如果statement是空的，需要加一个pass来展位，让程序更完整。</li></ul><h2 id="断言"><a href="#断言" class="headerlink" title="断言"></a>断言</h2><p>断言语句和if分支有点类似，它用于对bool表达式进行断言，如果该bool表达式为True，该程序可以继绞二向下执行 否则程序会引发AssertionError错误。</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs py">s_age = <span class="hljs-built_in">input</span>(<span class="hljs-string">&quot;your age:&quot;</span>)<br>age = <span class="hljs-built_in">int</span>(s_age)<br><span class="hljs-string">&#x27;&#x27;&#x27;输入数据&#x27;&#x27;&#x27;</span><br><span class="hljs-number">25</span><br><span class="hljs-keyword">assert</span> <span class="hljs-number">20</span>&lt;age&lt;<span class="hljs-number">80</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;The age entered is between 20 and 80&quot;</span>)<br><span class="hljs-string">&#x27;&#x27;&#x27;输出结果&#x27;&#x27;&#x27;</span><br>The age entered <span class="hljs-keyword">is</span> between <span class="hljs-number">20</span> <span class="hljs-keyword">and</span> <span class="hljs-number">80</span><br></code></pre></td></tr></table></figure><p>assert断言的执行逻辑是</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-keyword">if</span> 条件为 <span class="hljs-literal">False</span> :<br>    程序引发AssertionError错误<br></code></pre></td></tr></table></figure><h2 id="循环结构"><a href="#循环结构" class="headerlink" title="循环结构"></a>循环结构</h2><h3 id="while循环"><a href="#while循环" class="headerlink" title="while循环"></a>while循环</h3><h4 id="格式-1"><a href="#格式-1" class="headerlink" title="格式"></a>格式</h4><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs py">[init_statement]<br><span class="hljs-keyword">while</span> test_expression:<br>    body_statements<br>    [iteration_statements]<br></code></pre></td></tr></table></figure><p>while循环执行顺序：<img src="/2023/04/15/Python%E2%80%94%E2%80%94%E6%B5%81%E7%A8%8B%E6%8E%A7%E5%88%B6/image-20230404233740051.png" alt="image-20230404233740051"></p><h4 id="案例"><a href="#案例" class="headerlink" title="案例"></a>案例</h4><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs py">count_i = <span class="hljs-number">0</span> <span class="hljs-comment">#[init_statement]</span><br><span class="hljs-keyword">while</span> count_i &lt; <span class="hljs-number">10</span> :<span class="hljs-comment">#test_expression</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;count:&quot;</span>,count_i)<br>count_i += <span class="hljs-number">1</span><span class="hljs-comment">#[iteration_statement]</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;finish&quot;</span>)<br></code></pre></td></tr></table></figure><h3 id="for表达式"><a href="#for表达式" class="headerlink" title="for表达式"></a>for表达式</h3><h4 id="格式-2"><a href="#格式-2" class="headerlink" title="格式"></a>格式</h4><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs py">&#123;表达式 <span class="hljs-keyword">for</span> 循环计数器 <span class="hljs-keyword">in</span> 可迭代对象&#125;<br></code></pre></td></tr></table></figure><h4 id="注意点-1"><a href="#注意点-1" class="headerlink" title="注意点"></a>注意点</h4><ul><li>在for关键字之前定义一个表达式，该表达式通常会包含循环计数器。</li><li>for表达式没有循环体，因此不需要冒号</li></ul><h4 id="案例-1"><a href="#案例-1" class="headerlink" title="案例"></a>案例</h4><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs py">a_range = <span class="hljs-built_in">range</span>(<span class="hljs-number">10</span>)<br>b_list = [x*x <span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> a_range <span class="hljs-keyword">if</span> x % <span class="hljs-number">2</span> == <span class="hljs-number">0</span>]<br><span class="hljs-comment"># 求a_range中的偶数</span><br><span class="hljs-built_in">print</span>(b_list) <span class="hljs-comment">#[0, 4, 16, 36, 64]</span><br></code></pre></td></tr></table></figure><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-comment">#多个循环，x范围从0-5，y范围从0-4</span><br><span class="hljs-string">&#x27;&#x27;&#x27;代码一&#x27;&#x27;&#x27;</span><br>a_list = [(x,y) <span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">5</span>) <span class="hljs-keyword">for</span> y <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">4</span>)]<br><span class="hljs-built_in">print</span>(a_list)<br><span class="hljs-string">&#x27;&#x27;&#x27;代码二&#x27;&#x27;&#x27;</span><br>a_list = []<br><span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">5</span>):<br>    <span class="hljs-keyword">for</span> y <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">4</span>):<br>        a_list.append((x,y))<br><span class="hljs-built_in">print</span>(a_list)<br></code></pre></td></tr></table></figure><h3 id="for-in循环"><a href="#for-in循环" class="headerlink" title="for-in循环"></a>for-in循环</h3><h4 id="格式-3"><a href="#格式-3" class="headerlink" title="格式"></a>格式</h4><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-keyword">for</span> 变量 <span class="hljs-keyword">in</span> 字符串|范围|集合等:<br>    statements<br></code></pre></td></tr></table></figure><h4 id="注意点-2"><a href="#注意点-2" class="headerlink" title="注意点"></a>注意点</h4><ul><li>for后面的那个变量受for-in循环控制，在循环开始时自动被赋值，所以在statement中不应该对for后面的那个变量进行赋值。</li><li>for-in循环可用于遍历任何可选代对象。</li></ul><h3 id="循环中使用else"><a href="#循环中使用else" class="headerlink" title="循环中使用else"></a>循环中使用else</h3><p>Python的循环都可以定义else代码块，当循环条件为False时，程序会执行else代码块。循环的else代码块是Python个很特殊的语法（其他编程语言通常不支持）</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-string">&#x27;&#x27;&#x27;代码一&#x27;&#x27;&#x27;</span><br>num = <span class="hljs-number">0</span><br><span class="hljs-keyword">while</span> num &lt; <span class="hljs-number">5</span> :<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;num lower than 5:&#x27;</span>,num)<br>    num += <span class="hljs-number">1</span><br><span class="hljs-keyword">else</span>:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;num equal or higher than 5:&#x27;</span>,num)<br><span class="hljs-string">&#x27;&#x27;&#x27;代码二&#x27;&#x27;&#x27;</span><br>num = <span class="hljs-number">0</span><br><span class="hljs-keyword">while</span> num &lt; <span class="hljs-number">5</span> :<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;num lower than 5:&#x27;</span>,num)<br>    num += <span class="hljs-number">1</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;num equal or higher than 5:&#x27;</span>,num)<br></code></pre></td></tr></table></figure><h3 id="常用工具函数"><a href="#常用工具函数" class="headerlink" title="常用工具函数"></a>常用工具函数</h3><h4 id="zip"><a href="#zip" class="headerlink" title="zip()"></a>zip()</h4><p>可以把多个列表“压缩”成一个zip对象(可迭代对象)，这样就可以用一个循环变量多个列表。如果要压缩的列表长度不相同，以最短的为准。</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs py">a = [<span class="hljs-string">&#x27;z&#x27;</span>,<span class="hljs-string">&#x27;y&#x27;</span>,<span class="hljs-string">&#x27;x&#x27;</span>]<br>b = [<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>]<br>c = [<span class="hljs-number">0.1</span>,<span class="hljs-number">0.2</span>]<br>[x <span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> <span class="hljs-built_in">zip</span>(a,b,c)]<br><span class="hljs-string">&#x27;&#x27;&#x27;输出结果&#x27;&#x27;&#x27;</span><br>[(<span class="hljs-string">&#x27;z&#x27;</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0.1</span>), (<span class="hljs-string">&#x27;y&#x27;</span>, <span class="hljs-number">2</span>, <span class="hljs-number">0.2</span>)]<br></code></pre></td></tr></table></figure><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs py">animals = [<span class="hljs-string">&#x27;cat&#x27;</span>,<span class="hljs-string">&#x27;dog&#x27;</span>,<span class="hljs-string">&#x27;fox&#x27;</span>]<br>scorses = [<span class="hljs-number">79</span>,<span class="hljs-number">69</span>,<span class="hljs-number">89</span>]<br><span class="hljs-keyword">for</span> animals,scorses <span class="hljs-keyword">in</span> <span class="hljs-built_in">zip</span>(animals,scorses):<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;the scorse of %s is %0.2f.&quot;</span>%(animals,scorses))<br></code></pre></td></tr></table></figure><h4 id="reversed"><a href="#reversed" class="headerlink" title="reversed()"></a>reversed()</h4><p>程序需要反向遍历时可用，可接受各种序列(元组、列表、区间等)参数，然后返回反向的迭代器，对参数本身不会产生任何影响。</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs py">c = <span class="hljs-string">&#x27;Hello,Word&#x27;</span><br>[x <span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> <span class="hljs-built_in">reversed</span>(c)]<br><span class="hljs-string">&#x27;&#x27;&#x27;输出结果&#x27;&#x27;&#x27;</span><br>[<span class="hljs-string">&#x27;d&#x27;</span>, <span class="hljs-string">&#x27;r&#x27;</span>, <span class="hljs-string">&#x27;o&#x27;</span>, <span class="hljs-string">&#x27;W&#x27;</span>, <span class="hljs-string">&#x27;,&#x27;</span>, <span class="hljs-string">&#x27;o&#x27;</span>, <span class="hljs-string">&#x27;l&#x27;</span>, <span class="hljs-string">&#x27;l&#x27;</span>, <span class="hljs-string">&#x27;e&#x27;</span>, <span class="hljs-string">&#x27;H&#x27;</span>]<br></code></pre></td></tr></table></figure><h4 id="sorted"><a href="#sorted" class="headerlink" title="sorted()"></a>sorted()</h4><p>程序需要排序的时候可用，可接受各种序列(元组、列表、区间等)参数，返回一个对元素排序的列表，对参数本身不会产生任何影响。</p><p>并且在调用这个函数可以传入key(传入len)、reverse(True&#x2F;False)参数。</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-built_in">list</span> = [<span class="hljs-string">&#x27;ox&#x27;</span>,<span class="hljs-string">&#x27;cat&#x27;</span>,<span class="hljs-string">&#x27;dog&#x27;</span>,<span class="hljs-string">&#x27;fox&#x27;</span>,<span class="hljs-string">&#x27;rabbit&#x27;</span>]<br><span class="hljs-keyword">for</span> s <span class="hljs-keyword">in</span> <span class="hljs-built_in">sorted</span>(<span class="hljs-built_in">list</span>,key=<span class="hljs-built_in">len</span>,reverse=<span class="hljs-literal">True</span>):<br>    <span class="hljs-built_in">print</span>(s,end=<span class="hljs-string">&#x27; &#x27;</span>)<br><span class="hljs-string">&#x27;&#x27;&#x27;输出结果&#x27;&#x27;&#x27;</span><br>rabbit cat dog fox ox <br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>python</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>无线传感器网络知识</title>
    <link href="/2023/04/15/%E6%97%A0%E7%BA%BF%E4%BC%A0%E6%84%9F%E5%99%A8%E7%BD%91%E7%BB%9C%E7%9F%A5%E8%AF%86/"/>
    <url>/2023/04/15/%E6%97%A0%E7%BA%BF%E4%BC%A0%E6%84%9F%E5%99%A8%E7%BD%91%E7%BB%9C%E7%9F%A5%E8%AF%86/</url>
    
    <content type="html"><![CDATA[<h1 id="无线传感器网络知识"><a href="#无线传感器网络知识" class="headerlink" title="无线传感器网络知识"></a>无线传感器网络知识</h1><h2 id="1-概述"><a href="#1-概述" class="headerlink" title="1.概述"></a>1.概述</h2><p>无线传感器网络由一组部署在目标区域内，低成本、低功耗，具备信息采集、数据处理和无线通信等多种功能的传感器节点组成，通过无线通信方式形成一个<strong>自组织网络系统</strong>。</p><blockquote><p>因特网工程任务组(IETF)对自组织网络的定义是：一个移动Ad Hoc网络可以看作是一个独立的自治系统或者是一个对因特网的多跳无线扩展。作为一个自治系统，它有自己的路由协议和网络治理机制；作为多跳无线扩展，它应该对因特网提供一种灵活、无缝的接入。</p><p>自组织网络是由许多带有无线收发装置的通信终端(也称为节点、站点) 构成的一种多跳的临时性自组织的自治系统。每个移动终端兼具路由器和主机两种功能。</p></blockquote><h2 id="2-传感器节点特征"><a href="#2-传感器节点特征" class="headerlink" title="2.传感器节点特征"></a>2.传感器节点特征</h2><p>无线传感器节点由四个基本模块组成：传感器模块、处理器模块、无线收发模块、能量供应模块。</p><p><img src="/2023/04/15/%E6%97%A0%E7%BA%BF%E4%BC%A0%E6%84%9F%E5%99%A8%E7%BD%91%E7%BB%9C%E7%9F%A5%E8%AF%86/image-20230331160548428.png" alt="image-20230331160548428"></p><p>传感器的节点能量消耗情况如下所示：</p><p><img src="/2023/04/15/%E6%97%A0%E7%BA%BF%E4%BC%A0%E6%84%9F%E5%99%A8%E7%BD%91%E7%BB%9C%E7%9F%A5%E8%AF%86/image-20230331162622299.png" alt="image-20230331162622299"></p><h3 id="2-1电源能量有限"><a href="#2-1电源能量有限" class="headerlink" title="2.1电源能量有限"></a>2.1电源能量有限</h3><p>传感器节点体积较小，携带的电池能量十分有限。例如，使用得较多的锂离子和锌电池能量密度大约分别为300 Wh&#x2F;cm³、1500mWh&#x2F;cm³， 也就是说1cm³的锂离子电池或锌电池仅能支持Wins节点保持活跃状态的时间，分别为0.4个小时和2个小时。</p><h3 id="2-2通信能力有限"><a href="#2-2通信能力有限" class="headerlink" title="2.2通信能力有限"></a>2.2通信能力有限</h3><p>通信能力有限。根据传感器节点的载波频率及无线信号的衰减公式，我们可以推出，无线通信的能量消耗与通信距离的关系为：<br>$$<br>E&#x3D;kd^n \qquad n\in(2,4)<br>$$<br>n的取值与很多因素很关，例如传感器节点所在区域有其他信号的干扰，部署环境条件恶劣，n的取值就大。随着通信距离的增加，能耗将急剧增加，因此在满足通信连通度的前提下应尽量减少单跳通信距离。</p><h3 id="2-3计算和存储能力有限"><a href="#2-3计算和存储能力有限" class="headerlink" title="2.3计算和存储能力有限"></a>2.3计算和存储能力有限</h3><p>传感器节点是一种低功耗、低成本、微型的嵌入式系统，这些限制必然要求携带的处理器能力比较弱，存储器容量比较小。</p><h2 id="3-传感器网络特征"><a href="#3-传感器网络特征" class="headerlink" title="3.传感器网络特征"></a>3.传感器网络特征</h2><p>无线传感器网络通常包括传感器节点、汇聚节点和管理节点：</p><p><img src="/2023/04/15/%E6%97%A0%E7%BA%BF%E4%BC%A0%E6%84%9F%E5%99%A8%E7%BD%91%E7%BB%9C%E7%9F%A5%E8%AF%86/image-20230331164252826.png" alt="image-20230331164252826"></p><p>传感器节点通过人工放置或飞机撒播等方法部署在监测区域，以自组织方式构成网络。传感器节点监测的数据沿着其他传感器节点逐跳地进行传输，在传输过程中可能被多个节点处理，经过多跳后到达汇聚节点，最后通过互联网或卫星到达管理节点。</p><h3 id="3-1网络内的节点"><a href="#3-1网络内的节点" class="headerlink" title="3.1网络内的节点"></a>3.1网络内的节点</h3><h4 id="3-1-1传感器节点"><a href="#3-1-1传感器节点" class="headerlink" title="3.1 .1传感器节点"></a>3.1 .1传感器节点</h4><p>传感器节点既具有传感器网络中的节点终端功能，也具有路由器的功能，在实施监测任务、发送自身的监测数据，与其他节点协作完成一些特定任务的同时，还需要对其他节点转发来的数据进行存储、融合等处理，并将处理后的数据进一步地转发。</p><h4 id="3-1-2汇聚节点"><a href="#3-1-2汇聚节点" class="headerlink" title="3.1.2汇聚节点"></a>3.1.2汇聚节点</h4><p>汇聚节点的处理能力、存储能力和通信能力都比较强。一般情况下，汇聚节点放置在监测区域的边缘等人能直接到达的区域，节点的能量可以得到补充，因此通常不会考虑汇聚节点的能量问题。汇聚节点带有无线通信接口的特殊网关设备，它连接传感器网络和互联网等外部网络，同时发布管理节点的监测任务，并将收集的数据转发到外部网络上。</p><h4 id="3-1-3管理节点"><a href="#3-1-3管理节点" class="headerlink" title="3.1.3管理节点"></a>3.1.3管理节点</h4><p>用户通过管理节点对传感器网络进行配置和管理，发布监测任 务以及收集监测数据。</p><h3 id="3-2-网络特征"><a href="#3-2-网络特征" class="headerlink" title="3.2 网络特征"></a>3.2 网络特征</h3><h4 id="3-2-1-节点分布稠密"><a href="#3-2-1-节点分布稠密" class="headerlink" title="3.2.1 节点分布稠密"></a>3.2.1 节点分布稠密</h4><p>为了获取精确信息，在监测区域通常密集部署了大量传感器节点。大量冗余节点的存在，可以降低或消除节点失效带来的监测盲区等问题，提高系统的容错性能，通过不同空间视角获得的信息具有更大的信噪比，并能够提高监测的精确度，降低对单个节点传感器的精度要求。 </p><h4 id="3-2-2-自组织网络"><a href="#3-2-2-自组织网络" class="headerlink" title="3.2.2 自组织网络"></a>3.2.2 自组织网络</h4><p>由于部署的节点个数可能达到成千上万，甚至更多，且监测区域可能是人难以到达或者是极其危险的区域，如灾难现场等，传感器节点很难逐个放置在目标区域内，传感器节点常常通过飞机撒播或炮弹发射等形式部署在监测区域内，因此传感器节点的位置不能预先精确设定，节点之间的相关邻居关系预先也不知道。传感器节点能够自动配置和管理，通过拓扑控制机制和网络协议自动形成转发监测数据的多跳无线网络系统。 </p><h4 id="3-2-3-网络拓扑动态变化"><a href="#3-2-3-网络拓扑动态变化" class="headerlink" title="3.2.3 网络拓扑动态变化"></a>3.2.3 网络拓扑动态变化</h4><p>在无线Ad-hoc网络中，拓扑结构的变化主要源于节点的移动。在大规模传感器网络的应用领域中，下列因素会造成传感器网络的拓扑结构发生变化：</p><ol><li>物理破坏或电池能量耗尽会导致传感器节点出现故障或失效； </li><li>无线通信链路带宽或信号干扰也会造成节点之间的通信时断时通；</li><li>新节点的加入；</li><li>节点在监测区域内的移动。</li></ol><h4 id="3-2-4-应用相关的网络"><a href="#3-2-4-应用相关的网络" class="headerlink" title="3.2.4 应用相关的网络"></a>3.2.4 应用相关的网络</h4><p>传感器网络的应用领域非常广阔，如军事应用、环境观测、智能家居等等。不同的应用背景对传感器网络的要求不同，因此对应的硬件系统、网络协议也存在很大的差别。如草皮的自动灌溉系统要求传感器节点监测草皮的湿度信息，桥梁的监测系统要求传感器节点监测桥梁承受的压力和应变。针对每一个具体的应用要求，研究设计传感器网络硬件技术和网络协议，是无线传感器设计不同于传统网络的显著特征。 </p><h4 id="3-2-5-以数据为中心的网络"><a href="#3-2-5-以数据为中心的网络" class="headerlink" title="3.2.5 以数据为中心的网络"></a>3.2.5 以数据为中心的网络</h4><p>传感器网络是任务型的网络。传感器网络报告监测事件或用户使用传感器网络查询事件时，传感器网络仅需要将所关心的事件汇报给用户，而并不关心哪个节点监测到事件。例如，在应用于森林火灾监测的传感器网络中，火灾可能出现在任何地方，用户只关心火灾出现的位置、时间和范围，而并不关心哪些节点监测到火灾。</p>]]></content>
    
    
    <categories>
      
      <category>WSNs</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Solidity教程</title>
    <link href="/2023/04/15/Solidity%E6%95%99%E7%A8%8B/"/>
    <url>/2023/04/15/Solidity%E6%95%99%E7%A8%8B/</url>
    
    <content type="html"><![CDATA[<h1 id="Solidity教程"><a href="#Solidity教程" class="headerlink" title="Solidity教程"></a>Solidity教程</h1><p>from <a href="https://cryptozombies.io/">https://cryptozombies.io/</a></p><h2 id="合约"><a href="#合约" class="headerlink" title="合约"></a>合约</h2><h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><p>Solidity 的代码都包裹在<strong>合约</strong>里面。一份合约就是以太币应用的基本模块， 所有的变量和函数都属于一份合约, 它是你所有应用的起点。</p><h3 id="版本指令"><a href="#版本指令" class="headerlink" title="版本指令"></a>版本指令</h3><p>所有的 Solidity 源码都必须冠以 “version pragma” — 标明 Solidity 编译器的版本. 以避免将来新的编译器可能破坏你的代码。</p><p>例如: <code>pragma solidity ^0.4.19;</code> (当前 Solidity 的最新版本是 0.4.19)。如下所示：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs solidity">pragma solidity ^0.4.19;<br><br>contract HelloWorld &#123;<br><br>&#125;<br></code></pre></td></tr></table></figure><h2 id="引入（Import）"><a href="#引入（Import）" class="headerlink" title="引入（Import）"></a>引入（Import）</h2><p>在 Solidity 中，当你有多个文件并且想把一个文件导入另一个文件时，可以使用 <code>import</code> 语句：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs solidity">import &quot;./someothercontract.sol&quot;;<br><br>contract newContract is SomeOtherContract &#123;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>这样当我们在合约（contract）目录下有一个名为 <code>someothercontract.sol</code> 的文件（ <code>./</code> 就是同一目录的意思），它就会被编译器导入。</p><h2 id="状态变量和整数"><a href="#状态变量和整数" class="headerlink" title="状态变量和整数"></a>状态变量和整数</h2><p><strong>状态变量</strong>是被永久地保存在合约中。也就是说它们被写入以太币区块链中. 想象成写入一个数据库。</p><p>例子:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs solidity">contract Example &#123;<br>  // 这个无符号整数将会永久的被保存在区块链中<br>  uint myUnsignedInteger = 100;<br>&#125;<br></code></pre></td></tr></table></figure><p>在上面的例子中，定义 <code>myUnsignedInteger</code> 为 <code>uint</code> 类型，并赋值100。</p><h3 id="无符号整数-uint"><a href="#无符号整数-uint" class="headerlink" title="无符号整数: uint"></a>无符号整数: <code>uint</code></h3><p><code>uint</code> 无符号数据类型， 指<strong>其值不能是负数</strong>，对于有符号的整数存在名为 <code>int</code> 的数据类型。</p><blockquote><p>注: Solidity中， <code>uint</code> 实际上是 <code>uint256</code>代名词， 一个256位的无符号整数。你也可以定义位数少的uints — <code>uint8</code>， <code>uint16</code>， <code>uint32</code>， 等……</p></blockquote><h2 id="Storage与Memory"><a href="#Storage与Memory" class="headerlink" title="Storage与Memory"></a>Storage与Memory</h2><p>在 Solidity 中，有两个地方可以存储变量 —— <code>storage</code> 或 <code>memory</code>。</p><p><strong>Storage</strong> 变量是指永久存储在区块链中的变量。 </p><p><strong>Memory</strong> 变量则是临时的，当外部函数对某合约调用完成时，内存型变量即被移除。 你可以把它想象成存储在你电脑的硬盘或是RAM中数据的关系。</p><p>但大多数时候你都用不到这些关键字，默认情况下 Solidity 会自动处理它们。 <strong>状态变量（在函数之外声明的变量）默认为“Storage”形式，并永久写入区块链；而在函数内部声明的变量是“Memory”型的，它们函数调用结束后消失。</strong></p><p>然而也有一些情况下，你需要<strong>手动声明存储类型</strong>，主要用于处理函数内的<strong>结构体</strong>和<strong>数组</strong>时：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs solidity">contract SandwichFactory &#123;<br>  struct Sandwich &#123;<br>    string name;<br>    string status;<br>  &#125;<br><br>  Sandwich[] sandwiches;<br><br>  function eatSandwich(uint _index) public &#123;<br>    // Sandwich mySandwich = sandwiches[_index];<br><br>    // ^ 看上去很直接，不过 Solidity 将会给出警告<br>    // 告诉你应该明确在这里定义 `storage` 或者 `memory`。<br><br>    // 所以你应该明确定义 `storage`:<br>    Sandwich storage mySandwich = sandwiches[_index];<br>    // ...这样 `mySandwich` 是指向 `sandwiches[_index]`的指针<br>    // 在存储里，另外...<br>    mySandwich.status = &quot;Eaten!&quot;;<br>    // ...这将永久把 `sandwiches[_index]` 变为区块链上的存储<br><br>    // 如果你只想要一个副本，可以使用`memory`:<br>    Sandwich memory anotherSandwich = sandwiches[_index + 1];<br>    // ...这样 `anotherSandwich` 就仅仅是一个内存里的副本了<br>    // 另外<br>    anotherSandwich.status = &quot;Eaten!&quot;;<br>    // ...将仅仅修改临时变量，对 `sandwiches[_index + 1]` 没有任何影响<br>    // 不过你可以这样做:<br>    sandwiches[_index + 1] = anotherSandwich;<br>    // ...如果你想把副本的改动保存回区块链存储<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="数学运算"><a href="#数学运算" class="headerlink" title="数学运算"></a>数学运算</h2><p>在 Solidity 中，数学运算很直观明了，与其它程序设计语言相同:</p><ul><li>加法: <code>x + y</code></li><li>减法: <code>x - y</code>,</li><li>乘法: <code>x * y</code></li><li>除法: <code>x / y</code></li><li>取模 &#x2F; 求余: <code>x % y</code> <em>(例如, <code>13 % 5</code> 余 <code>3</code>, 因为13除以5，余3)</em></li></ul><p>Solidity 还支持 <strong>乘方操作</strong> (如：x 的 y次方），例如： 5 ** 2 &#x3D; 25</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs solidity">uint x = 5 ** 2; // equal to 5^2 = 25<br></code></pre></td></tr></table></figure><h2 id="结构体"><a href="#结构体" class="headerlink" title="结构体"></a>结构体</h2><p>有时你需要更复杂的数据类型，Solidity 提供了 <strong>结构体</strong>:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs solidity">struct Person &#123;<br>  uint age;<br>  string name;<br>&#125;<br></code></pre></td></tr></table></figure><p>结构体允许你生成一个更复杂的数据类型，它有多个属性。</p><blockquote><p>注：我们刚刚引进了一个新类型, <code>string</code>。 字符串用于保存任意长度的 UTF-8 编码数据。 如： <code>string greeting = &quot;Hello world!&quot;</code>。</p></blockquote><h2 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h2><p>Solidity 支持两种数组：</p><h3 id="静态数组"><a href="#静态数组" class="headerlink" title="静态数组"></a>静态数组</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs solidity">// 固定长度为2的静态数组:<br>uint[2] fixedArray;<br>// 固定长度为5的string类型的静态数组:<br>string[5] stringArray;<br>// 动态数组，长度不固定，可以动态添加元素:<br>uint[] dynamicArray;<br></code></pre></td></tr></table></figure><h3 id="动态数组"><a href="#动态数组" class="headerlink" title="动态数组"></a>动态数组</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs solidity">// 动态数组，长度不固定，可以动态添加元素:<br>uint[] dynamicArray;<br></code></pre></td></tr></table></figure><p>你也可以建立一个 <strong>结构体</strong>类型的数组 </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs solidity">Person[] people; // 这是动态数组，我们可以不断添加元素<br></code></pre></td></tr></table></figure><p><strong>记住</strong>：状态变量被<strong>永久保存</strong>在区块链中。所以在你的合约中创建动态数组来保存成结构的数据是非常有意义的。</p><h3 id="公共数组"><a href="#公共数组" class="headerlink" title="公共数组"></a>公共数组</h3><p>你可以定义 <code>public</code> 数组, Solidity 会自动创建 *<strong>getter</strong> 方法. 语法如下:</p><figure class="highlight inform7"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs inform7"><span class="hljs-keyword">Person</span><span class="hljs-comment">[]</span> public people;<br></code></pre></td></tr></table></figure><p>其它的合约可以从这个数组读取数据（但不能写入数据），所以这在合约中是一个有用的保存公共数据的模式。</p><h2 id="结构体数组"><a href="#结构体数组" class="headerlink" title="结构体数组"></a>结构体数组</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs solidity">struct Person &#123;<br>  uint age;<br>  string name;<br>&#125;<br><br>Person[] public people;<br><br>// 创建一个新的Person:<br>Person satoshi = Person(172, &quot;Satoshi&quot;);<br><br>// 将新创建的satoshi添加进people数组:<br>people.push(satoshi);<br></code></pre></td></tr></table></figure><p>你也可以两步并一步，用一行代码更简洁:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs solidity">people.push(Person(16, &quot;Vitalik&quot;));<br></code></pre></td></tr></table></figure><blockquote><p>注：<code>array.push()</code> 在数组的 <strong>尾部</strong> 加入新元素 ，所以元素在数组中的顺序就是我们添加的顺序，类似python的array.append()</p></blockquote><h2 id="定义函数"><a href="#定义函数" class="headerlink" title="定义函数"></a>定义函数</h2><p>在 Solidity 中函数定义的句法如下:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs solidity">function eatHamburgers(string _name, uint _amount) &#123;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>这是一个名为 <code>eatHamburgers</code> 的函数，它接受两个参数：一个 <code>string</code>类型的 和 一个 <code>uint</code>类型的。现在函数内部还是空的。</p><blockquote><p>注：: 习惯上函数里的变量<strong>都是以(<code>_</code>)开头</strong> (但不是硬性规定) 以区别全局变量。我们整个教程都会沿用这个习惯。</p></blockquote><p>我们的函数定义如下:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs solidity">eatHamburgers(&quot;vitalik&quot;, 100);<br></code></pre></td></tr></table></figure><h2 id="私有-x2F-公共函数"><a href="#私有-x2F-公共函数" class="headerlink" title="私有 &#x2F; 公共函数"></a>私有 &#x2F; 公共函数</h2><p>Solidity 定义的函数的属性默认为<code>共有</code>。 这就意味着任何一方 (或其它合约) 都可以调用你合约里的函数。但是全部都设置为共有的话，合约易于受到攻击。 所以可以将不需要外界调用的函数设置为为私有，只有当你需要外部世界调用它时才将它设置为共有。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs solidity">uint[] numbers;<br><br>function _addToArray(uint _number) private &#123;<br>  numbers.push(_number);<br>&#125;<br></code></pre></td></tr></table></figure><p>可以看到，<strong>在函数名字后面使用关键字 <code>private</code> 即可</strong>。和函数的参数类似，<strong>私有函数的名字用(<code>_</code>)起始</strong>。</p><h2 id="internal-和-external"><a href="#internal-和-external" class="headerlink" title="internal 和 external"></a>internal 和 external</h2><p>除 <code>public</code> 和 <code>private</code> 属性之外，Solidity 还使用了另外两个描述函数可见性的修饰词：<code>internal</code>（内部） 和 <code>external</code>（外部）。</p><p><code>internal</code> 和 <code>private</code> 类似，不过， 如果某个合约继承自其父合约，这个合约即可以访问父合约中定义的<code>internal</code> 函数。</p><p><code>external</code> 与<code>public</code> 类似，只不过这些函数只能在合约之外调用 - 它们不能被合约内的其他函数调用。稍后我们将讨论什么时候使用 <code>external</code> 和 <code>public</code>。</p><p>声明函数 <code>internal</code> 或 <code>external</code> 类型的语法，与声明 <code>private</code> 和 <code>public</code>类 型相同：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs solidity">contract Sandwich &#123;<br>  uint private sandwichesEaten = 0;<br><br>  function eat() internal &#123;<br>    sandwichesEaten++;<br>  &#125;<br>&#125;<br><br>contract BLT is Sandwich &#123;<br>  uint private baconSandwichesEaten = 0;<br><br>  function eatWithBacon() public returns (string) &#123;<br>    baconSandwichesEaten++;<br>    // 因为eat() 是internal 的，所以我们能在这里调用<br>    eat();<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="继承（Inheritance）"><a href="#继承（Inheritance）" class="headerlink" title="继承（Inheritance）"></a>继承（Inheritance）</h2><p>当代码过于冗长的时候，最好将代码和逻辑分拆到多个不同的合约中，以便于管理。Solidity提供的是<strong>Inheritance</strong>。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs solidity">contract Doge &#123;<br>  function catchphrase() public returns (string) &#123;<br>    return &quot;So Wow CryptoDoge&quot;;<br>  &#125;<br>&#125;<br><br>contract BabyDoge is Doge &#123;<br>  function anotherCatchphrase() public returns (string) &#123;<br>    return &quot;Such Moon BabyDoge&quot;;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>由于 <code>BabyDoge</code> 是从 <code>Doge</code> 那里 <strong>inherits</strong> （继承)过来的。 这意味着当你编译和部署了 <code>BabyDoge</code>，它将可以访问 <code>catchphrase()</code> 和 <code>anotherCatchphrase()</code>和其他我们在 <code>Doge</code> 中定义的其他公共函数。</p><p>这可以用于逻辑继承（比如表达子类的时候，<code>Cat</code> 是一种 <code>Animal</code>）。 但也可以简单地将类似的逻辑组合到不同的合约中以组织代码。</p><h2 id="映射和地址"><a href="#映射和地址" class="headerlink" title="映射和地址"></a>映射和地址</h2><h3 id="Addresses-（地址）"><a href="#Addresses-（地址）" class="headerlink" title="Addresses （地址）"></a>Addresses （地址）</h3><p>以太坊区块链由 <strong>_ account _</strong> (账户)组成，你可以把它想象成银行账户。一个帐户的余额是 <strong><em>以太</em></strong> （在以太坊区块链上使用的币种），你可以和其他帐户之间支付和接受以太币，就像你的银行帐户可以电汇资金到其他银行帐户一样。</p><p>每个帐户都有一个“地址”，你可以把它想象成银行账号。这是账户唯一的标识符，<strong>地址属于特定用户（或智能合约）的</strong>。</p><h3 id="Mapping（映射）"><a href="#Mapping（映射）" class="headerlink" title="Mapping（映射）"></a>Mapping（映射）</h3><p> <strong>映射</strong> 是另一种在 Solidity 中存储有组织数据的方法。具有同样功能的还有<strong>结构体</strong>和<strong>数组</strong>。</p><p>映射是这样定义的：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs solidity">//对于金融应用程序，将用户的余额保存在一个 uint类型的变量中：<br>mapping (address =&gt; uint) public accountBalance;<br>//或者可以用来通过userId 存储/查找的用户名<br>mapping (uint =&gt; string) userIdToName;<br></code></pre></td></tr></table></figure><p>映射本质上是存储和查找数据所用的<strong>键-值对</strong>。</p><ul><li>在第一个例子中，键是一个 <code>address</code>，值是一个 <code>uint</code>。</li><li>在第二个例子中，键是一个<code>uint</code>，值是一个 <code>string</code>。</li></ul><h2 id="函数的更多属性"><a href="#函数的更多属性" class="headerlink" title="函数的更多属性"></a>函数的更多属性</h2><h3 id="返回值"><a href="#返回值" class="headerlink" title="返回值"></a>返回值</h3><p>要想函数返回一个数值，按如下定义：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs solidity">string greeting = &quot;What&#x27;s up dog&quot;;<br>//返回一个值的函数<br>function sayHello() public returns (string) &#123;<br>  return greeting;<br>&#125;<br><br>//------------------------------------//<br><br>//返回多个值的函数<br>function multipleReturns() internal returns(uint a, uint b, uint c) &#123;<br>  return (1, 2, 3);<br>&#125;<br><br>function processMultipleReturns() external &#123;<br>  uint a;<br>  uint b;<br>  uint c;<br>  // 这样来做批量赋值:<br>  (a, b, c) = multipleReturns();<br>&#125;<br><br>// 或者如果我们只想返回其中一个变量:<br>function getLastReturnValue() external &#123;<br>  uint c;<br>  // 可以对其他字段留空:<br>  (,,c) = multipleReturns();<br>&#125;<br></code></pre></td></tr></table></figure><p>Solidity 里，函数的定义里<strong>可包含返回值的数据类型</strong>。</p><h3 id="函数的修饰符"><a href="#函数的修饰符" class="headerlink" title="函数的修饰符"></a>函数的修饰符</h3><h4 id="view"><a href="#view" class="headerlink" title="view"></a>view</h4><p>把函数定义为 <strong>view</strong>, 意味着它<strong>只能读取数据不能更改数据</strong>：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs solidity">function sayHello() public view returns (string) &#123;<br></code></pre></td></tr></table></figure><h4 id="pure"><a href="#pure" class="headerlink" title="pure"></a>pure</h4><p>Solidity 还支持 <strong>pure</strong> 函数, 表明这个函数<strong>甚至都不访问应用里的数据</strong>，它的返回值<strong>完全取决于它的输入参数</strong>，例如：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs solidity">function _multiply(uint a, uint b) private pure returns (uint) &#123;<br>  return a * b;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p> Solidity 编辑器会给出提示，提醒你使用这些修饰符。</p></blockquote><h2 id="Keccak256和类型转换"><a href="#Keccak256和类型转换" class="headerlink" title="Keccak256和类型转换"></a>Keccak256和类型转换</h2><h3 id="Keccak256"><a href="#Keccak256" class="headerlink" title="Keccak256"></a>Keccak256</h3><p>Ethereum 内部有一个散列函数<code>keccak256</code>，它用了SHA-3版本，把一个字符串转换为一个256位的16进制数字。字符串的一个微小变化会引起散列数据极大变化。例子如下:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs solidity">//6e91ec6b618bb462a4a6ee5aa2cb0e9cf30f7a052bb467b0ba58b8748c00d2e5<br>keccak256(&quot;aaaab&quot;);<br>//b1f078126895a1424524de5321b339ab00408010b7cf0e6ed451514981e58aa9<br>keccak256(&quot;aaaac&quot;);<br></code></pre></td></tr></table></figure><blockquote><p>注: 在区块链中<strong>安全地</strong>产生一个随机数是一个很难的问题， 本例的方法不安全。</p></blockquote><h3 id="类型转换"><a href="#类型转换" class="headerlink" title="类型转换"></a>类型转换</h3><p>有时你需要变换数据类型。例如:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs solidity">uint8 a = 5;<br>uint b = 6;<br>// 将会抛出错误，因为 a * b 返回 uint, 而不是 uint8:<br>uint8 c = a * b;<br>// 我们需要将 b 转换为 uint8:<br>uint8 c = a * uint8(b);<br></code></pre></td></tr></table></figure><p>上面, <code>a * b</code> 返回类型是 <code>uint</code>, 但是当我们尝试用 <code>uint8</code> 类型接收时, 就会造成潜在的错误。如果把它的数据类型转换为 <code>uint8</code>, 就可以了，编译器也不会出错。</p><h2 id="特殊函数"><a href="#特殊函数" class="headerlink" title="特殊函数"></a>特殊函数</h2><h3 id="msg-sender"><a href="#msg-sender" class="headerlink" title="msg.sender"></a>msg.sender</h3><p>在 Solidity 中，有一些全局变量可以被所有函数调用。 其中一个就是 <code>msg.sender</code>，它指的是当前调用者（或智能合约）的 <code>address</code>。</p><blockquote><p>注意：在 Solidity 中，功能执行始终需要从外部调用者开始。 除非有人调用其中的函数，不然一个合约只会在区块链上什么也不做，所以 <code>msg.sender</code>总是存在的。</p></blockquote><p>以下是使用 <code>msg.sender</code> 来更新 <code>mapping</code> 的例子：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs solidity">mapping (address =&gt; uint) favoriteNumber;<br><br>function setMyNumber(uint _myNumber) public &#123;<br>  // 更新我们的 `favoriteNumber` 映射来将 `_myNumber`存储在 `msg.sender`名下<br>  favoriteNumber[msg.sender] = _myNumber;<br>  // 存储数据至映射的方法和将数据存储在数组相似<br>&#125;<br><br>function whatIsMyNumber() public view returns (uint) &#123;<br>  // 拿到存储在调用者地址名下的值<br>  // 若调用者还没调用 setMyNumber， 则值为 `0`<br>  return favoriteNumber[msg.sender];<br>&#125;<br></code></pre></td></tr></table></figure><p>在这个小小的例子中，任何人都可以调用 <code>setMyNumber</code> 在我们的合约中存下一个 <code>uint</code> 并且与他们的地址相绑定。 然后，他们调用 <code>whatIsMyNumber</code> 就会返回他们存储的 <code>uint</code>。</p><p>使用 <code>msg.sender</code> 很安全，因为它具有以太坊区块链的安全保障 —— 除非窃取与以太坊地址相关联的私钥，否则是没有办法修改其他人的数据的。</p><h3 id="Require"><a href="#Require" class="headerlink" title="Require"></a>Require</h3><p> <code>require</code>可以使得函数在执行过程中，当不满足某些条件时抛出错误，并停止执行：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs solidity">function sayHiToVitalik(string _name) public returns (string) &#123;<br>  // 比较 _name 是否等于 &quot;Vitalik&quot;. 如果不成立，抛出异常并终止程序<br>  // (敲黑板: Solidity 并不支持原生的字符串比较, 我们只能通过比较两字符串的 keccak256 哈希值来进行判断)<br>  require(keccak256(_name) == keccak256(&quot;Vitalik&quot;));<br>  // 如果返回 true, 运行如下语句<br>  return &quot;Hi!&quot;;<br>&#125;<br></code></pre></td></tr></table></figure><p>如果你这样调用函数 <code>sayHiToVitalik（“Vitalik”）</code> ,它会返回“Hi！”。而如果调用的时候使用了其他参数，它则会抛出错误并停止执行。</p><p>因此，在调用一个函数之前，用 <code>require</code> 验证前置条件是非常有必要的。</p><blockquote><p>注意：在 Solidity 中，关键词放置的顺序并不重要</p></blockquote><h2 id="事件"><a href="#事件" class="headerlink" title="事件"></a>事件</h2><p><strong>事件</strong> 是合约和区块链通讯的一种机制。你的前端应用“监听”某些事件，并做出反应。</p><p>例子:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs solidity">// 这里建立事件<br>event IntegersAdded(uint x, uint y, uint result);<br><br>function add(uint _x, uint _y) public &#123;<br>  uint result = _x + _y;<br>  //触发事件，通知app<br>  IntegersAdded(_x, _y, result);<br>  return result;<br>&#125;<br></code></pre></td></tr></table></figure><p>你的 app 前端可以监听这个事件。JavaScript 实现如下:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs solidity">YourContract.IntegersAdded(function(error, result) &#123;<br>  // 要监听的事件<br>&#125;)<br></code></pre></td></tr></table></figure><h2 id="Web3-js"><a href="#Web3-js" class="headerlink" title="Web3.js"></a>Web3.js</h2><p>以太坊有一个 JavaScript 库，名为<strong>Web3.js</strong>。我们可以写一段 JavaScript 前端代码来调用合约。JavaScript 所做的就是获取合约里产生的数据, 并且利用浏览器里的 JavaScript 神奇功能 (我们用 Vue.js)，置换出图像以及使用CSS过滤器。</p><p><strong>未完待续…..</strong></p>]]></content>
    
    
    <categories>
      
      <category>区块链</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>PPT学习</title>
    <link href="/2023/04/15/PPT%E4%B9%8B%E5%85%89%EF%BC%9A%E4%B8%89%E4%B8%AA%E7%BB%B4%E5%BA%A6%E6%89%93%E9%80%A0%E5%AE%8C%E7%BE%8EPPT/"/>
    <url>/2023/04/15/PPT%E4%B9%8B%E5%85%89%EF%BC%9A%E4%B8%89%E4%B8%AA%E7%BB%B4%E5%BA%A6%E6%89%93%E9%80%A0%E5%AE%8C%E7%BE%8EPPT/</url>
    
    <content type="html"><![CDATA[<h1 id="PPT学习"><a href="#PPT学习" class="headerlink" title="PPT学习"></a>PPT学习</h1><p>本文主要是拜读冯注龙先生的《PPT之光：三个维度打造完美PPT》后的学习笔记;-)</p><h2 id="PPT制作步骤"><a href="#PPT制作步骤" class="headerlink" title="PPT制作步骤"></a>PPT制作步骤</h2><ol><li><p>明确主题与用途</p><ol><li>目的：做来干什么，是哪个方面的</li><li>用途：给谁看，要多大，需要准备什么东西</li></ol></li><li><p>分析观众</p><p>群众人数、知识水平、年龄分布、性别分布。</p><p><strong>对主题的了解程度</strong>——通俗易懂？严谨专业？</p></li><li><p>文字提炼与梳理</p><p>进行提炼和梳理→<strong>让内容可视化</strong></p><p>确定好内容与层级</p></li><li><p>确定风格并作出Demo</p><ol><li><p>风格</p><ol><li>演讲风格：根据对群众的分析和主讲人的风格综合得出</li><li>设计风格：从场合和群众出发，适当考虑用户审美</li></ol></li><li><p>Demo</p><p>制作包含封面页、目录页、正文页等重要内容的Demo，然后跟主讲人沟通</p></li></ol></li><li><p>检查并保存</p><p>将文件保存为PPT、PPTX和PDF各一份</p></li></ol><h2 id="制造难忘瞬间"><a href="#制造难忘瞬间" class="headerlink" title="制造难忘瞬间"></a>制造难忘瞬间</h2><h3 id="开场"><a href="#开场" class="headerlink" title="开场"></a>开场</h3><ol><li>巧妙的自我介绍</li><li>故事导入</li><li>问题导入</li></ol><h3 id="标题"><a href="#标题" class="headerlink" title="标题"></a>标题</h3><ol><li><p>传统讲述</p><p>与演讲主题联系紧密，不容易出错，但是很平淡</p></li><li><p>干货</p><p>某方面的经验，注重提炼，知识密度大</p></li><li><p>“标题党”</p><p>抓人眼球，有悬念</p></li><li><p>打破常规</p><p>与传统观点对立，正反对比强烈</p></li><li><p>数字型</p><p>信息含量高、专业性强、增强逻辑感、逻辑线清晰</p></li></ol><h3 id="难忘的桥段"><a href="#难忘的桥段" class="headerlink" title="难忘的桥段"></a>难忘的桥段</h3><ol><li><p>举动</p><p>一些手势，借助道具的一些动作等</p></li><li><p>金句</p><p>观点的提炼。在专业书籍，名人演讲，各大网站的文章等都可以找到灵感。</p></li><li><p>画面</p><p>图片会更有沉浸感，更能产生共鸣。</p></li></ol><h3 id="结尾"><a href="#结尾" class="headerlink" title="结尾"></a>结尾</h3><ol><li><p>名言总结</p><p>给观众启发，拍照留念</p></li><li><p>幽默结尾</p><p>通过流行梗、表情包等在最后让大家紧绷的神经得以放松</p></li></ol><h2 id="自检清单"><a href="#自检清单" class="headerlink" title="自检清单"></a>自检清单</h2><p><img src="/2023/04/15/PPT%E4%B9%8B%E5%85%89%EF%BC%9A%E4%B8%89%E4%B8%AA%E7%BB%B4%E5%BA%A6%E6%89%93%E9%80%A0%E5%AE%8C%E7%BE%8EPPT/image-20230406225852128.png" alt="image-20230406225852128"></p><h2 id="设计流程"><a href="#设计流程" class="headerlink" title="设计流程"></a>设计流程</h2><p><img src="/2023/04/15/PPT%E4%B9%8B%E5%85%89%EF%BC%9A%E4%B8%89%E4%B8%AA%E7%BB%B4%E5%BA%A6%E6%89%93%E9%80%A0%E5%AE%8C%E7%BE%8EPPT/image-20230406230202581.png" alt="image-20230406230202581"></p><ol><li><p>了解客户需求</p><p><img src="/2023/04/15/PPT%E4%B9%8B%E5%85%89%EF%BC%9A%E4%B8%89%E4%B8%AA%E7%BB%B4%E5%BA%A6%E6%89%93%E9%80%A0%E5%AE%8C%E7%BE%8EPPT/image-20230406230908441.png" alt="image-20230406230908441"></p></li><li><p>确定分页文案</p><p><img src="/2023/04/15/PPT%E4%B9%8B%E5%85%89%EF%BC%9A%E4%B8%89%E4%B8%AA%E7%BB%B4%E5%BA%A6%E6%89%93%E9%80%A0%E5%AE%8C%E7%BE%8EPPT/image-20230406230924167.png" alt="image-20230406230924167"></p></li><li><p>确定内容排版</p><p><img src="/2023/04/15/PPT%E4%B9%8B%E5%85%89%EF%BC%9A%E4%B8%89%E4%B8%AA%E7%BB%B4%E5%BA%A6%E6%89%93%E9%80%A0%E5%AE%8C%E7%BE%8EPPT/image-20230406230938144.png" alt="image-20230406230938144"></p></li><li><p>确认整体风格</p><p><img src="/2023/04/15/PPT%E4%B9%8B%E5%85%89%EF%BC%9A%E4%B8%89%E4%B8%AA%E7%BB%B4%E5%BA%A6%E6%89%93%E9%80%A0%E5%AE%8C%E7%BE%8EPPT/image-20230406230953685.png" alt="image-20230406230953685"></p></li><li><p>统一页面风格</p><p><img src="/2023/04/15/PPT%E4%B9%8B%E5%85%89%EF%BC%9A%E4%B8%89%E4%B8%AA%E7%BB%B4%E5%BA%A6%E6%89%93%E9%80%A0%E5%AE%8C%E7%BE%8EPPT/image-20230406231010704.png" alt="image-20230406231010704"></p></li></ol><h2 id="五个软件设置技巧"><a href="#五个软件设置技巧" class="headerlink" title="五个软件设置技巧"></a>五个软件设置技巧</h2><h3 id="改变尺寸比例"><a href="#改变尺寸比例" class="headerlink" title="改变尺寸比例"></a>改变尺寸比例</h3><p><img src="/2023/04/15/PPT%E4%B9%8B%E5%85%89%EF%BC%9A%E4%B8%89%E4%B8%AA%E7%BB%B4%E5%BA%A6%E6%89%93%E9%80%A0%E5%AE%8C%E7%BE%8EPPT/image-20230406231254818.png" alt="image-20230406231254818"></p><p><img src="/2023/04/15/PPT%E4%B9%8B%E5%85%89%EF%BC%9A%E4%B8%89%E4%B8%AA%E7%BB%B4%E5%BA%A6%E6%89%93%E9%80%A0%E5%AE%8C%E7%BE%8EPPT/image-20230406231320291.png" alt="image-20230406231320291"></p><h3 id="多次撤销"><a href="#多次撤销" class="headerlink" title="多次撤销"></a>多次撤销</h3><p><img src="/2023/04/15/PPT%E4%B9%8B%E5%85%89%EF%BC%9A%E4%B8%89%E4%B8%AA%E7%BB%B4%E5%BA%A6%E6%89%93%E9%80%A0%E5%AE%8C%E7%BE%8EPPT/image-20230406231528230.png" alt="image-20230406231528230"></p><p><img src="/2023/04/15/PPT%E4%B9%8B%E5%85%89%EF%BC%9A%E4%B8%89%E4%B8%AA%E7%BB%B4%E5%BA%A6%E6%89%93%E9%80%A0%E5%AE%8C%E7%BE%8EPPT/image-20230406231913669.png" alt="image-20230406231913669"></p><h3 id="设置自动保存时间"><a href="#设置自动保存时间" class="headerlink" title="设置自动保存时间"></a>设置自动保存时间</h3><p><img src="/2023/04/15/PPT%E4%B9%8B%E5%85%89%EF%BC%9A%E4%B8%89%E4%B8%AA%E7%BB%B4%E5%BA%A6%E6%89%93%E9%80%A0%E5%AE%8C%E7%BE%8EPPT/image-20230406232017929.png" alt="image-20230406232017929"></p><h3 id="保存预览图"><a href="#保存预览图" class="headerlink" title="保存预览图"></a>保存预览图</h3><p><img src="/2023/04/15/PPT%E4%B9%8B%E5%85%89%EF%BC%9A%E4%B8%89%E4%B8%AA%E7%BB%B4%E5%BA%A6%E6%89%93%E9%80%A0%E5%AE%8C%E7%BE%8EPPT/image-20230406232433595.png" alt="image-20230406232433595"></p><h3 id="设置工具栏"><a href="#设置工具栏" class="headerlink" title="设置工具栏"></a>设置工具栏</h3><p><img src="/2023/04/15/PPT%E4%B9%8B%E5%85%89%EF%BC%9A%E4%B8%89%E4%B8%AA%E7%BB%B4%E5%BA%A6%E6%89%93%E9%80%A0%E5%AE%8C%E7%BE%8EPPT/image-20230406232748805.png" alt="image-20230406232748805"></p><p>也可以导入别人的自定义工作栏</p><h2 id="文字精简"><a href="#文字精简" class="headerlink" title="文字精简"></a>文字精简</h2><h3 id="拆：分析逻辑拆段落"><a href="#拆：分析逻辑拆段落" class="headerlink" title="拆：分析逻辑拆段落"></a>拆：分析逻辑拆段落</h3><ul><li>找到关系副词</li><li>找到时间顺序</li><li>句式优势(排比)</li></ul><h3 id="找：提取概括内容"><a href="#找：提取概括内容" class="headerlink" title="找：提取概括内容"></a>找：提取概括内容</h3><ul><li>关键词句：直接在文中找到<ul><li>关键词：数字、特点、主语</li><li>关键句：中心句、结论，常出现在句首或句尾</li></ul></li><li>概括词句：自己提炼出来<ul><li>概括词</li><li>概括句</li></ul></li></ul><h3 id="删：删除并优化文字"><a href="#删：删除并优化文字" class="headerlink" title="删：删除并优化文字"></a>删：删除并优化文字</h3><ul><li><p>重复性文字</p></li><li><p>原因性文字</p><p>“因为”、“由于”、“基于”等基本能删，只保留结果</p></li><li><p>辅助性文字</p><p>“截至目前”、“已经”、“终于”、“经过”、“但是”、“所以”等辅助性文字，且与核心论点没有关联的</p></li><li><p>解释性文字</p><p>冒号引出的、括号里面的</p></li></ul><h2 id="图片选择"><a href="#图片选择" class="headerlink" title="图片选择"></a>图片选择</h2><h3 id="搜图方法"><a href="#搜图方法" class="headerlink" title="搜图方法"></a>搜图方法</h3><p><strong>3w联想法</strong>（who、where、what）</p><h3 id="三个标准"><a href="#三个标准" class="headerlink" title="三个标准"></a>三个标准</h3><ul><li>符合主题</li><li>符合气质</li><li>高清留白</li></ul><h3 id="下载网站"><a href="#下载网站" class="headerlink" title="下载网站"></a>下载网站</h3><p><a href="https://699pic.com/">https://699pic.com/</a></p><p><a href="https://588ku.com/">https://588ku.com/</a></p><p><a href="https://www.ssyer.com/">https://www.ssyer.com/</a></p><p><a href="https://www.pexels.com/zh-cn/">https://www.pexels.com/zh-cn/</a></p><p><a href="https://unsplash.dogedoge.com/">https://unsplash.dogedoge.com/</a></p><p><a href="https://pixabay.com/zh/">https://pixabay.com/zh/</a></p><h2 id="图标选用"><a href="#图标选用" class="headerlink" title="图标选用"></a>图标选用</h2><h3 id="两个标准"><a href="#两个标准" class="headerlink" title="两个标准"></a>两个标准</h3><ul><li>符合主题</li><li>风格统一</li></ul><h3 id="下载网站-1"><a href="#下载网站-1" class="headerlink" title="下载网站"></a>下载网站</h3><p><a href="https://www.iconfont.cn/">https://www.iconfont.cn/</a></p><p><a href="https://ikonate.com/">https://ikonate.com/</a></p><p><a href="https://iconstore.co/">https://iconstore.co/</a></p><p><a href="https://www.flaticon.com/">https://www.flaticon.com/</a></p><h2 id="图表选用"><a href="#图表选用" class="headerlink" title="图表选用"></a>图表选用</h2><h3 id="三个标准-1"><a href="#三个标准-1" class="headerlink" title="三个标准"></a>三个标准</h3><ul><li><p>选对图标</p><p><img src="/2023/04/15/PPT%E4%B9%8B%E5%85%89%EF%BC%9A%E4%B8%89%E4%B8%AA%E7%BB%B4%E5%BA%A6%E6%89%93%E9%80%A0%E5%AE%8C%E7%BE%8EPPT/1F14F3A708BAF458841AA981CF9F9667.jpg" alt="1F14F3A708BAF458841AA981CF9F9667"></p></li><li><p>主题明确</p></li><li><p>设计简洁</p></li></ul><p>补充：如果是堆积折线图，记得要设计透明度</p><h2 id="排版"><a href="#排版" class="headerlink" title="排版"></a>排版</h2><h3 id="四大原则"><a href="#四大原则" class="headerlink" title="四大原则"></a>四大原则</h3><ul><li><p>分组</p><p>留白、线条、色块、图片、颜色</p></li><li><p>对比</p><p>大小、粗细、颜色、虚实、字体</p></li><li><p>对齐</p><p>左对齐、居中对齐、两端对齐、沿线对齐</p></li><li><p>重复</p><p>图形、元素、颜色、版式、背景</p></li></ul><h2 id="字体"><a href="#字体" class="headerlink" title="字体"></a>字体</h2><h3 id="选择原则"><a href="#选择原则" class="headerlink" title="选择原则"></a>选择原则</h3><ul><li>数量不超过三种</li><li>与主题气质相符</li><li>容易识别、容易阅读(中文推荐微软雅黑)</li></ul><h3 id="网站推荐"><a href="#网站推荐" class="headerlink" title="网站推荐"></a>网站推荐</h3><p><a href="https://www.hellofont.cn/">https://www.hellofont.cn/</a></p><p><a href="https://www.qiuziti.com/">https://www.qiuziti.com/</a></p><h3 id="特殊字体保存"><a href="#特殊字体保存" class="headerlink" title="特殊字体保存"></a>特殊字体保存</h3><h4 id="文字转图片"><a href="#文字转图片" class="headerlink" title="文字转图片"></a>文字转图片</h4><p>剪切粘贴后：</p><p><img src="/2023/04/15/PPT%E4%B9%8B%E5%85%89%EF%BC%9A%E4%B8%89%E4%B8%AA%E7%BB%B4%E5%BA%A6%E6%89%93%E9%80%A0%E5%AE%8C%E7%BE%8EPPT/image-20230406235919048.png" alt="image-20230406235919048"></p><h4 id="文字转矢量"><a href="#文字转矢量" class="headerlink" title="文字转矢量"></a>文字转矢量</h4><p>剪除或相交都行</p><p><img src="/2023/04/15/PPT%E4%B9%8B%E5%85%89%EF%BC%9A%E4%B8%89%E4%B8%AA%E7%BB%B4%E5%BA%A6%E6%89%93%E9%80%A0%E5%AE%8C%E7%BE%8EPPT/image-20230407000344717.png" alt="image-20230407000344717"></p><h2 id="配色"><a href="#配色" class="headerlink" title="配色"></a>配色</h2><h3 id="选择原则-1"><a href="#选择原则-1" class="headerlink" title="选择原则"></a>选择原则</h3><ul><li>颜色要少，一般不超过三种</li><li>要符合主题的气质</li><li>要让文字看得见，看得清</li></ul><h3 id="颜色气质与相关主题"><a href="#颜色气质与相关主题" class="headerlink" title="颜色气质与相关主题"></a>颜色气质与相关主题</h3><h4 id="红色"><a href="#红色" class="headerlink" title="红色"></a>红色</h4><ul><li><p>颜色气质</p><p>象征生命、喜庆、积极、热情</p></li><li><p>适用主题</p><p>多用于购物、食品、党政、文化、时尚</p></li></ul><h4 id="黄色"><a href="#黄色" class="headerlink" title="黄色"></a>黄色</h4><ul><li><p>颜色气质</p><p>活泼有朝气，，多用于吸引注意力</p></li><li><p>适用主题</p><p>儿童品牌、时尚品牌、美食、金融</p></li></ul><h4 id="蓝色"><a href="#蓝色" class="headerlink" title="蓝色"></a>蓝色</h4><ul><li><p>颜色气质</p><p>理智、成熟，传递一种商务感、正义感和可信赖感</p></li><li><p>适用主题</p><p>最百搭的颜色，多于商务、技术创新、科技产品</p></li></ul><h4 id="绿色"><a href="#绿色" class="headerlink" title="绿色"></a>绿色</h4><ul><li><p>颜色气质</p><p>象征大自然原生态、健康生命、青春自然、安全</p></li><li><p>适用主题</p><p>能源、农业、健康、医药、食品、休闲娱乐</p></li></ul><h4 id="紫色"><a href="#紫色" class="headerlink" title="紫色"></a>紫色</h4><ul><li><p>颜色气质</p><p>优雅且温柔，庄重又华丽，还有一些神秘的距离感</p></li><li><p>适用主题</p><p>服装、慈善、餐饮、酒店、旅游、金融</p></li></ul><h4 id="粉色"><a href="#粉色" class="headerlink" title="粉色"></a>粉色</h4><ul><li><p>颜色气质</p><p>柔和可爱，彰显年轻女孩的浪漫色调，散发青春气息</p></li><li><p>适用主题</p><p>婚庆、旅游、母婴、美容、服装、花卉、首饰</p></li></ul><h4 id="灰色"><a href="#灰色" class="headerlink" title="灰色"></a>灰色</h4><ul><li><p>颜色气质</p><p>营造空间感，可以让画面有质感、又氛围但不张扬</p></li><li><p>适用主题</p><p>电子产品、摄影、电器、正装、体育、机械</p></li></ul><h4 id="黑色"><a href="#黑色" class="headerlink" title="黑色"></a>黑色</h4><ul><li><p>颜色气质</p><p>神秘、高级奢华、有力量的庄重感</p></li><li><p>适用主题</p><p>腕表、高端定制、电子科技、运动、手机</p></li></ul><h2 id="修饰"><a href="#修饰" class="headerlink" title="修饰"></a>修饰</h2><h3 id="组成部分"><a href="#组成部分" class="headerlink" title="组成部分"></a>组成部分</h3><ul><li>导航&#x2F;抬头</li><li>标题</li><li>图片</li><li>文本框</li><li>背景</li></ul><h2 id="对PPT优化的一些方法"><a href="#对PPT优化的一些方法" class="headerlink" title="对PPT优化的一些方法"></a>对PPT优化的一些方法</h2><ol><li><p>使用寓意型图片</p></li><li><p>图片三分构图(画面横分三份)</p></li><li><p>放大图片的闪光点</p><ul><li>图片的轮廓</li><li>图片的联想</li><li>给图片标注</li></ul></li><li><p>善用书法字体放大ppt的气质</p></li><li><p>用实物图增加ppt真实感</p></li><li><p>倾斜会让画面更具动感</p><ul><li>旋转页面</li><li>使用倾斜的色块，背景加倾斜的线条</li><li>将文字倾斜</li></ul></li><li><p>一张图片也可以通过不同方法让他看起来不单调</p><ul><li>分栏</li><li>加投影</li><li>使用图片的局部</li></ul></li><li><p>引导观众的视线</p><ul><li>放大细节</li><li>善用箭头</li><li>利用人物朝向</li></ul></li><li><p>选出合适的背景</p><ul><li>用点线面进行修饰</li><li>用合适主题的背景</li><li>复制图片改透明</li></ul></li><li><p>用logo做封面</p><ul><li>配色法(把logo的背景颜色扩大到整个背景页)</li><li>放大法</li><li>遮罩法</li></ul></li><li><p>放大局部</p></li><li><p>突出边界，让素材跳出来</p></li><li><p>线框也有大用处</p><ul><li>图形穿插</li><li>文字穿插</li><li>聚焦视线</li></ul></li><li><p>增加层次感</p><ul><li>文字层次感(后面加一个透明一点的文字)</li><li>大小(半透明法)</li><li>虚实(模糊法)</li></ul></li><li><p>渐变色提升质感</p><p>​图片、图形、文字都能用渐变提升</p></li><li><p>善用线条</p><ul><li>引导视线</li><li>标重</li><li>装饰点缀</li></ul></li><li><p>注重留白</p></li><li><p>注意生活物品、书籍封面等可以得出一些设计启发</p></li><li><p>一张图一句话的排布方式</p><ul><li>全图遮罩</li><li>全图色块</li><li>上下分割</li><li>左右分割</li><li>剧中分割</li><li>弧形分割</li></ul></li><li><p>一句话的排版</p><ul><li>提取关键词作为焦点</li><li>提取关键词作为背景</li><li>使用对话框</li><li>使用引号</li><li>使用图标</li><li>提炼这句话适用的图片</li></ul></li><li><p>图片太小怎么办</p><ul><li>裁剪放大法</li><li>渐变蒙版法</li><li>局部拉伸法</li></ul></li></ol><h2 id="一些特定页的方式"><a href="#一些特定页的方式" class="headerlink" title="一些特定页的方式"></a>一些特定页的方式</h2><h3 id="人物介绍页"><a href="#人物介绍页" class="headerlink" title="人物介绍页"></a>人物介绍页</h3><ol><li>图像要大，突出形象</li><li>背景色和衣服颜色不饿能太接近</li><li>注意文案与人面朝向</li></ol><h3 id="时间轴"><a href="#时间轴" class="headerlink" title="时间轴"></a>时间轴</h3><ol><li>使用对比手法，将“时间”和“内容”分出层级</li><li>文字内容尽可能单行展示</li><li>整体势头需要呈现上升的趋势</li></ol><h3 id="公司介绍页"><a href="#公司介绍页" class="headerlink" title="公司介绍页"></a>公司介绍页</h3><ol><li>对介绍文案进行精简</li><li>配图要用与公司气质符合的素材</li><li>大标题尽量不适用英文</li></ol><h3 id="核心团队页"><a href="#核心团队页" class="headerlink" title="核心团队页"></a>核心团队页</h3><ol><li><p>注意人物图片选择</p></li><li><p>避免随意裁剪任务头像</p></li><li><p>人物介绍文字需要拉开层次</p><p>姓名&gt;职位&gt;详细介绍，用字号、粗细等对比手法拉开层次</p></li></ol><h3 id="合作伙伴页"><a href="#合作伙伴页" class="headerlink" title="合作伙伴页"></a>合作伙伴页</h3><ol><li><p>在logo底部添加色块，让页面更整齐</p><p>统一在logo底部加上色块(矩形、多边形都可以)</p></li><li><p>logo重心对齐</p><p>视觉上大小合适</p></li><li><p>将logo反白&#x2F;改色处理</p><p>但是也需要谨慎，有可能改了就没法识别了</p></li></ol><h3 id="企业荣誉页"><a href="#企业荣誉页" class="headerlink" title="企业荣誉页"></a>企业荣誉页</h3><ol><li>善用数字作为归纳</li><li>适当使用项目符号</li><li>奖状&#x2F;证书图片应适当剪裁</li></ol><h3 id="联系方式页"><a href="#联系方式页" class="headerlink" title="联系方式页"></a>联系方式页</h3><ol><li><p>使用风格一致的图标</p></li><li><p>电话号码隔断，便于阅读</p><p>用空格或者连字符</p></li><li><p>注意检查二维码的识别性</p><p>反白之后可能没法识别</p></li></ol>]]></content>
    
    
    <categories>
      
      <category>办公软件</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>函数和lambda表达式</title>
    <link href="/2023/04/15/Python%E2%80%94%E2%80%94%E5%87%BD%E6%95%B0%E5%92%8Clambda%E8%A1%A8%E8%BE%BE%E5%BC%8F/"/>
    <url>/2023/04/15/Python%E2%80%94%E2%80%94%E5%87%BD%E6%95%B0%E5%92%8Clambda%E8%A1%A8%E8%BE%BE%E5%BC%8F/</url>
    
    <content type="html"><![CDATA[<h1 id="函数和lambda表达式"><a href="#函数和lambda表达式" class="headerlink" title="函数和lambda表达式"></a>函数和lambda表达式</h1><h2 id="定义函数"><a href="#定义函数" class="headerlink" title="定义函数"></a>定义函数</h2><h3 id="格式"><a href="#格式" class="headerlink" title="格式"></a>格式</h3><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-keyword">def</span> <span class="hljs-title function_">函数名</span>(<span class="hljs-params">形参列表</span>):<br>    <span class="hljs-comment">#由零条到多条可执行语句组成的函数</span><br>    [<span class="hljs-keyword">return</span> [返回值]]<br></code></pre></td></tr></table></figure><h3 id="注意点"><a href="#注意点" class="headerlink" title="注意点"></a>注意点</h3><ul><li>形参列表：形参列表由多个形参名组成，多个形参名之间以英文逗号(,)隔开。 一旦在定义函数指定了形参列表，调用该函数 就必须传入到对应的参数值一一谁调用函数，谁负责为形参赋值</li><li>在函数体中多条可执行语句之间有严格的执行顺序，排在函数体前面的语句总是先执行，排在函数体后面的语句总是后执行。</li></ul><h3 id="案例"><a href="#案例" class="headerlink" title="案例"></a>案例</h3><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs reasonml">def my<span class="hljs-constructor">_max(<span class="hljs-params">x</span>,<span class="hljs-params">y</span>)</span>:<br>    return x <span class="hljs-keyword">if</span> x &gt;y <span class="hljs-keyword">else</span> y<br>a = <span class="hljs-number">6</span><br>b = <span class="hljs-number">9</span><br>print(&#x27;result:%d&#x27;%(my<span class="hljs-constructor">_max(<span class="hljs-params">a</span>,<span class="hljs-params">b</span>)</span>))<br></code></pre></td></tr></table></figure><h2 id="为函数提供文档"><a href="#为函数提供文档" class="headerlink" title="为函数提供文档"></a>为函数提供文档</h2><p>我们还可以为函数编写说明文档——只要把一段字符串放在放在函数声明之后、函数体之前，这段字符串将被作为函数的部分，这个文档就是函数的说明文档。</p><p>程序既可通过 help()函数查看函数的说明文档，也可通过函数的__doc__属性访问函数的说明文档。</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-keyword">def</span> <span class="hljs-title function_">my_max</span>(<span class="hljs-params">x,y</span>):<br>    <span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">    这是一个获取两个数值之间较大数的函数</span><br><span class="hljs-string">    </span><br><span class="hljs-string">    my_max(x,y)</span><br><span class="hljs-string">        返回一个变量z，该变量等于x、y中较大的值</span><br><span class="hljs-string">    &#x27;&#x27;&#x27;</span><br>    <span class="hljs-comment">#直接返回一个表达式</span><br>    <span class="hljs-keyword">return</span> x <span class="hljs-keyword">if</span> x &gt; y <span class="hljs-keyword">else</span> y<br><span class="hljs-built_in">help</span>(my_max)<br><span class="hljs-built_in">print</span>(my_max.__doc__)<br><span class="hljs-string">&#x27;&#x27;&#x27;输出结果&#x27;&#x27;&#x27;</span><br>Help on function my_max <span class="hljs-keyword">in</span> module __main__:<br><br>my_max(x, y)<br>    这是一个获取两个数值之间较大数的函数<br>    <br>    my_max(x,y)<br>        返回一个变量z，该变量等于x、y中较大的值<br><br><span class="hljs-comment">#这个是print(my_max.__doc__)</span><br>    这是一个获取两个数值之间较大数的函数<br>    <br>    my_max(x,y)<br>        返回一个变量z，该变量等于x、y中较大的值<br>    <br></code></pre></td></tr></table></figure><h2 id="函数的参数"><a href="#函数的参数" class="headerlink" title="函数的参数"></a>函数的参数</h2><h3 id="关键字参数"><a href="#关键字参数" class="headerlink" title="关键字参数"></a>关键字参数</h3><p>传参的时候要注意，都用位置参数的时候传入参数位置和关键字逐一对应，要是都用关键字参数就只用关键字等于参数对应就行，要是混合的话，位置参数要在关键字参数之前。</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-keyword">def</span> <span class="hljs-title function_">girth</span>(<span class="hljs-params">width,height</span>):<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;width:&quot;</span>,width)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;height:&quot;</span>,height)<br>    <span class="hljs-keyword">return</span> width+height<br><span class="hljs-built_in">print</span>(girth(<span class="hljs-number">3.5</span>,<span class="hljs-number">4.8</span>))<br><span class="hljs-built_in">print</span>(girth(height=<span class="hljs-number">4.8</span>,width=<span class="hljs-number">3.5</span>))<br><span class="hljs-built_in">print</span>(girth(<span class="hljs-number">3.5</span>,height=<span class="hljs-number">4.8</span>))<br><span class="hljs-string">&#x27;&#x27;&#x27;输出结果&#x27;&#x27;&#x27;</span><br>width: <span class="hljs-number">3.5</span><br>height: <span class="hljs-number">4.8</span><br><span class="hljs-number">8.3</span><br>width: <span class="hljs-number">3.5</span><br>height: <span class="hljs-number">4.8</span><br><span class="hljs-number">8.3</span><br>width: <span class="hljs-number">3.5</span><br>height: <span class="hljs-number">4.8</span><br><span class="hljs-number">8.3</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">如果是print(grith(width=3.5,4.8))就会报错哦</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br></code></pre></td></tr></table></figure><h3 id="参数默认值"><a href="#参数默认值" class="headerlink" title="参数默认值"></a>参数默认值</h3><p>在函数中传参的括号里先赋值，这样对应的参数在调用中没有赋值的话就会调用默认值。</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-keyword">def</span> <span class="hljs-title function_">triangle</span>(<span class="hljs-params">a=<span class="hljs-number">3</span>,b=<span class="hljs-number">4</span>,c=<span class="hljs-number">5</span></span>):<br>    <span class="hljs-built_in">print</span>(a,b,c)<br>    <span class="hljs-keyword">return</span> a+b+c<br><span class="hljs-built_in">print</span>(triangle())<br><span class="hljs-built_in">print</span>(triangle(<span class="hljs-number">2</span>,<span class="hljs-number">6</span>))<br><span class="hljs-built_in">print</span>(triangle(<span class="hljs-number">2</span>,<span class="hljs-number">4</span>,<span class="hljs-number">6</span>))<br><span class="hljs-string">&#x27;&#x27;&#x27;输出结果&#x27;&#x27;&#x27;</span><br><span class="hljs-number">3</span> <span class="hljs-number">4</span> <span class="hljs-number">5</span><br><span class="hljs-number">12</span><br><span class="hljs-number">2</span> <span class="hljs-number">6</span> <span class="hljs-number">5</span><br><span class="hljs-number">13</span><br><span class="hljs-number">2</span> <span class="hljs-number">4</span> <span class="hljs-number">6</span><br><span class="hljs-number">12</span><br></code></pre></td></tr></table></figure><h3 id="参数收集-个数可变的参数"><a href="#参数收集-个数可变的参数" class="headerlink" title="参数收集(个数可变的参数)"></a>参数收集(个数可变的参数)</h3><p>Python 允许在形参前面添加一个星号(*)，这样就意味着该参数可接收多个参数值，多个参数值被当成元组传入。</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-string">&#x27;&#x27;&#x27;代码一&#x27;&#x27;&#x27;</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">message</span>(<span class="hljs-params">num,*animal</span>):<br>    <span class="hljs-built_in">print</span>(animal)<br>    <span class="hljs-built_in">print</span>(num)<br>message(<span class="hljs-number">3</span>,<span class="hljs-string">&#x27;cat&#x27;</span>,<span class="hljs-string">&#x27;dog&#x27;</span>,<span class="hljs-string">&#x27;fox&#x27;</span>)<br><span class="hljs-string">&#x27;&#x27;&#x27;代码二&#x27;&#x27;&#x27;</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">message</span>(<span class="hljs-params">*animal,num</span>):<br>    <span class="hljs-built_in">print</span>(animal)<br>    <span class="hljs-built_in">print</span>(num)<br>message(<span class="hljs-string">&#x27;cat&#x27;</span>,<span class="hljs-string">&#x27;dog&#x27;</span>,<span class="hljs-string">&#x27;fox&#x27;</span>,num=<span class="hljs-number">3</span>)<br><span class="hljs-string">&#x27;&#x27;&#x27;输出结果&#x27;&#x27;&#x27;</span><br>(<span class="hljs-string">&#x27;cat&#x27;</span>, <span class="hljs-string">&#x27;dog&#x27;</span>, <span class="hljs-string">&#x27;fox&#x27;</span>)<br><span class="hljs-number">3</span><br><br></code></pre></td></tr></table></figure><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-keyword">def</span> <span class="hljs-title function_">message</span>(<span class="hljs-params">**animal</span>):<br>    <span class="hljs-built_in">print</span>(animal)<br>message(cat=<span class="hljs-number">10</span>,dog=<span class="hljs-number">20</span>,fox=<span class="hljs-number">30</span>)<br><span class="hljs-string">&#x27;&#x27;&#x27;输出结果&#x27;&#x27;&#x27;</span><br>&#123;<span class="hljs-string">&#x27;cat&#x27;</span>: <span class="hljs-number">10</span>, <span class="hljs-string">&#x27;dog&#x27;</span>: <span class="hljs-number">20</span>, <span class="hljs-string">&#x27;fox&#x27;</span>: <span class="hljs-number">30</span>&#125;<br></code></pre></td></tr></table></figure><h2 id="关于变量作用域的函数"><a href="#关于变量作用域的函数" class="headerlink" title="关于变量作用域的函数"></a>关于变量作用域的函数</h2><p>作用域又可以被称为命名空间，指变量起作用的范围。Python变量作用域可以分为四种，分别为局部作用域、嵌套作用域、全局作用域、内置作用域。四种作用域中变量的调用顺序采取“就近原则”，即为 LEGB。</p><table><thead><tr><th>作用域</th><th>英文</th><th>简写</th></tr></thead><tbody><tr><td>局部作用域</td><td>Local</td><td>L</td></tr><tr><td>嵌套作用域</td><td>Enclosed</td><td>E</td></tr><tr><td>全局作用域</td><td>Global</td><td>G</td></tr><tr><td>内置作用域</td><td>Built-in</td><td>B</td></tr></tbody></table><p><img src="/2023/04/15/Python%E2%80%94%E2%80%94%E5%87%BD%E6%95%B0%E5%92%8Clambda%E8%A1%A8%E8%BE%BE%E5%BC%8F/image-20230406215922434.png" alt="image-20230406215922434"></p><p>Python语法规定在函数内部对不存在的变量赋值时， 默认就是重新定义新的局部变量。</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs py">name = <span class="hljs-string">&#x27;Tom&#x27;</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">test</span>():<br>    <span class="hljs-keyword">global</span> name<span class="hljs-comment">#name现在就变成了全局变量，这样就不会再被定义成局部变量了</span><br>    <span class="hljs-built_in">print</span>(name)<br>    name = <span class="hljs-string">&#x27;Jerry&#x27;</span> <span class="hljs-comment">#全局变量改变，函数外面也会改变</span><br>test()<br><span class="hljs-built_in">print</span>(name)<br><span class="hljs-string">&#x27;&#x27;&#x27;输出结果&#x27;&#x27;&#x27;</span><br>Tom<br>Jerry<br></code></pre></td></tr></table></figure><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs py">name = <span class="hljs-string">&#x27;Tom&#x27;</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">test</span>():<br>    name = <span class="hljs-string">&#x27;Jerry&#x27;</span><br>    <span class="hljs-built_in">print</span>(name)<span class="hljs-comment">#这里仅仅只是函数内name改变了，函数外没变</span><br>test()<br><span class="hljs-built_in">print</span>(name)<br><span class="hljs-string">&#x27;&#x27;&#x27;输出结果&#x27;&#x27;&#x27;</span><br>Jerry<br>Tom<br></code></pre></td></tr></table></figure><h2 id="局部函数"><a href="#局部函数" class="headerlink" title="局部函数"></a>局部函数</h2><p>？没看懂QAQ</p><h2 id="使用函数变量"><a href="#使用函数变量" class="headerlink" title="使用函数变量"></a>使用函数变量</h2><p>Python函数也是一种值：所有函数都是function对象，这意味着可以把函数本身赋值给变量，就像把整数、浮点数、列表、元组赋值给变量一样。</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-comment">#定义一个计算乘方的函数</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">pow</span>(<span class="hljs-params">base,exponent</span>):<br>    result = <span class="hljs-number">1</span><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>, exponent +<span class="hljs-number">1</span>):<br>        result *= base<br>    <span class="hljs-keyword">return</span> result<br>my_fun = <span class="hljs-built_in">pow</span>    <span class="hljs-comment">#把pow函数值赋给my_fun，这个时候my_fun可以当作pow使用</span><br><span class="hljs-built_in">print</span>(my_fun(<span class="hljs-number">3</span>,<span class="hljs-number">4</span>)) <span class="hljs-comment">#结果为81</span><br></code></pre></td></tr></table></figure><h2 id="使用函数作为参数形参"><a href="#使用函数作为参数形参" class="headerlink" title="使用函数作为参数形参"></a>使用函数作为参数形参</h2><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-comment">#定义函数类型的形参，其中fn是一个函数</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">map</span>(<span class="hljs-params">data,fn</span>):<br>    result = []<br>    <span class="hljs-keyword">for</span> e <span class="hljs-keyword">in</span> data:<br>        result.append(fn(e))<br>    <span class="hljs-keyword">return</span> result<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">square</span>(<span class="hljs-params">n</span>):<br>    <span class="hljs-keyword">return</span> n *n <br><span class="hljs-keyword">def</span> <span class="hljs-title function_">cube</span>(<span class="hljs-params">n</span>):<br>    <span class="hljs-keyword">return</span> n * n * n<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">factorial</span>(<span class="hljs-params">n</span>):<br>    result = <span class="hljs-number">1</span><br>    <span class="hljs-keyword">for</span> index <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">2</span>,n+<span class="hljs-number">1</span>):<br>        result *= index<br>    <span class="hljs-keyword">return</span> result<br>data = [<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">9</span>,<span class="hljs-number">5</span>,<span class="hljs-number">8</span>]<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;original data:&quot;</span>,data)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;square:&quot;</span>,<span class="hljs-built_in">map</span>(data,square))<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;cube:&quot;</span>,<span class="hljs-built_in">map</span>(data,cube))<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;factorial:&quot;</span>,<span class="hljs-built_in">map</span>(data,factorial))<br><span class="hljs-string">&#x27;&#x27;&#x27;输出结果&#x27;&#x27;&#x27;</span><br>original data: [<span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">9</span>, <span class="hljs-number">5</span>, <span class="hljs-number">8</span>]<br>square: [<span class="hljs-number">9</span>, <span class="hljs-number">16</span>, <span class="hljs-number">81</span>, <span class="hljs-number">25</span>, <span class="hljs-number">64</span>]<br>cube: [<span class="hljs-number">27</span>, <span class="hljs-number">64</span>, <span class="hljs-number">729</span>, <span class="hljs-number">125</span>, <span class="hljs-number">512</span>]<br>factorial: [<span class="hljs-number">6</span>, <span class="hljs-number">24</span>, <span class="hljs-number">362880</span>, <span class="hljs-number">120</span>, <span class="hljs-number">40320</span>]<br></code></pre></td></tr></table></figure><h2 id="使用函数作为返回值"><a href="#使用函数作为返回值" class="headerlink" title="使用函数作为返回值"></a>使用函数作为返回值</h2><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-keyword">def</span> <span class="hljs-title function_">get_math_func</span>(<span class="hljs-params"><span class="hljs-built_in">type</span></span>):<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">square</span>(<span class="hljs-params">n</span>):<br>        <span class="hljs-keyword">return</span> n*n<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">cube</span>(<span class="hljs-params">n</span>):<br>        <span class="hljs-keyword">return</span> n*n*n<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">factorial</span>(<span class="hljs-params">n</span>):<br>        result =<span class="hljs-number">1</span><br>        <span class="hljs-keyword">for</span> index <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">2</span>,n+<span class="hljs-number">1</span>):<br>            result *= index<br>        <span class="hljs-keyword">return</span> result<br>    <span class="hljs-keyword">if</span> <span class="hljs-built_in">type</span> == <span class="hljs-string">&quot;square&quot;</span>:<br>        <span class="hljs-keyword">return</span> square<br>    <span class="hljs-keyword">if</span> <span class="hljs-built_in">type</span> == <span class="hljs-string">&quot;cube&quot;</span>:<br>        <span class="hljs-keyword">return</span> cube<br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-keyword">return</span> factorial<br>func1 = get_math_func(<span class="hljs-string">&quot;cube&quot;</span>)<br>func2 = get_math_func(<span class="hljs-string">&quot;square&quot;</span>)<br>func3 = get_math_func(<span class="hljs-string">&quot;factorial&quot;</span>)<br><span class="hljs-built_in">print</span>(func1(<span class="hljs-number">5</span>),func2(<span class="hljs-number">5</span>),func3(<span class="hljs-number">5</span>))<br><span class="hljs-string">&#x27;&#x27;&#x27;输出结果&#x27;&#x27;&#x27;</span><br><span class="hljs-number">125</span> <span class="hljs-number">25</span> <span class="hljs-number">120</span><br></code></pre></td></tr></table></figure><h2 id="lambda表达式"><a href="#lambda表达式" class="headerlink" title="lambda表达式"></a>lambda表达式</h2><p>单行的代码是可以通过lambda表达式简化的</p><h3 id="格式-1"><a href="#格式-1" class="headerlink" title="格式"></a>格式</h3><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-keyword">lambda</span> [parameter_list] : 表达式<br></code></pre></td></tr></table></figure><h3 id="注意点-1"><a href="#注意点-1" class="headerlink" title="注意点"></a>注意点</h3><ul><li>lambda表达式必须使用lambda关键字定义</li><li>在lambda关键字之后、冒号左边的是参数列表，参数可以有多个(用逗号隔开)，也可以没有，冒号右边是表达式的返回值。</li></ul><h3 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h3><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-keyword">def</span> <span class="hljs-title function_">get_math_func</span>(<span class="hljs-params"><span class="hljs-built_in">type</span></span>):<br>    result = <span class="hljs-number">1</span><br>    <span class="hljs-keyword">if</span> <span class="hljs-built_in">type</span> == <span class="hljs-string">&quot;square&quot;</span>:<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">lambda</span> n: n*n<br>    <span class="hljs-keyword">if</span> <span class="hljs-built_in">type</span> == <span class="hljs-string">&quot;cube&quot;</span>:<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">lambda</span> n : n*n*n<br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">lambda</span> n: (<span class="hljs-number">1</span>+n)*n/<span class="hljs-number">2</span><br>func1 = get_math_func(<span class="hljs-string">&quot;cube&quot;</span>)<br>func2 = get_math_func(<span class="hljs-string">&quot;square&quot;</span>)<br>func3 = get_math_func(<span class="hljs-string">&quot;factorial&quot;</span>)<br><span class="hljs-built_in">print</span>(func1(<span class="hljs-number">5</span>),func2(<span class="hljs-number">5</span>),func3(<span class="hljs-number">5</span>))<br><span class="hljs-string">&#x27;&#x27;&#x27;输出结果&#x27;&#x27;&#x27;</span><br><span class="hljs-number">125</span> <span class="hljs-number">25</span> <span class="hljs-number">15.0</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>python</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>列表、元组和字典</title>
    <link href="/2023/04/15/Python%E2%80%94%E2%80%94%E5%88%97%E8%A1%A8%E3%80%81%E5%85%83%E7%BB%84%E5%92%8C%E5%AD%97%E5%85%B8/"/>
    <url>/2023/04/15/Python%E2%80%94%E2%80%94%E5%88%97%E8%A1%A8%E3%80%81%E5%85%83%E7%BB%84%E5%92%8C%E5%AD%97%E5%85%B8/</url>
    
    <content type="html"><![CDATA[<h1 id="列表、元组和字典"><a href="#列表、元组和字典" class="headerlink" title="列表、元组和字典"></a>列表、元组和字典</h1><h2 id="序列简介"><a href="#序列简介" class="headerlink" title="序列简介"></a>序列简介</h2><p>Python的常见序列类型包括字符串、列表和元组，这里主要研究的就是列表和元组。</p><h2 id="列表和元组的创建"><a href="#列表和元组的创建" class="headerlink" title="列表和元组的创建"></a>列表和元组的创建</h2><p>创建列表的语法：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs py">[ele1,ele2,ele3,...]<br></code></pre></td></tr></table></figure><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-built_in">list</span> = [<span class="hljs-string">&#x27;cat&#x27;</span>,<span class="hljs-number">20</span>,<span class="hljs-string">&#x27;dog&#x27;</span>,<span class="hljs-number">10</span>]<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">list</span>)<br><span class="hljs-string">&#x27;&#x27;&#x27;输出结果&#x27;&#x27;&#x27;</span><br>[<span class="hljs-string">&#x27;cat&#x27;</span>, <span class="hljs-number">20</span>, <span class="hljs-string">&#x27;dog&#x27;</span>, <span class="hljs-number">10</span>]<br></code></pre></td></tr></table></figure><p>创建元组的语法：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs py">(ele1,ele2,ele3,...)<br></code></pre></td></tr></table></figure><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-built_in">tuple</span> = (<span class="hljs-string">&#x27;cat&#x27;</span>,<span class="hljs-number">20</span>,<span class="hljs-string">&#x27;dog&#x27;</span>,<span class="hljs-number">10</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">tuple</span>)<br><span class="hljs-string">&#x27;&#x27;&#x27;输出结果&#x27;&#x27;&#x27;</span><br>(<span class="hljs-string">&#x27;cat&#x27;</span>, <span class="hljs-number">20</span>, <span class="hljs-string">&#x27;dog&#x27;</span>, <span class="hljs-number">10</span>)<br></code></pre></td></tr></table></figure><p>区别就是元组用圆括号、列表是方括号。</p><p>列表与元组最大的区别在于：<strong>元组是不可改变的，列表是可改变的</strong>。元组支持的操作，列表基本上都支持；列表支持对元素的修改，而元主且则不支持。从这个角度来看，可以认为<strong>列表是增强版的元组</strong>。</p><h2 id="通用用法"><a href="#通用用法" class="headerlink" title="通用用法"></a>通用用法</h2><h3 id="通过索引使用元素"><a href="#通过索引使用元素" class="headerlink" title="通过索引使用元素"></a>通过索引使用元素</h3><p>索引从0开始，第一个元素为0以此类推(类比数组)</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-built_in">tuple</span> = (<span class="hljs-string">&#x27;cat&#x27;</span>,<span class="hljs-number">20</span>,<span class="hljs-string">&#x27;dog&#x27;</span>,<span class="hljs-number">10</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">tuple</span>[<span class="hljs-number">1</span>])<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">tuple</span>[-<span class="hljs-number">2</span>])<br><span class="hljs-string">&#x27;&#x27;&#x27;输出结果&#x27;&#x27;&#x27;</span><br><span class="hljs-number">20</span><br>dog<br></code></pre></td></tr></table></figure><h3 id="子序列-x2F-slice语法"><a href="#子序列-x2F-slice语法" class="headerlink" title="子序列&#x2F;slice语法"></a>子序列&#x2F;slice语法</h3><p>跟字符串操作类似的是，列表和元组也可以使用索引获取中间的一段，这种用法叫做slice，格式如下：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs py">[start：end：step]<br></code></pre></td></tr></table></figure><ul><li>start、end两个索引值都可以使用整数或者复数，其中复数表示从倒数开始</li><li>从start(包含)开始到end结束(不包含)的所有元素</li><li>step表示步长所以使用负数无意义</li></ul><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs py">a_tuple = (<span class="hljs-string">&#x27;crazyit&#x27;</span>, <span class="hljs-number">20</span> , <span class="hljs-number">5.6</span>,<span class="hljs-string">&#x27;fkit&#x27;</span>,-<span class="hljs-number">17</span>)<br><span class="hljs-built_in">print</span>(a_tuple[<span class="hljs-number">1</span>:<span class="hljs-number">3</span>])<br><span class="hljs-built_in">print</span>(a_tuple[-<span class="hljs-number">3</span>:-<span class="hljs-number">1</span>])<br><span class="hljs-built_in">print</span>(a_tuple[<span class="hljs-number">1</span>:-<span class="hljs-number">2</span>])<br><span class="hljs-built_in">print</span>(a_tuple[-<span class="hljs-number">3</span>:<span class="hljs-number">4</span>])<br><span class="hljs-string">&#x27;&#x27;&#x27;输出结果&#x27;&#x27;&#x27;</span><br>(<span class="hljs-number">20</span>, <span class="hljs-number">5.6</span>)<br>(<span class="hljs-number">5.6</span>, <span class="hljs-string">&#x27;fkit&#x27;</span>)<br>(<span class="hljs-number">20</span>, <span class="hljs-number">5.6</span>)<br>(<span class="hljs-number">5.6</span>, <span class="hljs-string">&#x27;fkit&#x27;</span>)<br></code></pre></td></tr></table></figure><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs py">b_tuple = (<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>,<span class="hljs-number">6</span>,<span class="hljs-number">7</span>,<span class="hljs-number">8</span>,<span class="hljs-number">9</span>)<br><span class="hljs-built_in">print</span>(b_tuple[<span class="hljs-number">2</span>:<span class="hljs-number">8</span>:<span class="hljs-number">2</span>])<br><span class="hljs-built_in">print</span>(b_tuple[<span class="hljs-number">2</span>:-<span class="hljs-number">2</span>:<span class="hljs-number">3</span>])<br><span class="hljs-string">&#x27;&#x27;&#x27;输出结果&#x27;&#x27;&#x27;</span><br>(<span class="hljs-number">3</span>, <span class="hljs-number">5</span>, <span class="hljs-number">7</span>)<br>(<span class="hljs-number">3</span>, <span class="hljs-number">6</span>)<br></code></pre></td></tr></table></figure><h3 id="加法"><a href="#加法" class="headerlink" title="加法"></a>加法</h3><p>列表和元组支持加法运算，加法的和就是两个列表或元组所包含的<strong>元素的总和</strong>。</p><p>列表+列表；元组+元组；<del>元组+列表</del></p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs py">a_tuple = (<span class="hljs-string">&#x27;cat&#x27;</span>,<span class="hljs-number">20</span>,-<span class="hljs-number">1.2</span>) <br>b_tuple = (<span class="hljs-number">127</span>,<span class="hljs-string">&#x27;dog&#x27;</span>,<span class="hljs-string">&#x27;rabbit&#x27;</span>,<span class="hljs-number">3.33</span>)<br><span class="hljs-built_in">print</span>(a_tuple + b_tuple)<br><span class="hljs-string">&#x27;&#x27;&#x27;输出结果&#x27;&#x27;&#x27;</span><br>(<span class="hljs-string">&#x27;cat&#x27;</span>, <span class="hljs-number">20</span>, -<span class="hljs-number">1.2</span>, <span class="hljs-number">127</span>, <span class="hljs-string">&#x27;dog&#x27;</span>, <span class="hljs-string">&#x27;rabbit&#x27;</span>, <span class="hljs-number">3.33</span>)<br></code></pre></td></tr></table></figure><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs py">a_list = [<span class="hljs-number">20</span>,<span class="hljs-number">30</span>,<span class="hljs-number">50</span>,<span class="hljs-number">100</span>]<br>b_list = [<span class="hljs-string">&#x27;a&#x27;</span>,<span class="hljs-string">&#x27;b&#x27;</span>,<span class="hljs-string">&#x27;c&#x27;</span>]<br><span class="hljs-built_in">print</span>(a_list + b_list)<br><span class="hljs-string">&#x27;&#x27;&#x27;输出结果&#x27;&#x27;&#x27;</span><br>[<span class="hljs-number">20</span>, <span class="hljs-number">30</span>, <span class="hljs-number">50</span>, <span class="hljs-number">100</span>, <span class="hljs-string">&#x27;a&#x27;</span>, <span class="hljs-string">&#x27;b&#x27;</span>, <span class="hljs-string">&#x27;c&#x27;</span>]<br></code></pre></td></tr></table></figure><h3 id="乘法"><a href="#乘法" class="headerlink" title="乘法"></a>乘法</h3><p>列表和元组可以和整数执行乘法运算，意义是把他们包含的元素重复N次</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs py">a_tuple = (<span class="hljs-string">&#x27;cat&#x27;</span>,<span class="hljs-number">20</span>)<br><span class="hljs-built_in">print</span>(a_tuple*<span class="hljs-number">4</span>)<br><span class="hljs-string">&#x27;&#x27;&#x27;输出结果&#x27;&#x27;&#x27;</span><br>(<span class="hljs-string">&#x27;cat&#x27;</span>, <span class="hljs-number">20</span>, <span class="hljs-string">&#x27;cat&#x27;</span>, <span class="hljs-number">20</span>, <span class="hljs-string">&#x27;cat&#x27;</span>, <span class="hljs-number">20</span>, <span class="hljs-string">&#x27;cat&#x27;</span>, <span class="hljs-number">20</span>)<br></code></pre></td></tr></table></figure><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs py">a_list = [<span class="hljs-number">30</span>,<span class="hljs-string">&#x27;dog&#x27;</span>,<span class="hljs-number">4</span>]<br><span class="hljs-built_in">print</span>(a_list*<span class="hljs-number">3</span>)<br><span class="hljs-string">&#x27;&#x27;&#x27;输出结果&#x27;&#x27;&#x27;</span><br>[<span class="hljs-number">30</span>, <span class="hljs-string">&#x27;dog&#x27;</span>, <span class="hljs-number">4</span>, <span class="hljs-number">30</span>, <span class="hljs-string">&#x27;dog&#x27;</span>, <span class="hljs-number">4</span>, <span class="hljs-number">30</span>, <span class="hljs-string">&#x27;dog&#x27;</span>, <span class="hljs-number">4</span>]<br></code></pre></td></tr></table></figure><h3 id="in运算符"><a href="#in运算符" class="headerlink" title="in运算符"></a>in运算符</h3><p>可以判断列表或元组是否包含某个元素</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs py">a_tuple = (<span class="hljs-string">&#x27;cat&#x27;</span>,<span class="hljs-number">20</span>,-<span class="hljs-number">1.5</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-number">20</span> <span class="hljs-keyword">in</span> a_tuple)<br><span class="hljs-built_in">print</span>(<span class="hljs-number">10</span> <span class="hljs-keyword">in</span> a_tuple)<br><span class="hljs-string">&#x27;&#x27;&#x27;输出结果&#x27;&#x27;&#x27;</span><br><span class="hljs-literal">True</span><br><span class="hljs-literal">False</span><br></code></pre></td></tr></table></figure><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs py">b_list = [<span class="hljs-string">&#x27;dog&#x27;</span>,<span class="hljs-number">50</span>,-<span class="hljs-number">4.5</span>]<br><span class="hljs-built_in">print</span>(<span class="hljs-number">50</span> <span class="hljs-keyword">in</span> b_list)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;cat&#x27;</span> <span class="hljs-keyword">in</span> b_list)<br><span class="hljs-string">&#x27;&#x27;&#x27;输出结果&#x27;&#x27;&#x27;</span><br><span class="hljs-literal">True</span><br><span class="hljs-literal">False</span><br></code></pre></td></tr></table></figure><h3 id="长度、最大值和最小值"><a href="#长度、最大值和最小值" class="headerlink" title="长度、最大值和最小值"></a>长度、最大值和最小值</h3><p>Python 的字符串也是可比较大小的——Python 依次按字符串字符对应的编码来较字符串的大小。</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs py">a_tuple = (<span class="hljs-number">20</span>,<span class="hljs-number">10</span>,-<span class="hljs-number">2</span>,<span class="hljs-number">15.2</span>,<span class="hljs-number">102</span>,<span class="hljs-number">50</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">max</span>(a_tuple))<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">min</span>(a_tuple))<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">len</span>(a_tuple))<br><span class="hljs-string">&#x27;&#x27;&#x27;输出结果&#x27;&#x27;&#x27;</span><br><span class="hljs-number">102</span><br>-<span class="hljs-number">2</span><br><span class="hljs-number">6</span><br></code></pre></td></tr></table></figure><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs py">a_list = [<span class="hljs-string">&#x27;cat&#x27;</span>,<span class="hljs-string">&#x27;dog&#x27;</span>,<span class="hljs-string">&#x27;rabbit&#x27;</span>,<span class="hljs-string">&#x27;fox&#x27;</span>]<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">max</span>(a_list))<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">min</span>(a_list))<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">len</span>(a_list))<br><span class="hljs-string">&#x27;&#x27;&#x27;输出结果&#x27;&#x27;&#x27;</span><br>rabbit<br>cat<br><span class="hljs-number">4</span><br></code></pre></td></tr></table></figure><h3 id="序列封包和序列解包"><a href="#序列封包和序列解包" class="headerlink" title="序列封包和序列解包"></a>序列封包和序列解包</h3><ul><li><p>封包：多个值给一个变量，这个时候自动将多个值封装为<strong>元组</strong></p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs py">vals = <span class="hljs-number">10</span>,<span class="hljs-number">20</span>,<span class="hljs-number">30</span><br><span class="hljs-built_in">print</span>(vals)<br><span class="hljs-string">&#x27;&#x27;&#x27;输出结果&#x27;&#x27;&#x27;</span><br>(<span class="hljs-number">10</span>, <span class="hljs-number">20</span>, <span class="hljs-number">30</span>)<br></code></pre></td></tr></table></figure></li><li><p>解包：序列（元组&#x2F;列表）直接分给多个变量，则元素依次赋给各个变量。</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs py">a_tuple = <span class="hljs-built_in">tuple</span>(<span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>,<span class="hljs-number">10</span>,<span class="hljs-number">2</span>))<br>a,b,c,d,e = a_tuple<br><span class="hljs-built_in">print</span>(a_tuple)<br><span class="hljs-built_in">print</span>(a,b,c,d,e)<br><span class="hljs-string">&#x27;&#x27;&#x27;输出结果&#x27;&#x27;&#x27;</span><br>(<span class="hljs-number">1</span>, <span class="hljs-number">3</span>, <span class="hljs-number">5</span>, <span class="hljs-number">7</span>, <span class="hljs-number">9</span>)<br><span class="hljs-number">1</span> <span class="hljs-number">3</span> <span class="hljs-number">5</span> <span class="hljs-number">7</span> <span class="hljs-number">9</span><br></code></pre></td></tr></table></figure><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs py">a_list = <span class="hljs-built_in">list</span>(<span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>,<span class="hljs-number">10</span>,<span class="hljs-number">3</span>))<br>a,b,c=a_list<br><span class="hljs-built_in">print</span>(a_list)<br><span class="hljs-built_in">print</span>(a,b,c)<br><span class="hljs-string">&#x27;&#x27;&#x27;输出结果&#x27;&#x27;&#x27;</span><br>[<span class="hljs-number">1</span>, <span class="hljs-number">4</span>, <span class="hljs-number">7</span>]<br><span class="hljs-number">1</span> <span class="hljs-number">4</span> <span class="hljs-number">7</span><br></code></pre></td></tr></table></figure></li><li><p>如果解包的变量也可以通过加一个*代表一个列表</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs py">first,second,*rest = <span class="hljs-built_in">range</span>(<span class="hljs-number">10</span>)<br><span class="hljs-built_in">print</span>(first)<br><span class="hljs-built_in">print</span>(second)<br><span class="hljs-built_in">print</span>(rest)<br><span class="hljs-string">&#x27;&#x27;&#x27;输出结果&#x27;&#x27;&#x27;</span><br><span class="hljs-number">0</span><br><span class="hljs-number">1</span><br>[<span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>, <span class="hljs-number">7</span>, <span class="hljs-number">8</span>, <span class="hljs-number">9</span>]<br></code></pre></td></tr></table></figure></li></ul><h2 id="修改列表"><a href="#修改列表" class="headerlink" title="修改列表"></a>修改列表</h2><h3 id="增加列表元素"><a href="#增加列表元素" class="headerlink" title="增加列表元素"></a>增加列表元素</h3><h4 id="append"><a href="#append" class="headerlink" title="append()"></a>append()</h4><p>为列表增加元素可调用列表的 append()方法，该方法会把传入的参数追加到列表的最后面。append()方法既可接收单个值，也可接收元组、列表等 ，但该方法只是把元组、列表当成单个元素这样就会形成在列表中嵌套列表、嵌套元组的情形。</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs py">a_list = [<span class="hljs-string">&#x27;cat&#x27;</span>,<span class="hljs-string">&#x27;dog&#x27;</span>,<span class="hljs-number">22</span>]<br>a_list.append(-<span class="hljs-number">3</span>)<span class="hljs-comment">#追加元素</span><br><span class="hljs-string">&#x27;&#x27;&#x27;输出结果&#x27;&#x27;&#x27;</span><br><span class="hljs-built_in">print</span>(a_list)<br>[<span class="hljs-string">&#x27;cat&#x27;</span>, <span class="hljs-string">&#x27;dog&#x27;</span>, <span class="hljs-number">22</span>, -<span class="hljs-number">3</span>]<br>a_tuple = (<span class="hljs-number">3</span>,<span class="hljs-number">5</span>,-<span class="hljs-number">1</span>)<br>a_list.append(a_tuple)<span class="hljs-comment">#追加元组(追加列表也同理)</span><br><span class="hljs-string">&#x27;&#x27;&#x27;输出结果&#x27;&#x27;&#x27;</span><br><span class="hljs-built_in">print</span>(a_list)<br>[<span class="hljs-string">&#x27;cat&#x27;</span>, <span class="hljs-string">&#x27;dog&#x27;</span>, <span class="hljs-number">22</span>, -<span class="hljs-number">3</span>, (<span class="hljs-number">3</span>, <span class="hljs-number">5</span>, -<span class="hljs-number">1</span>)]<br></code></pre></td></tr></table></figure><h4 id="extend"><a href="#extend" class="headerlink" title="extend()"></a>extend()</h4><p>如果不想要让追加的列表或元组整体堪称一个元素，而是将他们中的内容作为元素，就需要用extend()了。</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs py">a_list = [<span class="hljs-string">&#x27;cat&#x27;</span>,<span class="hljs-string">&#x27;dog&#x27;</span>,<span class="hljs-number">22</span>]<br>a_list.extend((<span class="hljs-number">3</span>,<span class="hljs-number">5</span>,-<span class="hljs-number">1</span>))<br><span class="hljs-built_in">print</span>(a_list)<br><span class="hljs-string">&#x27;&#x27;&#x27;输出结果&#x27;&#x27;&#x27;</span><br>[<span class="hljs-string">&#x27;cat&#x27;</span>, <span class="hljs-string">&#x27;dog&#x27;</span>, <span class="hljs-number">22</span>, <span class="hljs-number">3</span>, <span class="hljs-number">5</span>, -<span class="hljs-number">1</span>]<br></code></pre></td></tr></table></figure><h4 id="insert"><a href="#insert" class="headerlink" title="insert()"></a>insert()</h4><p>在列表的特定位置增加元素，则可以用insert()</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs py">a_list = <span class="hljs-built_in">list</span>(<span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>,<span class="hljs-number">6</span>))<br>a_list.insert(<span class="hljs-number">3</span>,<span class="hljs-string">&#x27;cat&#x27;</span>)<span class="hljs-comment">#插入一个元素</span><br><span class="hljs-built_in">print</span>(a_list)<br><span class="hljs-string">&#x27;&#x27;&#x27;输出结果&#x27;&#x27;&#x27;</span><br>[<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-string">&#x27;cat&#x27;</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>]<br>a_list.insert(<span class="hljs-number">2</span>,<span class="hljs-built_in">tuple</span>(<span class="hljs-string">&#x27;dog&#x27;</span>))<span class="hljs-comment">#插入一个元组</span><br><span class="hljs-built_in">print</span>(a_list)<br><span class="hljs-string">&#x27;&#x27;&#x27;输出结果&#x27;&#x27;&#x27;</span><br>[<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, (<span class="hljs-string">&#x27;d&#x27;</span>, <span class="hljs-string">&#x27;o&#x27;</span>, <span class="hljs-string">&#x27;g&#x27;</span>), <span class="hljs-number">3</span>, <span class="hljs-string">&#x27;cat&#x27;</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>]<br>a_list.insert(<span class="hljs-number">2</span>,<span class="hljs-built_in">list</span>(<span class="hljs-string">&#x27;fox&#x27;</span>))<span class="hljs-comment">#插入一个列表</span><br><span class="hljs-built_in">print</span>(a_list)<br><span class="hljs-string">&#x27;&#x27;&#x27;输出结果&#x27;&#x27;&#x27;</span><br>[<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, [<span class="hljs-string">&#x27;f&#x27;</span>, <span class="hljs-string">&#x27;o&#x27;</span>, <span class="hljs-string">&#x27;x&#x27;</span>], (<span class="hljs-string">&#x27;d&#x27;</span>, <span class="hljs-string">&#x27;o&#x27;</span>, <span class="hljs-string">&#x27;g&#x27;</span>), <span class="hljs-number">3</span>, <span class="hljs-string">&#x27;cat&#x27;</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>]<br></code></pre></td></tr></table></figure><h3 id="删除列表元素"><a href="#删除列表元素" class="headerlink" title="删除列表元素"></a>删除列表元素</h3><h4 id="del语句"><a href="#del语句" class="headerlink" title="del语句"></a>del语句</h4><p>删除列表元素使用del语句，专门用于执行删除操作，不仅可用于删除列表的元素，也可用于删除变量等。</p><p>使用 del语句既可删除列表中的单个元素，也可直接删除列表的中间一段。</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs py">a_list = [<span class="hljs-string">&#x27;cat&#x27;</span>,<span class="hljs-number">30</span>,-<span class="hljs-number">2.4</span>,(<span class="hljs-number">3</span>,<span class="hljs-number">4</span>),<span class="hljs-string">&#x27;dog&#x27;</span>]<br><span class="hljs-keyword">del</span> a_list[<span class="hljs-number">2</span>]<br><span class="hljs-built_in">print</span>(a_list)<br><span class="hljs-string">&#x27;&#x27;&#x27;输出结果&#x27;&#x27;&#x27;</span><br>[<span class="hljs-string">&#x27;cat&#x27;</span>, <span class="hljs-number">30</span>, (<span class="hljs-number">3</span>, <span class="hljs-number">4</span>), <span class="hljs-string">&#x27;dog&#x27;</span>]<br><span class="hljs-keyword">del</span> a_list[<span class="hljs-number">1</span>:<span class="hljs-number">3</span>]<br><span class="hljs-built_in">print</span>(a_list)<br><span class="hljs-string">&#x27;&#x27;&#x27;输出结果&#x27;&#x27;&#x27;</span><br>[<span class="hljs-string">&#x27;cat&#x27;</span>, <span class="hljs-string">&#x27;dog&#x27;</span>]<br></code></pre></td></tr></table></figure><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs py">b_list = <span class="hljs-built_in">list</span>(<span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>,<span class="hljs-number">10</span>))<br><span class="hljs-keyword">del</span> b_list[<span class="hljs-number">2</span>:-<span class="hljs-number">2</span>:<span class="hljs-number">2</span>]<br><span class="hljs-built_in">print</span>(b_list)<br><span class="hljs-string">&#x27;&#x27;&#x27;输出结果&#x27;&#x27;&#x27;</span><br>[<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">4</span>, <span class="hljs-number">6</span>, <span class="hljs-number">8</span>, <span class="hljs-number">9</span>]<br></code></pre></td></tr></table></figure><h4 id="remove-方法"><a href="#remove-方法" class="headerlink" title="remove()方法"></a>remove()方法</h4><p>除使用 del语句之外， remove()方法也可以删除列表元素，该方法并不是根据索引来删除元素的，而是根据元素本身来执行删除操作的。该方法只删除第一个找到的元素，如果找不到该元素，该方法将会引发 ValueError 错误。</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs py">a_list = [<span class="hljs-string">&#x27;cat&#x27;</span>,<span class="hljs-number">20</span>,-<span class="hljs-number">4</span>,<span class="hljs-number">20</span>,<span class="hljs-string">&#x27;dog&#x27;</span>,<span class="hljs-number">3.4</span>]<br>a_list.remove(<span class="hljs-number">20</span>)<br><span class="hljs-built_in">print</span>(a_list)<br><span class="hljs-string">&#x27;&#x27;&#x27;输出结果&#x27;&#x27;&#x27;</span><br>[<span class="hljs-string">&#x27;cat&#x27;</span>, -<span class="hljs-number">4</span>, <span class="hljs-number">20</span>, <span class="hljs-string">&#x27;dog&#x27;</span>, <span class="hljs-number">3.4</span>]<br></code></pre></td></tr></table></figure><h4 id="clear-方法"><a href="#clear-方法" class="headerlink" title="clear()方法"></a>clear()方法</h4><p>它是直接清空所有元素。</p><h3 id="修改列表元素"><a href="#修改列表元素" class="headerlink" title="修改列表元素"></a>修改列表元素</h3><p>核心逻辑就是重新赋值，可以直接改一个，也可以用slice语法改多个。</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs py">a_list = <span class="hljs-built_in">list</span>(<span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>,<span class="hljs-number">10</span>))<br>a_list[<span class="hljs-number">1</span>]=<span class="hljs-number">11110</span><span class="hljs-comment">#只改一个元素</span><br><span class="hljs-built_in">print</span>(a_list)<br><span class="hljs-string">&#x27;&#x27;&#x27;输出结果&#x27;&#x27;&#x27;</span><br>[<span class="hljs-number">1</span>, <span class="hljs-number">11110</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>, <span class="hljs-number">7</span>, <span class="hljs-number">8</span>, <span class="hljs-number">9</span>]<br>a_list[<span class="hljs-number">2</span>:<span class="hljs-number">4</span>] = [<span class="hljs-string">&#x27;a&#x27;</span>,<span class="hljs-string">&#x27;b&#x27;</span>]<span class="hljs-comment">#用slice语法改多个</span><br><span class="hljs-built_in">print</span>(a_list)<br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">输出结果</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br>[<span class="hljs-number">1</span>, <span class="hljs-number">11110</span>, <span class="hljs-string">&#x27;a&#x27;</span>, <span class="hljs-string">&#x27;b&#x27;</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>, <span class="hljs-number">7</span>, <span class="hljs-number">8</span>, <span class="hljs-number">9</span>]<br>a_list[<span class="hljs-number">5</span>:<span class="hljs-number">7</span>]=[] <span class="hljs-comment">#直接置空就是删除</span><br><span class="hljs-built_in">print</span>(a_list)<br><span class="hljs-string">&#x27;&#x27;&#x27;输出结果&#x27;&#x27;&#x27;</span><br>[<span class="hljs-number">1</span>, <span class="hljs-number">11110</span>, <span class="hljs-string">&#x27;a&#x27;</span>, <span class="hljs-string">&#x27;b&#x27;</span>, <span class="hljs-number">5</span>, <span class="hljs-number">8</span>, <span class="hljs-number">9</span>]<br>a_list[<span class="hljs-number">5</span>:<span class="hljs-number">7</span>]=<span class="hljs-string">&#x27;rabbit&#x27;</span><span class="hljs-comment">#自动将字符串当作序列处理，每个字符都是一个元素，序列为5后面的所有元素都将会改变</span><br><span class="hljs-built_in">print</span>(a_list)<br><span class="hljs-string">&#x27;&#x27;&#x27;输出结果&#x27;&#x27;&#x27;</span><br>[<span class="hljs-number">1</span>, <span class="hljs-number">11110</span>, <span class="hljs-string">&#x27;a&#x27;</span>, <span class="hljs-string">&#x27;b&#x27;</span>, <span class="hljs-number">5</span>, <span class="hljs-string">&#x27;r&#x27;</span>, <span class="hljs-string">&#x27;a&#x27;</span>, <span class="hljs-string">&#x27;b&#x27;</span>, <span class="hljs-string">&#x27;b&#x27;</span>, <span class="hljs-string">&#x27;i&#x27;</span>, <span class="hljs-string">&#x27;t&#x27;</span>]<br></code></pre></td></tr></table></figure><h3 id="其他修改方式"><a href="#其他修改方式" class="headerlink" title="其他修改方式"></a>其他修改方式</h3><p>列表的所有方法是可以查询到的，有下划线的不希望被用户直接调用，如下所示：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-built_in">dir</span>(<span class="hljs-built_in">list</span>)<br><span class="hljs-string">&#x27;&#x27;&#x27;输出结果&#x27;&#x27;&#x27;</span><br>[<span class="hljs-string">&#x27;__add__&#x27;</span>, <span class="hljs-string">&#x27;__class__&#x27;</span>, <span class="hljs-string">&#x27;__class_getitem__&#x27;</span>, <span class="hljs-string">&#x27;__contains__&#x27;</span>, <span class="hljs-string">&#x27;__delattr__&#x27;</span>, <span class="hljs-string">&#x27;__delitem__&#x27;</span>, <span class="hljs-string">&#x27;__dir__&#x27;</span>, <span class="hljs-string">&#x27;__doc__&#x27;</span>, <span class="hljs-string">&#x27;__eq__&#x27;</span>, <span class="hljs-string">&#x27;__format__&#x27;</span>, <span class="hljs-string">&#x27;__ge__&#x27;</span>, <span class="hljs-string">&#x27;__getattribute__&#x27;</span>, <span class="hljs-string">&#x27;__getitem__&#x27;</span>, <span class="hljs-string">&#x27;__getstate__&#x27;</span>, <span class="hljs-string">&#x27;__gt__&#x27;</span>, <span class="hljs-string">&#x27;__hash__&#x27;</span>, <span class="hljs-string">&#x27;__iadd__&#x27;</span>, <span class="hljs-string">&#x27;__imul__&#x27;</span>, <span class="hljs-string">&#x27;__init__&#x27;</span>, <span class="hljs-string">&#x27;__init_subclass__&#x27;</span>, <span class="hljs-string">&#x27;__iter__&#x27;</span>, <span class="hljs-string">&#x27;__le__&#x27;</span>, <span class="hljs-string">&#x27;__len__&#x27;</span>, <span class="hljs-string">&#x27;__lt__&#x27;</span>, <span class="hljs-string">&#x27;__mul__&#x27;</span>, <span class="hljs-string">&#x27;__ne__&#x27;</span>, <span class="hljs-string">&#x27;__new__&#x27;</span>, <span class="hljs-string">&#x27;__reduce__&#x27;</span>, <span class="hljs-string">&#x27;__reduce_ex__&#x27;</span>, <span class="hljs-string">&#x27;__repr__&#x27;</span>, <span class="hljs-string">&#x27;__reversed__&#x27;</span>, <span class="hljs-string">&#x27;__rmul__&#x27;</span>, <span class="hljs-string">&#x27;__setattr__&#x27;</span>, <span class="hljs-string">&#x27;__setitem__&#x27;</span>, <span class="hljs-string">&#x27;__sizeof__&#x27;</span>, <span class="hljs-string">&#x27;__str__&#x27;</span>, <span class="hljs-string">&#x27;__subclasshook__&#x27;</span>, <span class="hljs-string">&#x27;append&#x27;</span>, <span class="hljs-string">&#x27;clear&#x27;</span>, <span class="hljs-string">&#x27;copy&#x27;</span>, <span class="hljs-string">&#x27;count&#x27;</span>, <span class="hljs-string">&#x27;extend&#x27;</span>, <span class="hljs-string">&#x27;index&#x27;</span>, <span class="hljs-string">&#x27;insert&#x27;</span>, <span class="hljs-string">&#x27;pop&#x27;</span>, <span class="hljs-string">&#x27;remove&#x27;</span>, <span class="hljs-string">&#x27;reverse&#x27;</span>, <span class="hljs-string">&#x27;sort&#x27;</span>]<br></code></pre></td></tr></table></figure><h4 id="copy"><a href="#copy" class="headerlink" title="copy()"></a>copy()</h4><p>可以对列表进行复制操作。</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs py">a_list = [<span class="hljs-number">20</span>,<span class="hljs-number">3</span>,<span class="hljs-number">18</span>,-<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">7</span>,-<span class="hljs-number">9</span>,<span class="hljs-number">3</span>]<br>b_list = []<br>b_list = a_list.copy()<br><span class="hljs-built_in">print</span>(b_list)<br><span class="hljs-string">&#x27;&#x27;&#x27;输出结果&#x27;&#x27;&#x27;</span><br>[<span class="hljs-number">20</span>, <span class="hljs-number">3</span>, <span class="hljs-number">18</span>, -<span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">7</span>, -<span class="hljs-number">9</span>, <span class="hljs-number">3</span>]<br></code></pre></td></tr></table></figure><h4 id="count"><a href="#count" class="headerlink" title="count()"></a>count()</h4><p>用于统计列表中某个元素出现的次数。</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs py">a_list = [<span class="hljs-number">20</span>,<span class="hljs-number">3</span>,<span class="hljs-number">18</span>,-<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">7</span>,-<span class="hljs-number">9</span>,<span class="hljs-number">3</span>]<br><span class="hljs-built_in">print</span>(a_list.count(<span class="hljs-number">3</span>))<br><span class="hljs-string">&#x27;&#x27;&#x27;输出结果&#x27;&#x27;&#x27;</span><br><span class="hljs-number">3</span><br></code></pre></td></tr></table></figure><h4 id="index"><a href="#index" class="headerlink" title="index()"></a>index()</h4><p>index()方法 则用于定位某个元素在列表中出现的位置，如果该元素没有出现，则会引发ValueError 错误。在使用 index()方法时还可传入start、end 参数，用于在列表的指定范围内搜索元素。</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs py">a_list = [<span class="hljs-number">2</span>,<span class="hljs-number">30</span>,<span class="hljs-string">&#x27;a&#x27;</span>,<span class="hljs-string">&#x27;b&#x27;</span>,<span class="hljs-string">&#x27;cat&#x27;</span>,<span class="hljs-number">30</span>]<br><span class="hljs-built_in">print</span>(a_list.index(<span class="hljs-number">30</span>))<span class="hljs-comment">#定位第一个30</span><br><span class="hljs-string">&#x27;&#x27;&#x27;输出结果&#x27;&#x27;&#x27;</span><br><span class="hljs-number">1</span><br><span class="hljs-built_in">print</span>(a_list.index(<span class="hljs-number">30</span>,<span class="hljs-number">2</span>)) <span class="hljs-comment">#从索引2开始定位第一个30</span><br><span class="hljs-string">&#x27;&#x27;&#x27;输出结果&#x27;&#x27;&#x27;</span><br><span class="hljs-number">5</span><br><span class="hljs-built_in">print</span>(a_list.index(<span class="hljs-string">&#x27;b&#x27;</span>,<span class="hljs-number">2</span>,<span class="hljs-number">4</span>))<span class="hljs-comment">#从索引2到索引4找&#x27;b&#x27;</span><br><span class="hljs-string">&#x27;&#x27;&#x27;输出结果&#x27;&#x27;&#x27;</span><br><span class="hljs-number">3</span><br></code></pre></td></tr></table></figure><h4 id="pop"><a href="#pop" class="headerlink" title="pop()"></a>pop()</h4><p>实现元素出栈的功能，可实现先入后出(FILO)的功能。但是python并没有提供push()方法，可以用append()替代。</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs py">stack = [<span class="hljs-string">&#x27;cat&#x27;</span>,<span class="hljs-string">&#x27;dog&#x27;</span>]<br>stack.append(<span class="hljs-string">&#x27;fox&#x27;</span>)<br><span class="hljs-built_in">print</span>(stack)<br>[<span class="hljs-string">&#x27;cat&#x27;</span>, <span class="hljs-string">&#x27;dog&#x27;</span>, <span class="hljs-string">&#x27;fox&#x27;</span>]<br><span class="hljs-built_in">print</span>(stack.pop())<br>fox<br><span class="hljs-built_in">print</span>(stack)<br>[<span class="hljs-string">&#x27;cat&#x27;</span>, <span class="hljs-string">&#x27;dog&#x27;</span>]<br></code></pre></td></tr></table></figure><h4 id="reverse"><a href="#reverse" class="headerlink" title="reverse()"></a>reverse()</h4><p>将所有的元素顺序反转。</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs py">a_list = <span class="hljs-built_in">list</span>(<span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>,<span class="hljs-number">8</span>))<br>a_list.reverse()<br><span class="hljs-built_in">print</span>(a_list)<br><span class="hljs-string">&#x27;&#x27;&#x27;输出结果&#x27;&#x27;&#x27;</span><br>[<span class="hljs-number">7</span>, <span class="hljs-number">6</span>, <span class="hljs-number">5</span>, <span class="hljs-number">4</span>, <span class="hljs-number">3</span>, <span class="hljs-number">2</span>, <span class="hljs-number">1</span>]<br></code></pre></td></tr></table></figure><h4 id="sort"><a href="#sort" class="headerlink" title="sort()"></a>sort()</h4><p>可以用于对列表元素进行排序。但是除了默认排序之外，还可以传入key和reverse两个参数。其中key参数用于为每个元素都生成一个比较大小的“键”；reverse参数则用于执行是否需要反转排序(默认是从到大排序)；如果将该参数设为 True ，将会改为从大到小排序。</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs py">a_list=[<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,-<span class="hljs-number">30</span>,-<span class="hljs-number">2</span>,<span class="hljs-number">19.5</span>,<span class="hljs-number">44</span>,<span class="hljs-number">3.45</span>]<br>a_list.sort()<br><span class="hljs-built_in">print</span>(a_list)<span class="hljs-comment">#数字排序</span><br><span class="hljs-string">&#x27;&#x27;&#x27;输出结果&#x27;&#x27;&#x27;</span><br>[-<span class="hljs-number">30</span>, -<span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">3.45</span>, <span class="hljs-number">4</span>, <span class="hljs-number">19.5</span>, <span class="hljs-number">44</span>]<br>b_list=[<span class="hljs-string">&#x27;cat&#x27;</span>,<span class="hljs-string">&#x27;dog&#x27;</span>,<span class="hljs-string">&#x27;ox&#x27;</span>,<span class="hljs-string">&#x27;rubbit&#x27;</span>]<br>b_list.sort()<span class="hljs-comment">#字符串通过字符编码比较</span><br><span class="hljs-built_in">print</span>(b_list)<br><span class="hljs-string">&#x27;&#x27;&#x27;输出结果&#x27;&#x27;&#x27;</span><br>[<span class="hljs-string">&#x27;cat&#x27;</span>, <span class="hljs-string">&#x27;dog&#x27;</span>, <span class="hljs-string">&#x27;ox&#x27;</span>, <span class="hljs-string">&#x27;rubbit&#x27;</span>]<br>b_list.sort(key=<span class="hljs-built_in">len</span>,reverse=<span class="hljs-literal">True</span>)<span class="hljs-comment">#引入参数</span><br><span class="hljs-built_in">print</span>(b_list)<br><span class="hljs-string">&#x27;&#x27;&#x27;输出结果&#x27;&#x27;&#x27;</span><br>[<span class="hljs-string">&#x27;rubbit&#x27;</span>, <span class="hljs-string">&#x27;cat&#x27;</span>, <span class="hljs-string">&#x27;dog&#x27;</span>, <span class="hljs-string">&#x27;ox&#x27;</span>]<br></code></pre></td></tr></table></figure><h2 id="字典"><a href="#字典" class="headerlink" title="字典"></a>字典</h2><h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p>为了保存具有映射关系的数据， Python 提供了字典，字典相当于保存了两组数据，其中一组数据是关键数据，被称为 key；另一组数据可通过key来访问，被称为value。</p><p><img src="/2023/04/15/Python%E2%80%94%E2%80%94%E5%88%97%E8%A1%A8%E3%80%81%E5%85%83%E7%BB%84%E5%92%8C%E5%AD%97%E5%85%B8/image-20230404212947945.png" alt="image-20230404212947945"></p><p>由于字典中的key是非常关键的数据，而且程序需要通过key来访问value，因此字典中的key不允许重复。</p><h3 id="创建"><a href="#创建" class="headerlink" title="创建"></a>创建</h3><h4 id="花括号语法"><a href="#花括号语法" class="headerlink" title="花括号语法"></a>花括号语法</h4><p>在使用花括号语法创建字典时，花括号中应包含多个key-value对，key与value之间用英文冒号隔开key-value之间用英文逗号隔开。</p><p>元组可以作为diet的key，但<strong>列表不能作为元组的key</strong>这是由于 diet 要求key必须是不可变类型，但列表是可变类型，因此列表不能作为元组的 key。</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs py">scores = &#123;<span class="hljs-string">&#x27;Tim&#x27;</span>:<span class="hljs-number">20</span>,<span class="hljs-string">&#x27;Jerry&#x27;</span>:<span class="hljs-number">30</span>,<span class="hljs-string">&#x27;Tom&#x27;</span>:<span class="hljs-number">25</span>&#125;<br><span class="hljs-built_in">print</span>(scores)<span class="hljs-comment">#&#123;key:value&#125;这里key是字符串，value是整数</span><br><span class="hljs-string">&#x27;&#x27;&#x27;输出结果&#x27;&#x27;&#x27;</span><br>&#123;<span class="hljs-string">&#x27;Tim&#x27;</span>: <span class="hljs-number">20</span>, <span class="hljs-string">&#x27;Jerry&#x27;</span>: <span class="hljs-number">30</span>, <span class="hljs-string">&#x27;Tom&#x27;</span>: <span class="hljs-number">25</span>&#125;<br><span class="hljs-built_in">dict</span> = &#123;(<span class="hljs-number">20</span>,<span class="hljs-number">30</span>):<span class="hljs-string">&#x27;good&#x27;</span>,<span class="hljs-number">30</span>:<span class="hljs-string">&#x27;well&#x27;</span>&#125;<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">dict</span>)<span class="hljs-comment">#&#123;key:value&#125;这里key是元组，value是字符串</span><br><span class="hljs-string">&#x27;&#x27;&#x27;输出结果&#x27;&#x27;&#x27;</span><br>&#123;(<span class="hljs-number">20</span>, <span class="hljs-number">30</span>): <span class="hljs-string">&#x27;good&#x27;</span>, <span class="hljs-number">30</span>: <span class="hljs-string">&#x27;well&#x27;</span>&#125;<br></code></pre></td></tr></table></figure><h4 id="dict-函数"><a href="#dict-函数" class="headerlink" title="dict()函数"></a>dict()函数</h4><p>在使用 diet()函数建字典时，可以传入多个列表或元组参数作为key-value对，每个列表或元组将被当成一个key-value对，因此这些列表或元组都只能包含两个元素。</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs py">vegetables = [(<span class="hljs-string">&#x27;celery&#x27;</span>, <span class="hljs-number">1.58</span>), (<span class="hljs-string">&#x27;brocoli&#x27;</span>, <span class="hljs-number">1.29</span>), (<span class="hljs-string">&#x27;lettuce&#x27;</span>, <span class="hljs-number">2.19</span>)]<span class="hljs-comment">#此处为列表</span><br>dict3 = <span class="hljs-built_in">dict</span>(vegetables)<br><span class="hljs-built_in">print</span>(dict3)<br>cars = [[<span class="hljs-string">&#x27;BMW&#x27;</span>, <span class="hljs-number">8.5</span>], [<span class="hljs-string">&#x27;BENS&#x27;</span>, <span class="hljs-number">8.3</span>], [<span class="hljs-string">&#x27;AUDI&#x27;</span>, <span class="hljs-number">7.9</span>]]<span class="hljs-comment">#此处为列表</span><br>dict4 = <span class="hljs-built_in">dict</span>(cars)<br><span class="hljs-built_in">print</span>(dict4)<br><span class="hljs-string">&#x27;&#x27;&#x27;输出结果&#x27;&#x27;&#x27;</span><br>&#123;<span class="hljs-string">&#x27;celery&#x27;</span>: <span class="hljs-number">1.58</span>, <span class="hljs-string">&#x27;brocoli&#x27;</span>: <span class="hljs-number">1.29</span>, <span class="hljs-string">&#x27;lettuce&#x27;</span>: <span class="hljs-number">2.19</span>&#125;<br>&#123;<span class="hljs-string">&#x27;BMW&#x27;</span>: <span class="hljs-number">8.5</span>, <span class="hljs-string">&#x27;BENS&#x27;</span>: <span class="hljs-number">8.3</span>, <span class="hljs-string">&#x27;AUDI&#x27;</span>: <span class="hljs-number">7.9</span>&#125;<br></code></pre></td></tr></table></figure><p>还可通过为diet指定关键字参数创建字典，此时字典的 key不允许使用表达式，且key不需要放到引号内。</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-built_in">dict</span> = <span class="hljs-built_in">dict</span>(spinach = <span class="hljs-number">1.39</span> , cabbage = <span class="hljs-number">2.59</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">dict</span>)<br><span class="hljs-string">&#x27;&#x27;&#x27;输出结果&#x27;&#x27;&#x27;</span><br>&#123;<span class="hljs-string">&#x27;spinach&#x27;</span>: <span class="hljs-number">1.39</span>, <span class="hljs-string">&#x27;cabbage&#x27;</span>: <span class="hljs-number">2.59</span>&#125;<br></code></pre></td></tr></table></figure><h3 id="基本用法"><a href="#基本用法" class="headerlink" title="基本用法"></a>基本用法</h3><h4 id="通过key访问value"><a href="#通过key访问value" class="headerlink" title="通过key访问value"></a>通过key访问value</h4><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs py">scores = &#123;<span class="hljs-string">&#x27;cat&#x27;</span>:<span class="hljs-number">20</span>&#125;<br><span class="hljs-built_in">print</span>(scores[<span class="hljs-string">&#x27;cat&#x27;</span>])<br><span class="hljs-string">&#x27;&#x27;&#x27;输出结果&#x27;&#x27;&#x27;</span><br><span class="hljs-number">20</span><br></code></pre></td></tr></table></figure><h4 id="通过key添加key-value"><a href="#通过key添加key-value" class="headerlink" title="通过key添加key-value"></a>通过key添加key-value</h4><p>可以把key看成特殊的可见的索引，然后给key赋值。</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs py">scores[<span class="hljs-string">&#x27;dog&#x27;</span>] = <span class="hljs-number">60</span><br>scores[<span class="hljs-string">&#x27;ox&#x27;</span>] = <span class="hljs-number">10</span><br><span class="hljs-built_in">print</span>(scores)<br><span class="hljs-string">&#x27;&#x27;&#x27;输出结果&#x27;&#x27;&#x27;</span><br>&#123;<span class="hljs-string">&#x27;cat&#x27;</span>: <span class="hljs-number">20</span>, <span class="hljs-string">&#x27;dog&#x27;</span>: <span class="hljs-number">60</span>, <span class="hljs-string">&#x27;ox&#x27;</span>: <span class="hljs-number">10</span>&#125;<br></code></pre></td></tr></table></figure><h4 id="通过key删除key-value"><a href="#通过key删除key-value" class="headerlink" title="通过key删除key-value"></a>通过key删除key-value</h4><p>如果要删除宇典中的key-value对，则可使用del语句。</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-comment"># scores=&#123;&#x27;cat&#x27;: 20, &#x27;dog&#x27;: 60, &#x27;ox&#x27;: 10&#125;</span><br><span class="hljs-keyword">del</span> scores[<span class="hljs-string">&#x27;ox&#x27;</span>]<br><span class="hljs-built_in">print</span>(scores)<br><span class="hljs-string">&#x27;&#x27;&#x27;输出结果&#x27;&#x27;&#x27;</span><br>&#123;<span class="hljs-string">&#x27;cat&#x27;</span>: <span class="hljs-number">20</span>, <span class="hljs-string">&#x27;dog&#x27;</span>: <span class="hljs-number">60</span>&#125;<br></code></pre></td></tr></table></figure><h4 id="通过key修改key-value"><a href="#通过key修改key-value" class="headerlink" title="通过key修改key-value"></a>通过key修改key-value</h4><p>如果对diet中存在的key-value对赋值，新赋的value就会覆盖原有的value，这样即可改变 diet中的 key-value对。</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-comment">#scores=&#123;&#x27;cat&#x27;: 20, &#x27;dog&#x27;: 60&#125;</span><br>scores[<span class="hljs-string">&#x27;cat&#x27;</span>] = <span class="hljs-number">50</span><br><span class="hljs-built_in">print</span>(scores)<br><span class="hljs-string">&#x27;&#x27;&#x27;输出结果&#x27;&#x27;&#x27;</span><br>&#123;<span class="hljs-string">&#x27;cat&#x27;</span>: <span class="hljs-number">50</span>, <span class="hljs-string">&#x27;dog&#x27;</span>: <span class="hljs-number">60</span>&#125;<br></code></pre></td></tr></table></figure><h3 id="常用方法"><a href="#常用方法" class="headerlink" title="常用方法"></a>常用方法</h3><p>用命令查看dict()的方法，有下划线的不希望被用户直接调用：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-built_in">dir</span>(<span class="hljs-built_in">dict</span>)<br><span class="hljs-string">&#x27;&#x27;&#x27;输出结果&#x27;&#x27;&#x27;</span><br>[<span class="hljs-string">&#x27;__class__&#x27;</span>, <span class="hljs-string">&#x27;__class_getitem__&#x27;</span>, <span class="hljs-string">&#x27;__contains__&#x27;</span>, <span class="hljs-string">&#x27;__delattr__&#x27;</span>, <span class="hljs-string">&#x27;__delitem__&#x27;</span>, <span class="hljs-string">&#x27;__dir__&#x27;</span>, <span class="hljs-string">&#x27;__doc__&#x27;</span>, <span class="hljs-string">&#x27;__eq__&#x27;</span>, <span class="hljs-string">&#x27;__format__&#x27;</span>, <span class="hljs-string">&#x27;__ge__&#x27;</span>, <span class="hljs-string">&#x27;__getattribute__&#x27;</span>, <span class="hljs-string">&#x27;__getitem__&#x27;</span>, <span class="hljs-string">&#x27;__getstate__&#x27;</span>, <span class="hljs-string">&#x27;__gt__&#x27;</span>, <span class="hljs-string">&#x27;__hash__&#x27;</span>, <span class="hljs-string">&#x27;__init__&#x27;</span>, <span class="hljs-string">&#x27;__init_subclass__&#x27;</span>, <span class="hljs-string">&#x27;__ior__&#x27;</span>, <span class="hljs-string">&#x27;__iter__&#x27;</span>, <span class="hljs-string">&#x27;__le__&#x27;</span>, <span class="hljs-string">&#x27;__len__&#x27;</span>, <span class="hljs-string">&#x27;__lt__&#x27;</span>, <span class="hljs-string">&#x27;__ne__&#x27;</span>, <span class="hljs-string">&#x27;__new__&#x27;</span>, <span class="hljs-string">&#x27;__or__&#x27;</span>, <span class="hljs-string">&#x27;__reduce__&#x27;</span>, <span class="hljs-string">&#x27;__reduce_ex__&#x27;</span>, <span class="hljs-string">&#x27;__repr__&#x27;</span>, <span class="hljs-string">&#x27;__reversed__&#x27;</span>, <span class="hljs-string">&#x27;__ror__&#x27;</span>, <span class="hljs-string">&#x27;__setattr__&#x27;</span>, <span class="hljs-string">&#x27;__setitem__&#x27;</span>, <span class="hljs-string">&#x27;__sizeof__&#x27;</span>, <span class="hljs-string">&#x27;__str__&#x27;</span>, <span class="hljs-string">&#x27;__subclasshook__&#x27;</span>, <span class="hljs-string">&#x27;clear&#x27;</span>, <span class="hljs-string">&#x27;copy&#x27;</span>, <span class="hljs-string">&#x27;fromkeys&#x27;</span>, <span class="hljs-string">&#x27;get&#x27;</span>, <span class="hljs-string">&#x27;items&#x27;</span>, <span class="hljs-string">&#x27;keys&#x27;</span>, <span class="hljs-string">&#x27;pop&#x27;</span>, <span class="hljs-string">&#x27;popitem&#x27;</span>, <span class="hljs-string">&#x27;setdefault&#x27;</span>, <span class="hljs-string">&#x27;update&#x27;</span>, <span class="hljs-string">&#x27;values&#x27;</span>]<br></code></pre></td></tr></table></figure><h4 id="fromkeys"><a href="#fromkeys" class="headerlink" title="fromkeys()"></a>fromkeys()</h4><p>使用给定的多个key创建字典，这些key对应的value默认都是None；也可以额外传入一个参数作为默认的value 。</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs py">a_dict = <span class="hljs-built_in">dict</span>.fromkeys([<span class="hljs-string">&#x27;a&#x27;</span>,<span class="hljs-string">&#x27;b&#x27;</span>])<br>b_dict = <span class="hljs-built_in">dict</span>.fromkeys((<span class="hljs-number">13</span>,<span class="hljs-number">17</span>))<br>c_dict = <span class="hljs-built_in">dict</span>.fromkeys((<span class="hljs-number">13</span>,<span class="hljs-number">17</span>),<span class="hljs-string">&#x27;good&#x27;</span>)<br><span class="hljs-built_in">print</span>(a_dict,b_dict,c_dict)<br><span class="hljs-string">&#x27;&#x27;&#x27;输出结果&#x27;&#x27;&#x27;</span><br>&#123;<span class="hljs-string">&#x27;a&#x27;</span>: <span class="hljs-literal">None</span>, <span class="hljs-string">&#x27;b&#x27;</span>: <span class="hljs-literal">None</span>&#125; &#123;<span class="hljs-number">13</span>: <span class="hljs-literal">None</span>, <span class="hljs-number">17</span>: <span class="hljs-literal">None</span>&#125; &#123;<span class="hljs-number">13</span>: <span class="hljs-string">&#x27;good&#x27;</span>, <span class="hljs-number">17</span>: <span class="hljs-string">&#x27;good&#x27;</span>&#125;<br></code></pre></td></tr></table></figure><h4 id="get"><a href="#get" class="headerlink" title="get()"></a>get()</h4><p>就是根据key来获取value当于方括号语法增强版——当使用方括号语法访并不存在key，字典会引发Keyerror；但如果使用get()方法切不存在的key，该方法会简单地返回None，不会导致错误。</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-comment">#scores=&#123;&#x27;cat&#x27;: 20, &#x27;dog&#x27;: 60&#125;</span><br><span class="hljs-built_in">print</span>(scores.get(<span class="hljs-string">&#x27;cat&#x27;</span>))<br><span class="hljs-string">&#x27;&#x27;&#x27;输出结果&#x27;&#x27;&#x27;</span><br><span class="hljs-number">50</span><br><span class="hljs-built_in">print</span>(scores.get(<span class="hljs-string">&#x27;ox&#x27;</span>))<br><span class="hljs-string">&#x27;&#x27;&#x27;输出结果&#x27;&#x27;&#x27;</span><br><span class="hljs-literal">None</span><br></code></pre></td></tr></table></figure><h4 id="获取字典内信息：items-、keys-、values"><a href="#获取字典内信息：items-、keys-、values" class="headerlink" title="获取字典内信息：items()、keys()、values()"></a>获取字典内信息：items()、keys()、values()</h4><p>items()、keys()、values()分别用于获取字典中的所有key-value对、所有key、所有value。这三个方法依次返回dict_items、dict_keys和dict_values对象，python不希望用户直接操作这几个方法，但可以通过list()函数把它们转换成表。</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs py">scores=&#123;<span class="hljs-string">&#x27;cat&#x27;</span>: <span class="hljs-number">20</span>, <span class="hljs-string">&#x27;dog&#x27;</span>: <span class="hljs-number">60</span>, <span class="hljs-string">&#x27;ox&#x27;</span>: <span class="hljs-number">10</span>&#125;<br>ims = scores.items()<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">type</span>(ims))<br><span class="hljs-string">&#x27;&#x27;&#x27;输出结果&#x27;&#x27;&#x27;</span><br>&lt;<span class="hljs-keyword">class</span> <span class="hljs-string">&#x27;dict_items&#x27;</span>&gt;<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">list</span>(ims))<br><span class="hljs-string">&#x27;&#x27;&#x27;输出结果&#x27;&#x27;&#x27;</span><br>[(<span class="hljs-string">&#x27;cat&#x27;</span>, <span class="hljs-number">20</span>), (<span class="hljs-string">&#x27;dog&#x27;</span>, <span class="hljs-number">60</span>), (<span class="hljs-string">&#x27;ox&#x27;</span>, <span class="hljs-number">10</span>)]<br>kys = scores.keys()<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">list</span>(kys))<br><span class="hljs-string">&#x27;&#x27;&#x27;输出结果&#x27;&#x27;&#x27;</span><br>[<span class="hljs-string">&#x27;cat&#x27;</span>, <span class="hljs-string">&#x27;dog&#x27;</span>, <span class="hljs-string">&#x27;ox&#x27;</span>]<br>vals = scores.values()<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">list</span>(vals))<br><span class="hljs-string">&#x27;&#x27;&#x27;输出结果&#x27;&#x27;&#x27;</span><br>[<span class="hljs-number">20</span>, <span class="hljs-number">60</span>, <span class="hljs-number">10</span>]<br></code></pre></td></tr></table></figure><h4 id="pop-1"><a href="#pop-1" class="headerlink" title="pop()"></a>pop()</h4><p>这里pop()方法用于获取<strong>指定key对应的value</strong>，并删除这个key-value对。<em>这里就不是先进先出了。</em></p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs py">scores=&#123;<span class="hljs-string">&#x27;cat&#x27;</span>: <span class="hljs-number">20</span>, <span class="hljs-string">&#x27;dog&#x27;</span>: <span class="hljs-number">60</span>, <span class="hljs-string">&#x27;ox&#x27;</span>: <span class="hljs-number">10</span>&#125;<br><span class="hljs-built_in">print</span>(scores.pop(<span class="hljs-string">&#x27;dog&#x27;</span>))<br><span class="hljs-string">&#x27;&#x27;&#x27;输出结果&#x27;&#x27;&#x27;</span><br><span class="hljs-number">60</span><br><span class="hljs-built_in">print</span>(scores)<br><span class="hljs-string">&#x27;&#x27;&#x27;输出结果&#x27;&#x27;&#x27;</span><br>&#123;<span class="hljs-string">&#x27;cat&#x27;</span>: <span class="hljs-number">20</span>, <span class="hljs-string">&#x27;ox&#x27;</span>: <span class="hljs-number">10</span>&#125;<br></code></pre></td></tr></table></figure><h4 id="popitem"><a href="#popitem" class="headerlink" title="popitem()"></a>popitem()</h4><p>这个就是随机弹出字典中的一个key-value对，但是其实就是弹出最后一个元素。</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs py">scores=&#123;<span class="hljs-string">&#x27;cat&#x27;</span>: <span class="hljs-number">20</span>, <span class="hljs-string">&#x27;dog&#x27;</span>: <span class="hljs-number">60</span>, <span class="hljs-string">&#x27;ox&#x27;</span>: <span class="hljs-number">10</span>&#125;<br><span class="hljs-built_in">print</span>(scores.popitem())<br><span class="hljs-string">&#x27;&#x27;&#x27;输出结果&#x27;&#x27;&#x27;</span><br>(<span class="hljs-string">&#x27;ox&#x27;</span>, <span class="hljs-number">10</span>)<br><span class="hljs-built_in">print</span>(scores.popitem())<br><span class="hljs-string">&#x27;&#x27;&#x27;输出结果&#x27;&#x27;&#x27;</span><br>(<span class="hljs-string">&#x27;dog&#x27;</span>, <span class="hljs-number">60</span>)<br><span class="hljs-built_in">print</span>(scores)<br><span class="hljs-string">&#x27;&#x27;&#x27;输出结果&#x27;&#x27;&#x27;</span><br>&#123;<span class="hljs-string">&#x27;cat&#x27;</span>: <span class="hljs-number">20</span>&#125;<br></code></pre></td></tr></table></figure><h4 id="setdefault"><a href="#setdefault" class="headerlink" title="setdefault()"></a>setdefault()</h4><p>setdefault()方法总能返回指定key对应的value——如果该key-value对存在，直接返回该key对应的value；如果key-value对不存在，则先为该key设置一个默认的value，然后再返回该key对应的value。</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs py">scores=&#123;<span class="hljs-string">&#x27;cat&#x27;</span>: <span class="hljs-number">20</span>, <span class="hljs-string">&#x27;dog&#x27;</span>: <span class="hljs-number">60</span>, <span class="hljs-string">&#x27;ox&#x27;</span>: <span class="hljs-number">10</span>&#125;<br><span class="hljs-built_in">print</span>(scores.setdefault(<span class="hljs-string">&#x27;cat&#x27;</span>))<br><span class="hljs-string">&#x27;&#x27;&#x27;输出结果&#x27;&#x27;&#x27;</span><br><span class="hljs-number">20</span><br><span class="hljs-built_in">print</span>(scores.setdefault(<span class="hljs-string">&#x27;kitty&#x27;</span>,<span class="hljs-number">20</span>))<br><span class="hljs-string">&#x27;&#x27;&#x27;输出结果&#x27;&#x27;&#x27;</span><br><span class="hljs-number">20</span><br><span class="hljs-built_in">print</span>(scores)<br><span class="hljs-string">&#x27;&#x27;&#x27;输出结果&#x27;&#x27;&#x27;</span><br>&#123;<span class="hljs-string">&#x27;cat&#x27;</span>: <span class="hljs-number">20</span>, <span class="hljs-string">&#x27;dog&#x27;</span>: <span class="hljs-number">60</span>, <span class="hljs-string">&#x27;ox&#x27;</span>: <span class="hljs-number">10</span>, <span class="hljs-string">&#x27;kitty&#x27;</span>: <span class="hljs-number">20</span>&#125;<br></code></pre></td></tr></table></figure><h3 id="使用字典格式化字符串"><a href="#使用字典格式化字符串" class="headerlink" title="使用字典格式化字符串"></a>使用字典格式化字符串</h3><p>只需要改变字典中的某个参数，输出格式不受影响。</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs py">temp = <span class="hljs-string">&#x27;名字:%(name)s，成绩:%(score)0.2f，班级:%(class)s&#x27;</span><br>student = &#123;<span class="hljs-string">&#x27;name&#x27;</span>:<span class="hljs-string">&#x27;Tom&#x27;</span>,<span class="hljs-string">&#x27;score&#x27;</span>:<span class="hljs-number">88.96</span>,<span class="hljs-string">&#x27;class&#x27;</span>:<span class="hljs-number">1</span>&#125;<br><span class="hljs-built_in">print</span>(temp%student)<br><span class="hljs-string">&#x27;&#x27;&#x27;输出结果&#x27;&#x27;&#x27;</span><br>名字:Tom，成绩:<span class="hljs-number">88.96</span>，班级:<span class="hljs-number">1</span><br>student = &#123;<span class="hljs-string">&#x27;name&#x27;</span>:<span class="hljs-string">&#x27;Mary&#x27;</span>,<span class="hljs-string">&#x27;score&#x27;</span>:<span class="hljs-number">96.87</span>,<span class="hljs-string">&#x27;class&#x27;</span>:<span class="hljs-number">3</span>&#125;<br><span class="hljs-built_in">print</span>(temp%student)<br><span class="hljs-string">&#x27;&#x27;&#x27;输出结果&#x27;&#x27;&#x27;</span><br>名字:Mary，成绩:<span class="hljs-number">96.87</span>，班级:<span class="hljs-number">3</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>python</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>变量和简单类型</title>
    <link href="/2023/04/15/Python%E2%80%94%E2%80%94%E5%8F%98%E9%87%8F%E5%92%8C%E7%AE%80%E5%8D%95%E7%B1%BB%E5%9E%8B/"/>
    <url>/2023/04/15/Python%E2%80%94%E2%80%94%E5%8F%98%E9%87%8F%E5%92%8C%E7%AE%80%E5%8D%95%E7%B1%BB%E5%9E%8B/</url>
    
    <content type="html"><![CDATA[<h1 id="变量和简单类型"><a href="#变量和简单类型" class="headerlink" title="变量和简单类型"></a>变量和简单类型</h1><h2 id="单行注释和多行注释"><a href="#单行注释和多行注释" class="headerlink" title="单行注释和多行注释"></a>单行注释和多行注释</h2><h3 id="单行注释"><a href="#单行注释" class="headerlink" title="单行注释"></a>单行注释</h3><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-comment"># 这是一行注释</span><br></code></pre></td></tr></table></figure><h3 id="多行注释"><a href="#多行注释" class="headerlink" title="多行注释"></a>多行注释</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">这是多行注释(三个单引号)</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">这也是多行注释(三个多引号)</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br></code></pre></td></tr></table></figure><h2 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h2><h3 id="弱类型语言"><a href="#弱类型语言" class="headerlink" title="弱类型语言"></a>弱类型语言</h3><p>Python是弱类型语言，有两个典型特征：</p><ol><li>变量无需声明即可<strong>直接赋值</strong>：对一个不存在的变量赋值就相当于定义了一个新变量。</li><li>变量的数据类型可以<strong>动态改变</strong>：同一变量可以一会被赋值为整数值，一会被赋值为字符串</li></ol><p>那如何查看现在是什么类型呢？——用type()</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs py">a = <span class="hljs-string">&#x27;hello&#x27;</span><br><span class="hljs-built_in">type</span>(a)<br>&lt;<span class="hljs-keyword">class</span> <span class="hljs-string">&#x27;str&#x27;</span>&gt;<span class="hljs-comment">#输出</span><br><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">type</span>(a))<br>&lt;<span class="hljs-keyword">class</span> <span class="hljs-string">&#x27;str&#x27;</span>&gt;<span class="hljs-comment">#输出</span><br><br>a= <span class="hljs-number">11</span><br><span class="hljs-built_in">type</span>(a)<br>&lt;<span class="hljs-keyword">class</span> <span class="hljs-string">&#x27;int&#x27;</span>&gt;<span class="hljs-comment">#输出</span><br></code></pre></td></tr></table></figure><h3 id="变量命名规则"><a href="#变量命名规则" class="headerlink" title="变量命名规则"></a>变量命名规则</h3><ol><li>标识符可以由字母、数字、下划线组成，数字不能放在开头(下划线可放在开头)</li><li>标识符不能是python的关键字，但可以包含关键字</li><li>标识符不可以包含空格</li></ol><h3 id="关键字"><a href="#关键字" class="headerlink" title="关键字"></a>关键字</h3><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-keyword">import</span> keyword<br>keyword.kwlist<br><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">输出结果如下</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br>[<span class="hljs-string">&#x27;False&#x27;</span>, <span class="hljs-string">&#x27;None&#x27;</span>, <span class="hljs-string">&#x27;True&#x27;</span>, <span class="hljs-string">&#x27;and&#x27;</span>, <span class="hljs-string">&#x27;as&#x27;</span>, <span class="hljs-string">&#x27;assert&#x27;</span>, <span class="hljs-string">&#x27;async&#x27;</span>, <span class="hljs-string">&#x27;await&#x27;</span>, <span class="hljs-string">&#x27;break&#x27;</span>, <span class="hljs-string">&#x27;class&#x27;</span>, <span class="hljs-string">&#x27;continue&#x27;</span>, <span class="hljs-string">&#x27;def&#x27;</span>, <span class="hljs-string">&#x27;del&#x27;</span>, <span class="hljs-string">&#x27;elif&#x27;</span>, <span class="hljs-string">&#x27;else&#x27;</span>, <span class="hljs-string">&#x27;except&#x27;</span>, <span class="hljs-string">&#x27;finally&#x27;</span>, <span class="hljs-string">&#x27;for&#x27;</span>, <span class="hljs-string">&#x27;from&#x27;</span>, <span class="hljs-string">&#x27;global&#x27;</span>, <span class="hljs-string">&#x27;if&#x27;</span>, <span class="hljs-string">&#x27;import&#x27;</span>, <span class="hljs-string">&#x27;in&#x27;</span>, <span class="hljs-string">&#x27;is&#x27;</span>, <span class="hljs-string">&#x27;lambda&#x27;</span>, <span class="hljs-string">&#x27;nonlocal&#x27;</span>, <span class="hljs-string">&#x27;not&#x27;</span>, <span class="hljs-string">&#x27;or&#x27;</span>, <span class="hljs-string">&#x27;pass&#x27;</span>, <span class="hljs-string">&#x27;raise&#x27;</span>, <span class="hljs-string">&#x27;return&#x27;</span>, <span class="hljs-string">&#x27;try&#x27;</span>, <span class="hljs-string">&#x27;while&#x27;</span>, <span class="hljs-string">&#x27;with&#x27;</span>, <span class="hljs-string">&#x27;yield&#x27;</span>]<br></code></pre></td></tr></table></figure><h3 id="内置函数"><a href="#内置函数" class="headerlink" title="内置函数"></a>内置函数</h3><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-comment"># 方法一</span><br><span class="hljs-built_in">dir</span>(__builtins__)<br><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">输出结果如下</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br>[<span class="hljs-string">&#x27;ArithmeticError&#x27;</span>, <span class="hljs-string">&#x27;AssertionError&#x27;</span>, <span class="hljs-string">&#x27;AttributeError&#x27;</span>, <span class="hljs-string">&#x27;BaseException&#x27;</span>, <span class="hljs-string">&#x27;BaseExceptionGroup&#x27;</span>, <span class="hljs-string">&#x27;BlockingIOError&#x27;</span>, <span class="hljs-string">&#x27;BrokenPipeError&#x27;</span>, <span class="hljs-string">&#x27;BufferError&#x27;</span>, <span class="hljs-string">&#x27;BytesWarning&#x27;</span>, <span class="hljs-string">&#x27;ChildProcessError&#x27;</span>, <span class="hljs-string">&#x27;ConnectionAbortedError&#x27;</span>, <span class="hljs-string">&#x27;ConnectionError&#x27;</span>, <span class="hljs-string">&#x27;ConnectionRefusedError&#x27;</span>, <span class="hljs-string">&#x27;ConnectionResetError&#x27;</span>, <span class="hljs-string">&#x27;DeprecationWarning&#x27;</span>, <span class="hljs-string">&#x27;EOFError&#x27;</span>, <span class="hljs-string">&#x27;Ellipsis&#x27;</span>, <span class="hljs-string">&#x27;EncodingWarning&#x27;</span>, <span class="hljs-string">&#x27;EnvironmentError&#x27;</span>, <span class="hljs-string">&#x27;Exception&#x27;</span>, <span class="hljs-string">&#x27;ExceptionGroup&#x27;</span>, <span class="hljs-string">&#x27;False&#x27;</span>, <span class="hljs-string">&#x27;FileExistsError&#x27;</span>, <span class="hljs-string">&#x27;FileNotFoundError&#x27;</span>, <span class="hljs-string">&#x27;FloatingPointError&#x27;</span>, <span class="hljs-string">&#x27;FutureWarning&#x27;</span>, <span class="hljs-string">&#x27;GeneratorExit&#x27;</span>, <span class="hljs-string">&#x27;IOError&#x27;</span>, <span class="hljs-string">&#x27;ImportError&#x27;</span>, <span class="hljs-string">&#x27;ImportWarning&#x27;</span>, <span class="hljs-string">&#x27;IndentationError&#x27;</span>, <span class="hljs-string">&#x27;IndexError&#x27;</span>, <span class="hljs-string">&#x27;InterruptedError&#x27;</span>, <span class="hljs-string">&#x27;IsADirectoryError&#x27;</span>, <span class="hljs-string">&#x27;KeyError&#x27;</span>, <span class="hljs-string">&#x27;KeyboardInterrupt&#x27;</span>, <span class="hljs-string">&#x27;LookupError&#x27;</span>, <span class="hljs-string">&#x27;MemoryError&#x27;</span>, <span class="hljs-string">&#x27;ModuleNotFoundError&#x27;</span>, <span class="hljs-string">&#x27;NameError&#x27;</span>, <span class="hljs-string">&#x27;None&#x27;</span>, <span class="hljs-string">&#x27;NotADirectoryError&#x27;</span>, <span class="hljs-string">&#x27;NotImplemented&#x27;</span>, <span class="hljs-string">&#x27;NotImplementedError&#x27;</span>, <span class="hljs-string">&#x27;OSError&#x27;</span>, <span class="hljs-string">&#x27;OverflowError&#x27;</span>, <span class="hljs-string">&#x27;PendingDeprecationWarning&#x27;</span>, <span class="hljs-string">&#x27;PermissionError&#x27;</span>, <span class="hljs-string">&#x27;ProcessLookupError&#x27;</span>, <span class="hljs-string">&#x27;RecursionError&#x27;</span>, <span class="hljs-string">&#x27;ReferenceError&#x27;</span>, <span class="hljs-string">&#x27;ResourceWarning&#x27;</span>, <span class="hljs-string">&#x27;RuntimeError&#x27;</span>, <span class="hljs-string">&#x27;RuntimeWarning&#x27;</span>, <span class="hljs-string">&#x27;StopAsyncIteration&#x27;</span>, <span class="hljs-string">&#x27;StopIteration&#x27;</span>, <span class="hljs-string">&#x27;SyntaxError&#x27;</span>, <span class="hljs-string">&#x27;SyntaxWarning&#x27;</span>, <span class="hljs-string">&#x27;SystemError&#x27;</span>, <span class="hljs-string">&#x27;SystemExit&#x27;</span>, <span class="hljs-string">&#x27;TabError&#x27;</span>, <span class="hljs-string">&#x27;TimeoutError&#x27;</span>, <span class="hljs-string">&#x27;True&#x27;</span>, <span class="hljs-string">&#x27;TypeError&#x27;</span>, <span class="hljs-string">&#x27;UnboundLocalError&#x27;</span>, <span class="hljs-string">&#x27;UnicodeDecodeError&#x27;</span>, <span class="hljs-string">&#x27;UnicodeEncodeError&#x27;</span>, <span class="hljs-string">&#x27;UnicodeError&#x27;</span>, <span class="hljs-string">&#x27;UnicodeTranslateError&#x27;</span>, <span class="hljs-string">&#x27;UnicodeWarning&#x27;</span>, <span class="hljs-string">&#x27;UserWarning&#x27;</span>, <span class="hljs-string">&#x27;ValueError&#x27;</span>, <span class="hljs-string">&#x27;Warning&#x27;</span>, <span class="hljs-string">&#x27;WindowsError&#x27;</span>, <span class="hljs-string">&#x27;ZeroDivisionError&#x27;</span>, <span class="hljs-string">&#x27;_&#x27;</span>, <span class="hljs-string">&#x27;__build_class__&#x27;</span>, <span class="hljs-string">&#x27;__debug__&#x27;</span>, <span class="hljs-string">&#x27;__doc__&#x27;</span>, <span class="hljs-string">&#x27;__import__&#x27;</span>, <span class="hljs-string">&#x27;__loader__&#x27;</span>, <span class="hljs-string">&#x27;__name__&#x27;</span>, <span class="hljs-string">&#x27;__package__&#x27;</span>, <span class="hljs-string">&#x27;__spec__&#x27;</span>, <span class="hljs-string">&#x27;abs&#x27;</span>, <span class="hljs-string">&#x27;aiter&#x27;</span>, <span class="hljs-string">&#x27;all&#x27;</span>, <span class="hljs-string">&#x27;anext&#x27;</span>, <span class="hljs-string">&#x27;any&#x27;</span>, <span class="hljs-string">&#x27;ascii&#x27;</span>, <span class="hljs-string">&#x27;bin&#x27;</span>, <span class="hljs-string">&#x27;bool&#x27;</span>, <span class="hljs-string">&#x27;breakpoint&#x27;</span>, <span class="hljs-string">&#x27;bytearray&#x27;</span>, <span class="hljs-string">&#x27;bytes&#x27;</span>, <span class="hljs-string">&#x27;callable&#x27;</span>, <span class="hljs-string">&#x27;chr&#x27;</span>, <span class="hljs-string">&#x27;classmethod&#x27;</span>, <span class="hljs-string">&#x27;compile&#x27;</span>, <span class="hljs-string">&#x27;complex&#x27;</span>, <span class="hljs-string">&#x27;copyright&#x27;</span>, <span class="hljs-string">&#x27;credits&#x27;</span>, <span class="hljs-string">&#x27;delattr&#x27;</span>, <span class="hljs-string">&#x27;dict&#x27;</span>, <span class="hljs-string">&#x27;dir&#x27;</span>, <span class="hljs-string">&#x27;divmod&#x27;</span>, <span class="hljs-string">&#x27;enumerate&#x27;</span>, <span class="hljs-string">&#x27;eval&#x27;</span>, <span class="hljs-string">&#x27;exec&#x27;</span>, <span class="hljs-string">&#x27;exit&#x27;</span>, <span class="hljs-string">&#x27;filter&#x27;</span>, <span class="hljs-string">&#x27;float&#x27;</span>, <span class="hljs-string">&#x27;format&#x27;</span>, <span class="hljs-string">&#x27;frozenset&#x27;</span>, <span class="hljs-string">&#x27;getattr&#x27;</span>, <span class="hljs-string">&#x27;globals&#x27;</span>, <span class="hljs-string">&#x27;hasattr&#x27;</span>, <span class="hljs-string">&#x27;hash&#x27;</span>, <span class="hljs-string">&#x27;help&#x27;</span>, <span class="hljs-string">&#x27;hex&#x27;</span>, <span class="hljs-string">&#x27;id&#x27;</span>, <span class="hljs-string">&#x27;input&#x27;</span>, <span class="hljs-string">&#x27;int&#x27;</span>, <span class="hljs-string">&#x27;isinstance&#x27;</span>, <span class="hljs-string">&#x27;issubclass&#x27;</span>, <span class="hljs-string">&#x27;iter&#x27;</span>, <span class="hljs-string">&#x27;len&#x27;</span>, <span class="hljs-string">&#x27;license&#x27;</span>, <span class="hljs-string">&#x27;list&#x27;</span>, <span class="hljs-string">&#x27;locals&#x27;</span>, <span class="hljs-string">&#x27;map&#x27;</span>, <span class="hljs-string">&#x27;max&#x27;</span>, <span class="hljs-string">&#x27;memoryview&#x27;</span>, <span class="hljs-string">&#x27;min&#x27;</span>, <span class="hljs-string">&#x27;next&#x27;</span>, <span class="hljs-string">&#x27;object&#x27;</span>, <span class="hljs-string">&#x27;oct&#x27;</span>, <span class="hljs-string">&#x27;open&#x27;</span>, <span class="hljs-string">&#x27;ord&#x27;</span>, <span class="hljs-string">&#x27;pow&#x27;</span>, <span class="hljs-string">&#x27;print&#x27;</span>, <span class="hljs-string">&#x27;property&#x27;</span>, <span class="hljs-string">&#x27;quit&#x27;</span>, <span class="hljs-string">&#x27;range&#x27;</span>, <span class="hljs-string">&#x27;repr&#x27;</span>, <span class="hljs-string">&#x27;reversed&#x27;</span>, <span class="hljs-string">&#x27;round&#x27;</span>, <span class="hljs-string">&#x27;set&#x27;</span>, <span class="hljs-string">&#x27;setattr&#x27;</span>, <span class="hljs-string">&#x27;slice&#x27;</span>, <span class="hljs-string">&#x27;sorted&#x27;</span>, <span class="hljs-string">&#x27;staticmethod&#x27;</span>, <span class="hljs-string">&#x27;str&#x27;</span>, <span class="hljs-string">&#x27;sum&#x27;</span>, <span class="hljs-string">&#x27;super&#x27;</span>, <span class="hljs-string">&#x27;tuple&#x27;</span>, <span class="hljs-string">&#x27;type&#x27;</span>, <span class="hljs-string">&#x27;vars&#x27;</span>, <span class="hljs-string">&#x27;zip&#x27;</span>]<br><span class="hljs-comment"># 方法二</span><br><span class="hljs-keyword">import</span> builtins<br><span class="hljs-built_in">dir</span>(builtins)<br><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">输出结果如下</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br>[<span class="hljs-string">&#x27;ArithmeticError&#x27;</span>, <span class="hljs-string">&#x27;AssertionError&#x27;</span>, <span class="hljs-string">&#x27;AttributeError&#x27;</span>, <span class="hljs-string">&#x27;BaseException&#x27;</span>, <span class="hljs-string">&#x27;BaseExceptionGroup&#x27;</span>, <span class="hljs-string">&#x27;BlockingIOError&#x27;</span>, <span class="hljs-string">&#x27;BrokenPipeError&#x27;</span>, <span class="hljs-string">&#x27;BufferError&#x27;</span>, <span class="hljs-string">&#x27;BytesWarning&#x27;</span>, <span class="hljs-string">&#x27;ChildProcessError&#x27;</span>, <span class="hljs-string">&#x27;ConnectionAbortedError&#x27;</span>, <span class="hljs-string">&#x27;ConnectionError&#x27;</span>, <span class="hljs-string">&#x27;ConnectionRefusedError&#x27;</span>, <span class="hljs-string">&#x27;ConnectionResetError&#x27;</span>, <span class="hljs-string">&#x27;DeprecationWarning&#x27;</span>, <span class="hljs-string">&#x27;EOFError&#x27;</span>, <span class="hljs-string">&#x27;Ellipsis&#x27;</span>, <span class="hljs-string">&#x27;EncodingWarning&#x27;</span>, <span class="hljs-string">&#x27;EnvironmentError&#x27;</span>, <span class="hljs-string">&#x27;Exception&#x27;</span>, <span class="hljs-string">&#x27;ExceptionGroup&#x27;</span>, <span class="hljs-string">&#x27;False&#x27;</span>, <span class="hljs-string">&#x27;FileExistsError&#x27;</span>, <span class="hljs-string">&#x27;FileNotFoundError&#x27;</span>, <span class="hljs-string">&#x27;FloatingPointError&#x27;</span>, <span class="hljs-string">&#x27;FutureWarning&#x27;</span>, <span class="hljs-string">&#x27;GeneratorExit&#x27;</span>, <span class="hljs-string">&#x27;IOError&#x27;</span>, <span class="hljs-string">&#x27;ImportError&#x27;</span>, <span class="hljs-string">&#x27;ImportWarning&#x27;</span>, <span class="hljs-string">&#x27;IndentationError&#x27;</span>, <span class="hljs-string">&#x27;IndexError&#x27;</span>, <span class="hljs-string">&#x27;InterruptedError&#x27;</span>, <span class="hljs-string">&#x27;IsADirectoryError&#x27;</span>, <span class="hljs-string">&#x27;KeyError&#x27;</span>, <span class="hljs-string">&#x27;KeyboardInterrupt&#x27;</span>, <span class="hljs-string">&#x27;LookupError&#x27;</span>, <span class="hljs-string">&#x27;MemoryError&#x27;</span>, <span class="hljs-string">&#x27;ModuleNotFoundError&#x27;</span>, <span class="hljs-string">&#x27;NameError&#x27;</span>, <span class="hljs-string">&#x27;None&#x27;</span>, <span class="hljs-string">&#x27;NotADirectoryError&#x27;</span>, <span class="hljs-string">&#x27;NotImplemented&#x27;</span>, <span class="hljs-string">&#x27;NotImplementedError&#x27;</span>, <span class="hljs-string">&#x27;OSError&#x27;</span>, <span class="hljs-string">&#x27;OverflowError&#x27;</span>, <span class="hljs-string">&#x27;PendingDeprecationWarning&#x27;</span>, <span class="hljs-string">&#x27;PermissionError&#x27;</span>, <span class="hljs-string">&#x27;ProcessLookupError&#x27;</span>, <span class="hljs-string">&#x27;RecursionError&#x27;</span>, <span class="hljs-string">&#x27;ReferenceError&#x27;</span>, <span class="hljs-string">&#x27;ResourceWarning&#x27;</span>, <span class="hljs-string">&#x27;RuntimeError&#x27;</span>, <span class="hljs-string">&#x27;RuntimeWarning&#x27;</span>, <span class="hljs-string">&#x27;StopAsyncIteration&#x27;</span>, <span class="hljs-string">&#x27;StopIteration&#x27;</span>, <span class="hljs-string">&#x27;SyntaxError&#x27;</span>, <span class="hljs-string">&#x27;SyntaxWarning&#x27;</span>, <span class="hljs-string">&#x27;SystemError&#x27;</span>, <span class="hljs-string">&#x27;SystemExit&#x27;</span>, <span class="hljs-string">&#x27;TabError&#x27;</span>, <span class="hljs-string">&#x27;TimeoutError&#x27;</span>, <span class="hljs-string">&#x27;True&#x27;</span>, <span class="hljs-string">&#x27;TypeError&#x27;</span>, <span class="hljs-string">&#x27;UnboundLocalError&#x27;</span>, <span class="hljs-string">&#x27;UnicodeDecodeError&#x27;</span>, <span class="hljs-string">&#x27;UnicodeEncodeError&#x27;</span>, <span class="hljs-string">&#x27;UnicodeError&#x27;</span>, <span class="hljs-string">&#x27;UnicodeTranslateError&#x27;</span>, <span class="hljs-string">&#x27;UnicodeWarning&#x27;</span>, <span class="hljs-string">&#x27;UserWarning&#x27;</span>, <span class="hljs-string">&#x27;ValueError&#x27;</span>, <span class="hljs-string">&#x27;Warning&#x27;</span>, <span class="hljs-string">&#x27;WindowsError&#x27;</span>, <span class="hljs-string">&#x27;ZeroDivisionError&#x27;</span>, <span class="hljs-string">&#x27;_&#x27;</span>, <span class="hljs-string">&#x27;__build_class__&#x27;</span>, <span class="hljs-string">&#x27;__debug__&#x27;</span>, <span class="hljs-string">&#x27;__doc__&#x27;</span>, <span class="hljs-string">&#x27;__import__&#x27;</span>, <span class="hljs-string">&#x27;__loader__&#x27;</span>, <span class="hljs-string">&#x27;__name__&#x27;</span>, <span class="hljs-string">&#x27;__package__&#x27;</span>, <span class="hljs-string">&#x27;__spec__&#x27;</span>, <span class="hljs-string">&#x27;abs&#x27;</span>, <span class="hljs-string">&#x27;aiter&#x27;</span>, <span class="hljs-string">&#x27;all&#x27;</span>, <span class="hljs-string">&#x27;anext&#x27;</span>, <span class="hljs-string">&#x27;any&#x27;</span>, <span class="hljs-string">&#x27;ascii&#x27;</span>, <span class="hljs-string">&#x27;bin&#x27;</span>, <span class="hljs-string">&#x27;bool&#x27;</span>, <span class="hljs-string">&#x27;breakpoint&#x27;</span>, <span class="hljs-string">&#x27;bytearray&#x27;</span>, <span class="hljs-string">&#x27;bytes&#x27;</span>, <span class="hljs-string">&#x27;callable&#x27;</span>, <span class="hljs-string">&#x27;chr&#x27;</span>, <span class="hljs-string">&#x27;classmethod&#x27;</span>, <span class="hljs-string">&#x27;compile&#x27;</span>, <span class="hljs-string">&#x27;complex&#x27;</span>, <span class="hljs-string">&#x27;copyright&#x27;</span>, <span class="hljs-string">&#x27;credits&#x27;</span>, <span class="hljs-string">&#x27;delattr&#x27;</span>, <span class="hljs-string">&#x27;dict&#x27;</span>, <span class="hljs-string">&#x27;dir&#x27;</span>, <span class="hljs-string">&#x27;divmod&#x27;</span>, <span class="hljs-string">&#x27;enumerate&#x27;</span>, <span class="hljs-string">&#x27;eval&#x27;</span>, <span class="hljs-string">&#x27;exec&#x27;</span>, <span class="hljs-string">&#x27;exit&#x27;</span>, <span class="hljs-string">&#x27;filter&#x27;</span>, <span class="hljs-string">&#x27;float&#x27;</span>, <span class="hljs-string">&#x27;format&#x27;</span>, <span class="hljs-string">&#x27;frozenset&#x27;</span>, <span class="hljs-string">&#x27;getattr&#x27;</span>, <span class="hljs-string">&#x27;globals&#x27;</span>, <span class="hljs-string">&#x27;hasattr&#x27;</span>, <span class="hljs-string">&#x27;hash&#x27;</span>, <span class="hljs-string">&#x27;help&#x27;</span>, <span class="hljs-string">&#x27;hex&#x27;</span>, <span class="hljs-string">&#x27;id&#x27;</span>, <span class="hljs-string">&#x27;input&#x27;</span>, <span class="hljs-string">&#x27;int&#x27;</span>, <span class="hljs-string">&#x27;isinstance&#x27;</span>, <span class="hljs-string">&#x27;issubclass&#x27;</span>, <span class="hljs-string">&#x27;iter&#x27;</span>, <span class="hljs-string">&#x27;len&#x27;</span>, <span class="hljs-string">&#x27;license&#x27;</span>, <span class="hljs-string">&#x27;list&#x27;</span>, <span class="hljs-string">&#x27;locals&#x27;</span>, <span class="hljs-string">&#x27;map&#x27;</span>, <span class="hljs-string">&#x27;max&#x27;</span>, <span class="hljs-string">&#x27;memoryview&#x27;</span>, <span class="hljs-string">&#x27;min&#x27;</span>, <span class="hljs-string">&#x27;next&#x27;</span>, <span class="hljs-string">&#x27;object&#x27;</span>, <span class="hljs-string">&#x27;oct&#x27;</span>, <span class="hljs-string">&#x27;open&#x27;</span>, <span class="hljs-string">&#x27;ord&#x27;</span>, <span class="hljs-string">&#x27;pow&#x27;</span>, <span class="hljs-string">&#x27;print&#x27;</span>, <span class="hljs-string">&#x27;property&#x27;</span>, <span class="hljs-string">&#x27;quit&#x27;</span>, <span class="hljs-string">&#x27;range&#x27;</span>, <span class="hljs-string">&#x27;repr&#x27;</span>, <span class="hljs-string">&#x27;reversed&#x27;</span>, <span class="hljs-string">&#x27;round&#x27;</span>, <span class="hljs-string">&#x27;set&#x27;</span>, <span class="hljs-string">&#x27;setattr&#x27;</span>, <span class="hljs-string">&#x27;slice&#x27;</span>, <span class="hljs-string">&#x27;sorted&#x27;</span>, <span class="hljs-string">&#x27;staticmethod&#x27;</span>, <span class="hljs-string">&#x27;str&#x27;</span>, <span class="hljs-string">&#x27;sum&#x27;</span>, <span class="hljs-string">&#x27;super&#x27;</span>, <span class="hljs-string">&#x27;tuple&#x27;</span>, <span class="hljs-string">&#x27;type&#x27;</span>, <span class="hljs-string">&#x27;vars&#x27;</span>, <span class="hljs-string">&#x27;zip&#x27;</span>]<br></code></pre></td></tr></table></figure><h4 id="关于输出函数"><a href="#关于输出函数" class="headerlink" title="关于输出函数"></a>关于输出函数</h4><p>print可以同时输出多个变量，多个变量输出时默认用空格隔开</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs py">name=<span class="hljs-string">&#x27;Tom&#x27;</span><br>age=<span class="hljs-number">8</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;name&quot;</span>,name,<span class="hljs-string">&quot;age&quot;</span>,age)<br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">输出结果</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br>name Tom age <span class="hljs-number">8</span><br></code></pre></td></tr></table></figure><p>但是如果需要将上述结果用指定的分隔符隔开，可以用print()里的sep参数来实现</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;name&quot;</span>,name,<span class="hljs-string">&quot;age&quot;</span>,age,sep=<span class="hljs-string">&#x27;,&#x27;</span>)<br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">输出结果</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br>name,Tom,age,<span class="hljs-number">8</span><br></code></pre></td></tr></table></figure><p>在默认情况下，print()函数输出完就会换行，如果不想让它换的话，可以用end参数进行设置</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-built_in">print</span>(name)<br><span class="hljs-built_in">print</span>(age)<br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">输出结果</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br>Tom<br><span class="hljs-number">8</span><br><span class="hljs-built_in">print</span>(name,end=<span class="hljs-string">&quot;&quot;</span>)<br><span class="hljs-built_in">print</span>(age,end=<span class="hljs-string">&quot;&quot;</span>)<br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">输出结果</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br>Tom8<br></code></pre></td></tr></table></figure><p>print的输出目标是通过参数file决定的，file参数的默认值为$sys.stdout$，它是代表了系统标准输出，也就是输出到屏幕上去。如果你想输出到指定文件中的话，就需要该边file的参数，使其输出到指定文件中，如：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs py">f = <span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;aa.txt&quot;</span>,<span class="hljs-string">&quot;w&quot;</span>) <span class="hljs-comment">#打开文件以便写入东西，如果没有该文件，会直接新建一个</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;aaaaaaaa&quot;</span>,file=f)<br>f.close()<br></code></pre></td></tr></table></figure><p><img src="/2023/04/15/Python%E2%80%94%E2%80%94%E5%8F%98%E9%87%8F%E5%92%8C%E7%AE%80%E5%8D%95%E7%B1%BB%E5%9E%8B/image-20230331231344315.png" alt="image-20230331231344315"></p><h4 id="获取用户输入"><a href="#获取用户输入" class="headerlink" title="获取用户输入"></a>获取用户输入</h4><p>input()函数用于向用户生成一条提示，然后获取输入内容，放入字符串中。</p><blockquote><p>也就是input()函数总是返回一个字符串</p></blockquote><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs py">msg = <span class="hljs-built_in">input</span>(<span class="hljs-string">&quot;input:&quot;</span>)<br><span class="hljs-built_in">input</span>:<span class="hljs-number">1025</span><span class="hljs-comment">#1025是输入的</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">type</span>(msg))<br><span class="hljs-built_in">print</span>(msg)<br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">输出结果</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br>&lt;<span class="hljs-keyword">class</span> <span class="hljs-string">&#x27;str&#x27;</span>&gt;<br><span class="hljs-number">1025</span><br></code></pre></td></tr></table></figure><h2 id="数值类型"><a href="#数值类型" class="headerlink" title="数值类型"></a>数值类型</h2><p><strong>python不允许除以0，不管是整型还是浮点型。</strong></p><h3 id="整型"><a href="#整型" class="headerlink" title="整型"></a>整型</h3><ol><li><p>python是不需要关心这个变量到底是int&#x2F;short&#x2F;long的，它可以正常处理很大的数。</p></li><li><p>Python的整形支持空值(None)</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs py">a = <span class="hljs-literal">None</span><br><span class="hljs-built_in">type</span>(a)<br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">输出结果</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br>&lt;<span class="hljs-keyword">class</span> <span class="hljs-string">&#x27;NoneType&#x27;</span>&gt;<br></code></pre></td></tr></table></figure></li><li><p>python的整型数值有四种表示方式</p><ol><li>十进制形式：就是正常的表现形式</li><li>二进制形式：以0b或0B开头的整数</li><li>八进制形式：以0o或0O开头的整数(第二个字母是大写或小写的O)</li><li>十六进制形式：以0x或0X开头的整数，其中10~15用(a-f表示，这里不区分大小写)</li></ol></li></ol><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs py">hex_value = <span class="hljs-number">0x13</span><span class="hljs-comment"># 16+3</span><br>bin_value = <span class="hljs-number">0b111</span><span class="hljs-comment"># 4+2+1</span><br>oct_value = <span class="hljs-number">0o54</span><span class="hljs-comment"># 5*8+4</span><br><br><span class="hljs-built_in">print</span>(hex_value,bin_value,oct_value)<br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">输出结果</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-number">19</span> <span class="hljs-number">7</span> <span class="hljs-number">44</span><br></code></pre></td></tr></table></figure><p>为了提高数值的可读性，Python3.x允许数值添加下划线作为分隔符，这些画线不会影响数值本身</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs py">one_million = <span class="hljs-number">1_000_000</span><br><span class="hljs-built_in">print</span>(one_million)<br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">输出结果</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-number">1000000</span><br></code></pre></td></tr></table></figure><h3 id="浮点型"><a href="#浮点型" class="headerlink" title="浮点型"></a>浮点型</h3><p>浮点数有两种表现形式：</p><ol><li>十进制形式：10000.0、0.41等</li><li>科学计数形式：5.12e2或5.12E2($5.12\times10^2$)</li></ol><p>但是只有浮点型才可以使用科学计数法，例如51200是整型，但是变成512E2就是浮点型</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs py">a = <span class="hljs-number">51200</span><br>b = <span class="hljs-number">512E2</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">type</span>(a),<span class="hljs-built_in">type</span>(b))<br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">输出结果</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br>&lt;<span class="hljs-keyword">class</span> <span class="hljs-string">&#x27;int&#x27;</span>&gt; &lt;<span class="hljs-keyword">class</span> <span class="hljs-string">&#x27;float&#x27;</span>&gt;<br></code></pre></td></tr></table></figure><h3 id="复数"><a href="#复数" class="headerlink" title="复数"></a>复数</h3><p>python可以支持复数，但是如果要对复数进行复杂计算的话，需要导入python的cmath模块</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs py">ac1 = <span class="hljs-number">3</span> + <span class="hljs-number">0.2j</span><br>ac2 = <span class="hljs-number">4</span> - <span class="hljs-number">0.1j</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">type</span>(ac1),<span class="hljs-built_in">type</span>(ac2))<br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">输出结果</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br>&lt;<span class="hljs-keyword">class</span> <span class="hljs-string">&#x27;complex&#x27;</span>&gt; &lt;<span class="hljs-keyword">class</span> <span class="hljs-string">&#x27;complex&#x27;</span>&gt;<br><br><span class="hljs-built_in">print</span>(ac1 + ac2)<br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">输出结果</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br>(<span class="hljs-number">7</span>+<span class="hljs-number">0.1j</span>)<br></code></pre></td></tr></table></figure><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-keyword">import</span> cmath<br>ac3 = cmath.sqrt(-<span class="hljs-number">1</span>)<span class="hljs-comment"># -1开平方根</span><br><span class="hljs-built_in">print</span>(ac3)<br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">输出结果</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-number">1j</span><br></code></pre></td></tr></table></figure><h3 id="转义字符"><a href="#转义字符" class="headerlink" title="转义字符"></a>转义字符</h3><p><img src="/2023/04/15/Python%E2%80%94%E2%80%94%E5%8F%98%E9%87%8F%E5%92%8C%E7%AE%80%E5%8D%95%E7%B1%BB%E5%9E%8B/image-20230401151805147.png" alt="image-20230401151805147"></p><h3 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h3><h4 id="转义字符-1"><a href="#转义字符-1" class="headerlink" title="转义字符"></a>转义字符</h4><p>如果字符串中有’或者”的话，需要进行一些特殊处理</p><ol><li>使用不同的引号将字符串括起来</li><li>对引号进行转义(\‘或\“)</li></ol><h4 id="拼接字符串"><a href="#拼接字符串" class="headerlink" title="拼接字符串"></a>拼接字符串</h4><p>如果直接将两个字符串紧挨在一起，Python会自动拼接</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs py">s1 = <span class="hljs-string">&quot;hello,&quot;</span> <span class="hljs-string">&#x27;Tom&#x27;</span><br><span class="hljs-built_in">print</span>(s1)<br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">输出结果</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br>hello,Tom<br></code></pre></td></tr></table></figure><p>但是上面只是一种特殊状况，如果要真正拼接的话，需要用加号(+)</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs py">s1 = <span class="hljs-string">&quot;The &quot;</span><br>s2 = <span class="hljs-string">&quot;light&quot;</span><br><span class="hljs-built_in">print</span>(s1 + s2)<br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">输出结果</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br>The light<br></code></pre></td></tr></table></figure><h4 id="拼接数值与字符串"><a href="#拼接数值与字符串" class="headerlink" title="拼接数值与字符串"></a>拼接数值与字符串</h4><p>Python不允许直接拼接数值和字符串，程序必须先把数值转换成字符串，这个时候有两个方式：</p><ol><li><p>str()——python的内置函数</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs py">s1 = <span class="hljs-string">&quot;Book price: &quot;</span><br>p = <span class="hljs-number">110</span><br><span class="hljs-built_in">print</span>(s1 + <span class="hljs-built_in">str</span>(p))<br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">输出结果</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br>Book price: <span class="hljs-number">110</span><br></code></pre></td></tr></table></figure></li><li><p>repr()——函数</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs py">s1 = <span class="hljs-string">&quot;Book price: &quot;</span><br>p = <span class="hljs-number">110</span><br><span class="hljs-built_in">print</span>(s1 + <span class="hljs-built_in">repr</span>(p))<br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">输出结果</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br>Book price: <span class="hljs-number">110</span><br></code></pre></td></tr></table></figure><p>补：它还有一个功能，以python表达式的形式来表示值。</p><blockquote><p>repr()可以将带引号的字符串输出，也就是python字符串的表达式，be like：s1&#x3D;“xxxx”，输出等于号后面那一串表达式</p></blockquote><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs py">s1 = <span class="hljs-string">&quot;I want to play&quot;</span><br><span class="hljs-built_in">print</span>(s1)<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">repr</span>(s1))<br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">输出结果</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br>I want to play<br><span class="hljs-string">&#x27;I want to play&#x27;</span><br></code></pre></td></tr></table></figure></li></ol><h4 id="长字符串"><a href="#长字符串" class="headerlink" title="长字符串"></a>长字符串</h4><p>长字符有两种方法：</p><ol><li><p>三个引号括起来然后赋值给变量</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs python">s1 = <span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">hahahaha</span><br><span class="hljs-string">wowowowo</span><br><span class="hljs-string">wuwuwuwu</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-built_in">print</span>(s1)<br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">输出结果</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br>hahahaha<br>wowowowo<br>wuwuwuwu<br></code></pre></td></tr></table></figure></li><li><p>用转义字符\来进行转义，转义后字符不会中断</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs py">s2 = <span class="hljs-string">&#x27;Good morning\</span><br><span class="hljs-string"> my little princess&#x27;</span><br><span class="hljs-built_in">print</span>(s2)<br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">输出结果</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br>Good morning my little princess<br></code></pre></td></tr></table></figure></li></ol><h4 id="原始字符串"><a href="#原始字符串" class="headerlink" title="原始字符串"></a>原始字符串</h4><p>如果不想对字符串内的\进行转义，可以通过在引号前加r，但是如果是‘仍然需要用斜杠转义，此时斜杠仍然会输出，但是如果不用斜杠又会出错</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs py">s1 = <span class="hljs-string">r&#x27;Let\&#x27;s go!&#x27;</span><br><span class="hljs-built_in">print</span>(s1)<br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">输出结果</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br>Let\<span class="hljs-string">&#x27;s go!</span><br></code></pre></td></tr></table></figure><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs py">s2 = <span class="hljs-string">r&#x27;G:\aaa\bbb\ccc&#x27;</span><br>s3 = <span class="hljs-string">&#x27;G:\\aaa\\bbb\\ccc&#x27;</span><br><span class="hljs-built_in">print</span>(s2)<br><span class="hljs-built_in">print</span>(s3)<br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">输出结果</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br>G:\aaa\bbb\ccc<br>G:\aaa\bbb\ccc<br></code></pre></td></tr></table></figure><h4 id="字节串"><a href="#字节串" class="headerlink" title="字节串"></a>字节串</h4><p>字节串由多个字节组成，以字节为单位进行操作。用字符串转换为字节串，有三种方式：</p><ol><li><p>都是ASCII字符的话，直接在引号前加b</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs py">b1 = <span class="hljs-string">b&#x27;hello&#x27;</span><br><span class="hljs-built_in">print</span>(b1)<br><span class="hljs-built_in">print</span>(b1[<span class="hljs-number">0</span>])<br><span class="hljs-built_in">print</span>(b1[<span class="hljs-number">1</span>])<br><span class="hljs-built_in">print</span>(b1[<span class="hljs-number">1</span>:<span class="hljs-number">4</span>])<br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">输出结果</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">b&#x27;hello&#x27;</span><br><span class="hljs-number">104</span><br><span class="hljs-number">101</span><br><span class="hljs-string">b&#x27;ell&#x27;</span><br></code></pre></td></tr></table></figure></li><li><p>调用bytes()函数</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs py">b2 = <span class="hljs-built_in">bytes</span>(<span class="hljs-string">&#x27;不想编程QAQ&#x27;</span>,encoding=<span class="hljs-string">&#x27;utf-8&#x27;</span>)<br><span class="hljs-built_in">print</span>(b2)<br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">输出结果</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">b&#x27;\xe4\xb8\x8d\xe6\x83\xb3\xe7\xbc\x96\xe7\xa8\x8bQAQ&#x27;</span><br></code></pre></td></tr></table></figure></li><li><p>调用encode()方法；decode()解码</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs py">b3 = <span class="hljs-string">&quot;不想编程QAQ&quot;</span>.encode(<span class="hljs-string">&#x27;utf-8&#x27;</span>)<br><span class="hljs-built_in">print</span>(b3)<br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">输出结果</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">b&#x27;\xe4\xb8\x8d\xe6\x83\xb3\xe7\xbc\x96\xe7\xa8\x8bQAQ&#x27;</span><br></code></pre></td></tr></table></figure><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs py">b5 = <span class="hljs-string">b&#x27;\xe4\xb8\x8d\xe6\x83\xb3\xe7\xbc\x96\xe7\xa8\x8bQAQ&#x27;</span><br>b5d = b5.decode(<span class="hljs-string">&#x27;utf-8&#x27;</span>)<br><span class="hljs-built_in">print</span>(b5d)<br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">输出结果</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br>不想编程QAQ<br></code></pre></td></tr></table></figure></li></ol><h3 id="字符串格式化"><a href="#字符串格式化" class="headerlink" title="字符串格式化"></a>字符串格式化</h3><h4 id="使用-符号来进行格式化"><a href="#使用-符号来进行格式化" class="headerlink" title="使用 % 符号来进行格式化"></a>使用 % 符号来进行格式化</h4><table><thead><tr><th>说明符</th><th>作用</th></tr></thead><tbody><tr><td>%s</td><td>字符串 (采用str()的显示)</td></tr><tr><td>%r</td><td>字符串 (采用repr()的显示)</td></tr><tr><td>%c</td><td>单个字符</td></tr><tr><td>%b</td><td>二进制</td></tr><tr><td>%d或%i</td><td>十进制</td></tr><tr><td>%o</td><td>八进制</td></tr><tr><td>%x</td><td>十六进制</td></tr><tr><td>%e</td><td>指数 基底为e</td></tr><tr><td>%E</td><td>指数 基底为E</td></tr><tr><td>%f或%F</td><td>浮点数</td></tr><tr><td>%g</td><td>指数(e)或浮点数 (根据显示长度)</td></tr><tr><td>%G</td><td>指数(e)或浮点数 (根据显示长度)</td></tr><tr><td>%%</td><td>字符”%”，显示百分号%</td></tr></tbody></table><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-string">&quot;%[(name)][flags][width][.precison]type&quot;</span> % 待格式化数据<br></code></pre></td></tr></table></figure><ul><li>(name)为命名</li><li>flags可以有+,-,’ ‘或0。+表示右对齐。-表示左对齐。’ ‘为一个空格，表示在正数的左侧填充一个空格，从而与负数对齐。0表示使用0填充。</li><li>width表示显示宽度</li><li>precision表示小数点后精度</li></ul><h4 id="使用format-函数"><a href="#使用format-函数" class="headerlink" title="使用format()函数"></a>使用format()函数</h4><table><thead><tr><th align="left">数字</th><th align="left">格式</th><th align="left">输出</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">3.1415926</td><td align="left">{:.2f}</td><td align="left">3.14</td><td align="left">保留小数点后两位</td></tr><tr><td align="left">3.1415926</td><td align="left">{:+.2f}</td><td align="left">+3.14</td><td align="left">带符号保留小数点后两位</td></tr><tr><td align="left">-1</td><td align="left">{:-.2f}</td><td align="left">-1.00</td><td align="left">带符号保留小数点后两位</td></tr><tr><td align="left">2.71828</td><td align="left">{:.0f}</td><td align="left">3</td><td align="left">不带小数</td></tr><tr><td align="left">5</td><td align="left">{:0&gt;2d}</td><td align="left">05</td><td align="left">数字补零 (填充左边, 宽度为2)</td></tr><tr><td align="left">5</td><td align="left">{:x&lt;4d}</td><td align="left">5xxx</td><td align="left">数字补x (填充右边, 宽度为4)</td></tr><tr><td align="left">10</td><td align="left">{:x&lt;4d}</td><td align="left">10xx</td><td align="left">数字补x (填充右边, 宽度为4)</td></tr><tr><td align="left">1000000</td><td align="left">{:,}</td><td align="left">1,000,000</td><td align="left">以逗号分隔的数字格式</td></tr><tr><td align="left">0.25</td><td align="left">{:.2%}</td><td align="left">25.00%</td><td align="left">百分比格式</td></tr><tr><td align="left">1000000000</td><td align="left">{:.2e}</td><td align="left">1.00e+09</td><td align="left">指数记法</td></tr><tr><td align="left">13</td><td align="left">{:&gt;10d}</td><td align="left">13</td><td align="left">右对齐 (默认, 宽度为10)</td></tr><tr><td align="left">13</td><td align="left">{:&lt;10d}</td><td align="left">13</td><td align="left">左对齐 (宽度为10)</td></tr><tr><td align="left">13</td><td align="left">{:^10d}</td><td align="left">13</td><td align="left">中间对齐 (宽度为10)</td></tr></tbody></table><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-string">&#x27;&#123;:b&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(<span class="hljs-number">11</span>)<span class="hljs-number">1011</span><br><span class="hljs-string">&#x27;&#123;:d&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(<span class="hljs-number">11</span>)<span class="hljs-number">11</span><br><span class="hljs-string">&#x27;&#123;:o&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(<span class="hljs-number">11</span>)<span class="hljs-number">13</span><br><span class="hljs-string">&#x27;&#123;:x&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(<span class="hljs-number">11</span>)b<br><span class="hljs-string">&#x27;&#123;:#x&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(<span class="hljs-number">11</span>)<span class="hljs-number">0xb</span><br><span class="hljs-string">&#x27;&#123;:#X&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(<span class="hljs-number">11</span>)<span class="hljs-number">0XB</span><br></code></pre></td></tr></table></figure><h4 id="截取字符串的一部分信息"><a href="#截取字符串的一部分信息" class="headerlink" title="截取字符串的一部分信息"></a>截取字符串的一部分信息</h4><p>截取字符串一部分可以通过以下方式：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs py">s = <span class="hljs-string">&#x27;suitable for infant&#x27;</span><br><span class="hljs-built_in">print</span>(s[<span class="hljs-number">2</span>])<span class="hljs-comment">#输出s中索引为2的(左数从0开始)</span><br><span class="hljs-built_in">print</span>(s[-<span class="hljs-number">4</span>])<span class="hljs-comment">#输出s中从右开始数索引为4的(倒数就是从1开始)</span><br><span class="hljs-built_in">print</span>(s[<span class="hljs-number">3</span>:<span class="hljs-number">5</span>])<span class="hljs-comment">#从索引3到索引5</span><br><span class="hljs-built_in">print</span>(s[<span class="hljs-number">3</span>:-<span class="hljs-number">5</span>])<span class="hljs-comment">#从索引3到倒数第5位</span><br><span class="hljs-built_in">print</span>(s[-<span class="hljs-number">6</span>:-<span class="hljs-number">3</span>])<span class="hljs-comment">#倒数第6位到倒数第3位</span><br><span class="hljs-built_in">print</span>(s[<span class="hljs-number">5</span>:])<span class="hljs-comment">#从索引5到结尾</span><br><span class="hljs-built_in">print</span>(s[-<span class="hljs-number">6</span>:])<span class="hljs-comment">#从倒数第6位到结尾</span><br><span class="hljs-built_in">print</span>(s[:<span class="hljs-number">5</span>])<span class="hljs-comment">#从开头到索引5</span><br><span class="hljs-built_in">print</span>(s[:-<span class="hljs-number">6</span>])<span class="hljs-comment">#从开头到倒数第6位</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">输出结果</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br>i<br>f<br>ta<br>table <span class="hljs-keyword">for</span> i<br>inf<br>ble <span class="hljs-keyword">for</span> infant<br>infant<br>suita<br>suitable <span class="hljs-keyword">for</span> <br></code></pre></td></tr></table></figure><p>也可以用in运算符判断是否包含某字串</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs py">s = <span class="hljs-string">&#x27;suitable for infant&#x27;</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;for&#x27;</span> <span class="hljs-keyword">in</span> s)<br><span class="hljs-built_in">print</span> (<span class="hljs-string">&#x27;addition&#x27;</span> <span class="hljs-keyword">in</span> s)<br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">输出结果</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-literal">True</span><br><span class="hljs-literal">False</span><br></code></pre></td></tr></table></figure><p>还可以通过len()来计算字符串长度</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs py">s = <span class="hljs-string">&#x27;suitable for infant&#x27;</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">len</span>(s))<br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">输出结果</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-number">19</span><br></code></pre></td></tr></table></figure><p>而且可以分别通过max()和min（）来获取字符串中的最大字符和最小字符</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs py">s = <span class="hljs-string">&#x27;suitable for infant&#x27;</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">max</span>(s))<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">min</span>(s))<br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">输出结果</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br>u<span class="hljs-comment">#最大是u</span><br> <span class="hljs-comment">#最小是空格</span><br></code></pre></td></tr></table></figure><h4 id="大小写"><a href="#大小写" class="headerlink" title="大小写"></a>大小写</h4><ul><li>title()：将每个单词的首字母改为大写</li><li>lower()：整个改小写</li><li>upper()：整个改大写</li></ul><h4 id="删除空白"><a href="#删除空白" class="headerlink" title="删除空白"></a>删除空白</h4><ul><li>strip()：删除字符串前后空白</li><li>lstrip()：删除左边空白</li><li>rstrip()：删除右边空白</li></ul><h4 id="查找与替换"><a href="#查找与替换" class="headerlink" title="查找与替换"></a>查找与替换</h4><ul><li>startswith()：判断是否以指定字符串开头</li><li>endswith()：判断是否以指定字符串结尾</li><li>find()：查找指定字串在字符串中出现的位置，找不到就返回-1</li><li>index()：查找指定字串在字符串中出现的位置，找不到会引发ValueError错误</li><li>replace()：使用指定子串替换字符串中的目标串</li><li>translate():使用指定的翻译映射表对字符串进行替换</li></ul><h4 id="分割与连接"><a href="#分割与连接" class="headerlink" title="分割与连接"></a>分割与连接</h4><ul><li>split()：按指定分割符分割多个短语</li><li>join()：将多个短语连接成字符串</li></ul><h2 id="运算符"><a href="#运算符" class="headerlink" title="运算符"></a>运算符</h2><h3 id="算术运算符"><a href="#算术运算符" class="headerlink" title="算术运算符"></a>算术运算符</h3><p>以下假设变量a为10，变量b为20：</p><p><img src="/2023/04/15/Python%E2%80%94%E2%80%94%E5%8F%98%E9%87%8F%E5%92%8C%E7%AE%80%E5%8D%95%E7%B1%BB%E5%9E%8B/v2-7412e563a3a13e5da95995b07a492910_1440w.png" alt="img"></p><p>运算符描述实例+加 - 两个对象相加a + b 输出结果 30-减 - 得到负数或是一个数减去另一个数a - b 输出结果 -10*乘 - 两个数相乘或是返回一个被重复若干次的字符串a * b 输出结果 200&#x2F;除 - x除以yb &#x2F; a 输出结果 2%取模 - 返回除法的余数b % a 输出结果 0<strong>幂 - 返回x的y次幂a</strong>b 为10的20次方， 输出结果 100000000000000000000&#x2F;&#x2F;取整除 - 返回商的整数部分9&#x2F;&#x2F;2 输出结果 4 , 9.0&#x2F;&#x2F;2.0 输出结果 4.0</p><p>以下实例演示了Python所有算术运算符的操作：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs text">#!/usr/bin/python<br># -*- coding: UTF-8 -*-<br><br>a = 21<br>b = 10<br>c = 0<br><br>c = a + b<br>print &quot;1 - c 的值为：&quot;, c<br><br>c = a - b<br>print &quot;2 - c 的值为：&quot;, c<br><br>c = a * b<br>print &quot;3 - c 的值为：&quot;, c<br><br>c = a / b<br>print &quot;4 - c 的值为：&quot;, c<br><br>c = a % b<br>print &quot;5 - c 的值为：&quot;, c<br><br># 修改变量 a 、b 、c<br>a = 2<br>b = 3<br>c = a**b<br>print &quot;6 - c 的值为：&quot;, c<br><br>a = 10<br>b = 5<br>c = a//b<br>print &quot;7 - c 的值为：&quot;, c<br></code></pre></td></tr></table></figure><p>以上实例输出结果：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs text">Line 1 - Value of c is 31<br>Line 2 - Value of c is 11<br>Line 3 - Value of c is 210<br>Line 4 - Value of c is 2<br>Line 5 - Value of c is 1<br>Line 6 - Value of c is 8<br>Line 7 - Value of c is 2<br></code></pre></td></tr></table></figure><h3 id="比较运算符"><a href="#比较运算符" class="headerlink" title="比较运算符"></a>比较运算符</h3><p>以下假设变量a为10，变量b为20：</p><p><img src="/2023/04/15/Python%E2%80%94%E2%80%94%E5%8F%98%E9%87%8F%E5%92%8C%E7%AE%80%E5%8D%95%E7%B1%BB%E5%9E%8B/v2-8d0bd8bbaae73f0e2daa981c03b76626_1440w.png" alt="img"></p><p>运算符描述实例&#x3D;&#x3D;等于 - 比较对象是否相等(a &#x3D;&#x3D; b) 返回 False。!&#x3D;不等于 - 比较两个对象是否不相等(a !&#x3D; b) 返回 true.&lt;&gt;不等于 - 比较两个对象是否不相等(a &lt;&gt; b) 返回 true。这个运算符类似 !&#x3D; 。&gt;大于 - 返回x是否大于y(a &gt; b) 返回 False。&lt;小于 - 返回x是否小于y。所有比较运算符返回1表示真，返回0表示假。这分别与特殊的变量True和False等价。注意，这些变量名的大写。(a &lt; b) 返回 true。&gt;&#x3D;大于等于 - 返回x是否大于等于y。(a &gt;&#x3D; b) 返回 False。&lt;&#x3D;小于等于 - 返回x是否小于等于y。(a &lt;&#x3D; b) 返回 true。</p><p>以下实例演示了Python所有比较运算符的操作：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><code class="hljs text">#!/usr/bin/python<br># -*- coding: UTF-8 -*-<br><br>a = 21<br>b = 10<br>c = 0<br><br>if ( a == b ):<br>   print &quot;1 - a 等于 b&quot;<br>else:<br>   print &quot;1 - a 不等于 b&quot;<br><br>if ( a != b ):<br>   print &quot;2 - a 不等于 b&quot;<br>else:<br>   print &quot;2 - a 等于 b&quot;<br><br>if ( a &lt;&gt; b ):<br>   print &quot;3 - a 不等于 b&quot;<br>else:<br>   print &quot;3 - a 等于 b&quot;<br><br>if ( a &lt; b ):<br>   print &quot;4 - a 小于 b&quot;<br>else:<br>   print &quot;4 - a 大于等于 b&quot;<br><br>if ( a &gt; b ):<br>   print &quot;5 - a 大于 b&quot;<br>else:<br>   print &quot;5 - a 小于等于 b&quot;<br><br># 修改变量 a 和 b 的值<br>a = 5;<br>b = 20;<br>if ( a &lt;= b ):<br>   print &quot;6 - a 小于等于 b&quot;<br>else:<br>   print &quot;6 - a 大于  b&quot;<br><br>if ( b &gt;= a ):<br>   print &quot;7 - b 大于等于 a&quot;<br>else:<br>   print &quot;7 - b 小于 a&quot;<br></code></pre></td></tr></table></figure><p>以上实例输出结果：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs text">1 - a 不等于 b<br>2 - a 不等于 b<br>3 - a 不等于 b<br>4 - a 大于等于 b<br>5 - a 大于 b<br>6 - a 小于等于 b<br>7 - b 大于等于 a<br></code></pre></td></tr></table></figure><h3 id="赋值运算符"><a href="#赋值运算符" class="headerlink" title="赋值运算符"></a>赋值运算符</h3><p>以下假设变量a为10，变量b为20：</p><p><img src="/2023/04/15/Python%E2%80%94%E2%80%94%E5%8F%98%E9%87%8F%E5%92%8C%E7%AE%80%E5%8D%95%E7%B1%BB%E5%9E%8B/v2-0abce6d38c9e612176f06470eb6fdd69_1440w.png" alt="img"></p><p>运算符描述实例&#x3D;简单的赋值运算符c &#x3D; a + b 将 a + b 的运算结果赋值为 c+&#x3D;加法赋值运算符c +&#x3D; a 等效于 c &#x3D; c + a-&#x3D;减法赋值运算符c -&#x3D; a 等效于 c &#x3D; c - a<code>*</code>&#x3D;乘法赋值运算符c <code>*</code>&#x3D; a 等效于 c &#x3D; c * a&#x2F;&#x3D;除法赋值运算符c &#x2F;&#x3D; a 等效于 c &#x3D; c &#x2F; a%&#x3D;取模赋值运算符c %&#x3D; a 等效于 c &#x3D; c % a<code>**</code>&#x3D;幂赋值运算符c <code>**</code>&#x3D; a 等效于 c &#x3D; c ** a&#x2F;&#x2F;&#x3D;取整除赋值运算符c &#x2F;&#x2F;&#x3D; a 等效于 c &#x3D; c &#x2F;&#x2F; a</p><p>以下实例演示了Python所有赋值运算符的操作：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs text">#!/usr/bin/python<br># -*- coding: UTF-8 -*-<br><br>a = 21<br>b = 10<br>c = 0<br><br>c = a + b<br>print &quot;1 - c 的值为：&quot;, c<br><br>c += a<br>print &quot;2 - c 的值为：&quot;, c<br><br>c *= a<br>print &quot;3 - c 的值为：&quot;, c<br><br>c /= a<br>print &quot;4 - c 的值为：&quot;, c<br><br>c = 2<br>c %= a<br>print &quot;5 - c 的值为：&quot;, c<br><br>c **= a<br>print &quot;6 - c 的值为：&quot;, c<br><br>c //= a<br>print &quot;7 - c 的值为：&quot;, c<br></code></pre></td></tr></table></figure><p>以上实例输出结果：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs text">1 - c 的值为： 31<br>2 - c 的值为： 52<br>3 - c 的值为： 1092<br>4 - c 的值为： 52<br>5 - c 的值为： 2<br>6 - c 的值为： 2097152<br>7 - c 的值为： 99864<br></code></pre></td></tr></table></figure><h3 id="位运算符"><a href="#位运算符" class="headerlink" title="位运算符"></a>位运算符</h3><p>按位运算符是把数字看作二进制来进行计算的。Python中的按位运算法则如下：</p><p><img src="/2023/04/15/Python%E2%80%94%E2%80%94%E5%8F%98%E9%87%8F%E5%92%8C%E7%AE%80%E5%8D%95%E7%B1%BB%E5%9E%8B/v2-84a7fa0293f318d61694e55c631392a2_1440w.png" alt="img"></p><p>运算符描述实例&amp;按位与运算符(a &amp; b) 输出结果 12 ，二进制解释： 0000 1100|按位或运算符(a | b) 输出结果 61 ，二进制解释： 0011 1101^按位异或运算符(a ^ b) 输出结果 49 ，二进制解释： 0011 0001<del>按位取反运算符(</del>a ) 输出结果 -61 ，二进制解释： 1100 0011， 在一个有符号二进制数的补码形式。&lt;&lt;左移动运算符a &lt;&lt; 2 输出结果 240 ，二进制解释： 1111 0000&gt;&gt;右移动运算符a &gt;&gt; 2 输出结果 15 ，二进制解释： 0000 1111</p><p>以下实例演示了Python所有位运算符的操作：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs text">#!/usr/bin/python<br># -*- coding: UTF-8 -*-<br><br>a = 60            # 60 = 0011 1100<br>b = 13            # 13 = 0000 1101<br>c = 0<br><br>c = a &amp; b;        # 12 = 0000 1100<br>print &quot;1 - c 的值为：&quot;, c<br><br>c = a | b;        # 61 = 0011 1101<br>print &quot;2 - c 的值为：&quot;, c<br><br>c = a ^ b;        # 49 = 0011 0001<br>print &quot;3 - c 的值为：&quot;, c<br><br>c = ~a;           # -61 = 1100 0011<br>print &quot;4 - c 的值为：&quot;, c<br><br>c = a &lt;&lt; 2;       # 240 = 1111 0000<br>print &quot;5 - c 的值为：&quot;, c<br><br>c = a &gt;&gt; 2;       # 15 = 0000 1111<br>print &quot;6 - c 的值为：&quot;, c<br></code></pre></td></tr></table></figure><p>以上实例输出结果：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs text">1 - c 的值为： 12<br>2 - c 的值为： 61<br>3 - c 的值为： 49<br>4 - c 的值为： -61<br>5 - c 的值为： 240<br>6 - c 的值为： 15<br></code></pre></td></tr></table></figure><h3 id="逻辑运算符"><a href="#逻辑运算符" class="headerlink" title="逻辑运算符"></a>逻辑运算符</h3><p>Python语言支持逻辑运算符，以下假设变量 a 为 10, b为 20:</p><p><img src="/2023/04/15/Python%E2%80%94%E2%80%94%E5%8F%98%E9%87%8F%E5%92%8C%E7%AE%80%E5%8D%95%E7%B1%BB%E5%9E%8B/v2-dd3a76ef5d9aaaf8526c3930862dc6af_1440w.png" alt="img"></p><p>运算符逻辑表达式描述实例andx and y布尔”与” - 如果 x 为 False，x and y 返回 False，否则它返回 y 的计算值。(a and b) 返回 20。orx or y布尔”或” - 如果 x 是非 0，它返回 x 的值，否则它返回 y 的计算值。(a or b) 返回 10。notnot x布尔”非” - 如果 x 为 True，返回 False 。如果 x 为 False，它返回 True。not(a and b) 返回 False</p><p>以上实例输出结果：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs text">#!/usr/bin/python<br># -*- coding: UTF-8 -*-<br><br>a = 10<br>b = 20<br><br>if ( a and b ):<br>   print &quot;1 - 变量 a 和 b 都为 true&quot;<br>else:<br>   print &quot;1 - 变量 a 和 b 有一个不为 true&quot;<br><br>if ( a or b ):<br>   print &quot;2 - 变量 a 和 b 都为 true，或其中一个变量为 true&quot;<br>else:<br>   print &quot;2 - 变量 a 和 b 都不为 true&quot;<br><br># 修改变量 a 的值<br>a = 0<br>if ( a and b ):<br>   print &quot;3 - 变量 a 和 b 都为 true&quot;<br>else:<br>   print &quot;3 - 变量 a 和 b 有一个不为 true&quot;<br><br>if ( a or b ):<br>   print &quot;4 - 变量 a 和 b 都为 true，或其中一个变量为 true&quot;<br>else:<br>   print &quot;4 - 变量 a 和 b 都不为 true&quot;<br><br>if not( a and b ):<br>   print &quot;5 - 变量 a 和 b 都为 false，或其中一个变量为 false&quot;<br>else:<br>   print &quot;5 - 变量 a 和 b 都为 true&quot;<br></code></pre></td></tr></table></figure><p>以上实例输出结果：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs text">1 - 变量 a 和 b 都为 true<br>2 - 变量 a 和 b 都为 true，或其中一个变量为 true<br>3 - 变量 a 和 b 有一个不为 true<br>4 - 变量 a 和 b 都为 true，或其中一个变量为 true<br>5 - 变量 a 和 b 都为 false，或其中一个变量为 false<br></code></pre></td></tr></table></figure><h3 id="成员运算符"><a href="#成员运算符" class="headerlink" title="成员运算符"></a>成员运算符</h3><p>除了以上的一些运算符之外，Python还支持成员运算符，测试实例中包含了一系列的成员，包括字符串，列表或元组。</p><p><img src="/2023/04/15/Python%E2%80%94%E2%80%94%E5%8F%98%E9%87%8F%E5%92%8C%E7%AE%80%E5%8D%95%E7%B1%BB%E5%9E%8B/v2-548f91ece05e3088c300ea3881e5125c_1440w.png" alt="img"></p><p>运算符描述实例in如果在指定的序列中找到值返回True，否则返回False。x 在 y序列中 , 如果x在y序列中返回True。not in如果在指定的序列中没有找到值返回True，否则返回False。x 不在 y序列中 , 如果x不在y序列中返回True。</p><p>以下实例演示了Python所有成员运算符的操作：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs text">#!/usr/bin/python<br># -*- coding: UTF-8 -*-<br><br>a = 10<br>b = 20<br>list = [1, 2, 3, 4, 5 ];<br><br>if ( a in list ):<br>   print &quot;1 - 变量 a 在给定的列表中 list 中&quot;<br>else:<br>   print &quot;1 - 变量 a 不在给定的列表中 list 中&quot;<br><br>if ( b not in list ):<br>   print &quot;2 - 变量 b 不在给定的列表中 list 中&quot;<br>else:<br>   print &quot;2 - 变量 b 在给定的列表中 list 中&quot;<br><br># 修改变量 a 的值<br>a = 2<br>if ( a in list ):<br>   print &quot;3 - 变量 a 在给定的列表中 list 中&quot;<br>else:<br>   print &quot;3 - 变量 a 不在给定的列表中 list 中&quot;<br></code></pre></td></tr></table></figure><p>以上实例输出结果：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs text">1 - 变量 a 不在给定的列表中 list 中<br>2 - 变量 b 不在给定的列表中 list 中<br>3 - 变量 a 在给定的列表中 list 中<br></code></pre></td></tr></table></figure><h3 id="身份运算符"><a href="#身份运算符" class="headerlink" title="身份运算符"></a>身份运算符</h3><p>身份运算符用于比较两个对象的存储单元</p><p><img src="/2023/04/15/Python%E2%80%94%E2%80%94%E5%8F%98%E9%87%8F%E5%92%8C%E7%AE%80%E5%8D%95%E7%B1%BB%E5%9E%8B/v2-9ed97ab722460b1a818446e3abb59c2c_1440w.png" alt="img"></p><p>运算符描述实例isis是判断两个标识符是不是引用自一个对象x is y, 如果 id(x) 等于 id(y) ,<strong>is</strong>返回结果 1is notis not是判断两个标识符是不是引用自不同对象x is not y, 如果 id(x) 不等于 id(y).<strong>is not</strong>返回结果 1</p><p>以下实例演示了Python所有身份运算符的操作：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs text">#!/usr/bin/python<br># -*- coding: UTF-8 -*-<br><br>a = 20<br>b = 20<br><br>if ( a is b ):<br>   print &quot;1 - a 和 b 有相同的标识&quot;<br>else:<br>   print &quot;1 - a 和 b 没有相同的标识&quot;<br><br>if ( id(a) == id(b) ):<br>   print &quot;2 - a 和 b 有相同的标识&quot;<br>else:<br>   print &quot;2 - a 和 b 没有相同的标识&quot;<br><br># 修改变量 b 的值<br>b = 30<br>if ( a is b ):<br>   print &quot;3 - a 和 b 有相同的标识&quot;<br>else:<br>   print &quot;3 - a 和 b 没有相同的标识&quot;<br><br>if ( a is not b ):<br>   print &quot;4 - a 和 b 没有相同的标识&quot;<br>else:<br>   print &quot;4 - a 和 b 有相同的标识&quot;<br></code></pre></td></tr></table></figure><p>以上实例输出结果：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs text">1 - a 和 b 有相同的标识<br>2 - a 和 b 有相同的标识<br>3 - a 和 b 没有相同的标识<br>4 - a 和 b 没有相同的标识<br></code></pre></td></tr></table></figure><h3 id="运算符优先级"><a href="#运算符优先级" class="headerlink" title="运算符优先级"></a>运算符优先级</h3><p>以下表格列出了从最高到最低优先级的所有运算符：</p><p><img src="/2023/04/15/Python%E2%80%94%E2%80%94%E5%8F%98%E9%87%8F%E5%92%8C%E7%AE%80%E5%8D%95%E7%B1%BB%E5%9E%8B/v2-bb32caff48ad4376524c53f45170a7ab_1440w.webp" alt="img"></p><p>运算符描述<code>**</code>指数 (最高优先级)~ + -按位翻转, 一元加号和减号 (最后两个的方法名为 +@ 和 -@)* &#x2F; % &#x2F;&#x2F;乘，除，取模和取整除+ -加法减法&gt;&gt; &lt;&lt;右移，左移运算符&amp;位 ‘AND’^ |位运算符&lt;&#x3D; &lt; &gt; &gt;&#x3D;比较运算符&lt;&gt; &#x3D;&#x3D; !&#x3D;等于运算符&#x3D; %&#x3D; &#x2F;&#x3D; &#x2F;&#x2F;&#x3D; -&#x3D; +&#x3D; *&#x3D; **&#x3D;赋值运算符is is not身份运算符in not in成员运算符not or and逻辑运算符</p><p>以下实例演示了Python所有运算符优先级的操作：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs text">#!/usr/bin/python<br># -*- coding: UTF-8 -*-<br><br>a = 20<br>b = 10<br>c = 15<br>d = 5<br>e = 0<br><br>e = (a + b) * c / d       #( 30 * 15 ) / 5<br>print &quot;(a + b) * c / d 运算结果为：&quot;,  e<br><br>e = ((a + b) * c) / d     # (30 * 15 ) / 5<br>print &quot;((a + b) * c) / d 运算结果为：&quot;,  e<br><br>e = (a + b) * (c / d);    # (30) * (15/5)<br>print &quot;(a + b) * (c / d) 运算结果为：&quot;,  e<br><br>e = a + (b * c) / d;      #  20 + (150/5)<br>print &quot;a + (b * c) / d 运算结果为：&quot;,  e<br></code></pre></td></tr></table></figure><p>以上实例输出结果：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs text">(a + b) * c / d 运算结果为： 90<br>((a + b) * c) / d 运算结果为： 90<br>(a + b) * (c / d) 运算结果为： 90<br>a + (b * c) / d 运算结果为： 50<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>python</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>51单片机</title>
    <link href="/2023/04/15/51%E5%8D%95%E7%89%87%E6%9C%BA/"/>
    <url>/2023/04/15/51%E5%8D%95%E7%89%87%E6%9C%BA/</url>
    
    <content type="html"><![CDATA[<h1 id="51单片机"><a href="#51单片机" class="headerlink" title="51单片机"></a>51单片机</h1><h2 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span> a; <span class="hljs-comment">//e.g 2,10</span><br><span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> f;<br><span class="hljs-comment">//unsigned int太长了，一般把它写成别名，如下两种写法</span><br><span class="hljs-keyword">typedef</span> <span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> unint;<br><span class="hljs-meta">#<span class="hljs-keyword">define</span> u16 unsigned unint</span><br><br><span class="hljs-type">char</span> <span class="hljs-type">char</span> b; <span class="hljs-comment">//e.g &#x27;c&#x27;</span><br><span class="hljs-type">unsigned</span> <span class="hljs-type">char</span> r;<br><br><span class="hljs-type">float</span> d; <span class="hljs-comment">//e.g 3.4,2,3.66</span><br><span class="hljs-type">double</span> y;<br><br><span class="hljs-type">bool</span> e;<span class="hljs-comment">// 0,1</span><br><br>sbit led = P1^<span class="hljs-number">0</span>; <span class="hljs-comment">//定义led为P1.0</span><br><span class="hljs-comment">//sbit [位变量名] = [位地址]这个是位定义(方便操作端口)</span><br><br>sfr P0 = <span class="hljs-number">0x80</span>;<br><span class="hljs-comment">//sfr [特殊功能寄存器名] = [绝对地址]直接指定八位特殊功能寄存器的直接地址</span><br><br>sfr16 DPTR = <span class="hljs-number">0x82</span>;<br><span class="hljs-comment">//sfr16 [16位特殊功能寄存器名] = [绝对地址的低端地址]定义16位的特殊功能寄存器的低端地址</span><br></code></pre></td></tr></table></figure><h2 id="延时函数"><a href="#延时函数" class="headerlink" title="延时函数"></a>延时函数</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">void</span> <span class="hljs-title function_">delay_ms</span><span class="hljs-params">(<span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> num)</span>&#123;<br>    <span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> x,y;<span class="hljs-comment">//这里可以提前将unsigned int 取个别名，方便日后书写</span><br>    <span class="hljs-keyword">for</span>(x = num ; x &gt; <span class="hljs-number">0</span> ; x--)<br>        <span class="hljs-keyword">for</span>(y = <span class="hljs-number">110</span>; y &gt; <span class="hljs-number">0</span>; y--);<span class="hljs-comment">//执行110次空语句的时间大约为1ms</span><br>&#125;<br></code></pre></td></tr></table></figure><h2 id="流水灯主要函数"><a href="#流水灯主要函数" class="headerlink" title="流水灯主要函数"></a>流水灯主要函数</h2><p>要用到的材料（Proteus上）</p><p>AT89C51、LED-RED、随意一个电阻、VCC</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;reg51.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;intrins.h&gt;</span></span><br><span class="hljs-comment">//方式一:直接初值之后 左移 与1做或运算</span><br><span class="hljs-type">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span>&#123;<br>    <span class="hljs-type">int</span> i;<br>    P0 = <span class="hljs-number">0xfe</span>;<span class="hljs-comment">//赋初值 1111 1110 -&gt; D1亮其他都灭，取决于你把二极管跟哪部分相连(看你连的那个位置的最开头两个字符是啥)</span><br>    <span class="hljs-keyword">while</span>(<span class="hljs-number">1</span>)&#123;<br>        <span class="hljs-keyword">for</span>(i = <span class="hljs-number">0</span>;i &lt; <span class="hljs-number">8</span>;i++)&#123;<br>            delay_ms(<span class="hljs-number">500</span>); <span class="hljs-comment">//用上面的延时函数</span><br>            P0 = (P0 &lt;&lt; <span class="hljs-number">1</span>) | <span class="hljs-number">0x01</span> ; <span class="hljs-comment">//让0左移一位，但是移完了还需要让后面的0变回1,那么就需要或上一个1</span><br>            <span class="hljs-comment">//为什么？ e.g: 1111 1110 -&gt; 1111 1100 | 0000 0001 = 1111 1101 -&gt; 1111 1010 | 0000 0001 = 1111 1011  </span><br>        &#125;<br>    &#125;<br>&#125;<br><span class="hljs-comment">//方式二: 进行取反，即 1111 1110 -&gt; -0000 0001 然后进行左移 然后再取反 正好就是想要的结果</span><br><span class="hljs-type">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span>&#123;<br>    <span class="hljs-type">int</span> i;<br>    P0 = <span class="hljs-number">0xfe</span>;<span class="hljs-comment">//赋初值 1111 1110 -&gt; D1亮 其他都灭</span><br>    <span class="hljs-keyword">while</span>(<span class="hljs-number">1</span>)&#123;<br>        <span class="hljs-keyword">for</span>(i = <span class="hljs-number">0</span>;i &lt; <span class="hljs-number">8</span>;i++)&#123;<br>            delay_ms(<span class="hljs-number">500</span>); <span class="hljs-comment">//用上面的延时函数</span><br>            P0 = -(-P0 &lt;&lt; <span class="hljs-number">1</span>) ;  <span class="hljs-comment">// 1111 1110 -&gt; -0000 0001 -&gt; -0000 0010 -&gt; 1111 1101</span><br>        &#125;<br>    &#125;<br>&#125;<br><span class="hljs-comment">//方式三：循环左位移，用到函数_crol_([端口],[移动位数])，这个函数头文件为intrins.h,函数返回值就是移位完成后的数字</span><br><span class="hljs-type">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span>&#123;<br>    P0 = <span class="hljs-number">0xfe</span>;<span class="hljs-comment">//赋初值 1111 1110 -&gt; D1亮 其他都灭</span><br>    <span class="hljs-keyword">while</span>(<span class="hljs-number">1</span>)&#123;<br>        delay_ms(<span class="hljs-number">500</span>);<br>        P0 = _crol_(P0,<span class="hljs-number">1</span>); <span class="hljs-comment">//循环左移一位</span><br>    &#125;<br>&#125;<br><span class="hljs-comment">//补充 循环右移是_cror_([端口],[移动位数])</span><br></code></pre></td></tr></table></figure><h2 id="数码管显示"><a href="#数码管显示" class="headerlink" title="数码管显示"></a>数码管显示</h2><p><em>需要进行测试的话，可以再Proteus上输入logic，然后选相应的</em></p><h3 id="单位数码管"><a href="#单位数码管" class="headerlink" title="单位数码管"></a>单位数码管</h3><p>要用到的材料（Proteus上）</p><p>AT89C51、7SEG-COM-<strong>C</strong>AT-XXX(阴极)，RESPACK-8(上拉电阻，如果选的是7SEG-COM-<strong>A</strong>N-XXX(阳极)则需要这个)</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;reg51.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> unchar unsigned char</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> unint unsigned int</span><br><br>unchar code dis_tab[] = &#123;<span class="hljs-number">0x40</span>,<span class="hljs-number">0x79</span>,<span class="hljs-number">0x24</span>,<span class="hljs-number">0x30</span>,<span class="hljs-number">0x19</span>,<span class="hljs-number">0x12</span>,<span class="hljs-number">0x02</span>,<span class="hljs-number">0x78</span>,<span class="hljs-number">0x00</span>,<span class="hljs-number">0x10</span>&#125;;<span class="hljs-comment">//已经定义了内容，所以[]里可以不写</span><br><span class="hljs-comment">//分别就是0，1，2，3，4，5，6，7，8，9的码值</span><br><span class="hljs-comment">//加code是因为要将数组存到ROM里，如果不加默认存到RAM，而RAM内存太小了</span><br><span class="hljs-type">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span>&#123;<br>    <span class="hljs-type">int</span> i = <span class="hljs-number">0</span>;<br>    P3 = <span class="hljs-number">0xff</span>;<span class="hljs-comment">//都为1，就处于了高电平，不会显示数字;这里我接了P3口，接的别的口记得改名字</span><br>    <span class="hljs-keyword">while</span>(<span class="hljs-number">1</span>)&#123;<br>        delay_ms(<span class="hljs-number">500</span>);<span class="hljs-comment">//延时函数上面有</span><br>        P3 = dis_tab[i];<span class="hljs-comment">//遍历0-9</span><br>        i++;<br>        i = i&lt;<span class="hljs-number">10</span> ? i%<span class="hljs-number">10</span> : <span class="hljs-number">0</span>;<span class="hljs-comment">//小于10取i，等于10取0</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="多位数码管"><a href="#多位数码管" class="headerlink" title="多位数码管"></a>多位数码管</h3><p>多位数码管就涉及到了<strong>位选</strong>和<strong>段选</strong>：</p><p>位选-&gt;选位置，段选-&gt;选数字</p><p>要用到的材料（Proteus上）</p><p>AT89C51、7SEG-MPX4-CC-BLUE(阴极)，RESPACK-8</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;reg51.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> unchar unsigned char</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> unint unsigned int</span><br><br>unchar code seg_tab[] = &#123;<span class="hljs-number">0x40</span>,<span class="hljs-number">0x79</span>,<span class="hljs-number">0x24</span>,<span class="hljs-number">0x30</span>,<span class="hljs-number">0x19</span>,<span class="hljs-number">0x12</span>,<span class="hljs-number">0x02</span>,<span class="hljs-number">0x78</span>,<span class="hljs-number">0x00</span>,<span class="hljs-number">0x10</span>&#125;;<br><span class="hljs-comment">//分别就是0，1，2，3，4，5，6，7，8，9的码值</span><br><span class="hljs-comment">//加code是因为要将数组存到ROM里，如果不加默认存到RAM，而RAM内存太小了</span><br><span class="hljs-type">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span>&#123;<br>    unint count = <span class="hljs-number">0</span>;<span class="hljs-comment">//计数 0-90</span><br>    unint shiwei,gewei,i;<br>    <span class="hljs-keyword">while</span>(<span class="hljs-number">1</span>)&#123;<br>        shiwei = count / <span class="hljs-number">10</span>;<br>        gewei = count % <span class="hljs-number">10</span>;<br>        <span class="hljs-keyword">for</span>(i = <span class="hljs-number">100</span>; i &gt; <span class="hljs-number">0</span>; i--)&#123;<br>            delay_ms(<span class="hljs-number">2</span>);<br>            P3 = <span class="hljs-number">0x01</span>;<span class="hljs-comment">//高位位选</span><br>            P2 = seg_tab[shiwei];<br>            <br>            delay_ms(<span class="hljs-number">2</span>);<br>            P3 = <span class="hljs-number">0x02</span>;<span class="hljs-comment">//高位位选</span><br>            P2 = seg_tab[gewei];<br>        &#125;<br>        count++;<br>        <span class="hljs-keyword">if</span>(count == <span class="hljs-number">90</span>) count = <span class="hljs-number">0</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="独立按键"><a href="#独立按键" class="headerlink" title="独立按键"></a>独立按键</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;reg51.h&gt;</span></span><br>sbit key = P2^<span class="hljs-number">0</span>;<br>sbit led = P3^<span class="hljs-number">0</span>;<br><span class="hljs-type">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span>&#123;<br>    <span class="hljs-keyword">while</span>(<span class="hljs-number">1</span>)&#123;<br>        <span class="hljs-keyword">if</span>(key == <span class="hljs-number">0</span>)&#123;<span class="hljs-comment">//查询P2.0引脚是否为0，0则证明被按下</span><br>            delay_ms(<span class="hljs-number">10</span>);<span class="hljs-comment">//防止是因为抖动而判断的0</span><br>            <span class="hljs-keyword">if</span>(key == <span class="hljs-number">0</span>)&#123;<span class="hljs-comment">//再次查询，确定是否真的被按下</span><br>                <span class="hljs-comment">//按键后要干的事情</span><br>                led = <span class="hljs-number">0</span>;<span class="hljs-comment">//这里是让P3.0那连接的LED-RED亮</span><br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="中断系统"><a href="#中断系统" class="headerlink" title="中断系统"></a>中断系统</h2><h3 id="定时计数器中断"><a href="#定时计数器中断" class="headerlink" title="定时计数器中断"></a>定时计数器中断</h3><p>​触发信号：</p><p>​容器：寄存器TH0，TL0（8位）（这俩可以组成一个16位的寄存器）</p><p>​表示时间：脉冲</p><p>​定时效果：给容器赋初值</p><p>​中断响应：服务函数</p><h3 id="AT89S51的中断源"><a href="#AT89S51的中断源" class="headerlink" title="AT89S51的中断源"></a>AT89S51的中断源</h3><table><thead><tr><th>名称</th><th>中断标志</th><th>中断矢量</th><th>编号</th></tr></thead><tbody><tr><td>外部中断0(INT0^)</td><td>IE0</td><td>0003H</td><td>0</td></tr><tr><td>计时&#x2F;计数0(T0)</td><td>IF0</td><td>000BH</td><td>1</td></tr><tr><td>外部中断1(INT1^)</td><td>IE1</td><td>00013H</td><td>2</td></tr><tr><td>计时&#x2F;计数1(T1)</td><td>IF1</td><td>0001BH</td><td>3</td></tr><tr><td>串口中断</td><td>接受 RI &#x2F; 发送 TI</td><td>0023H</td><td>4</td></tr></tbody></table><h3 id="原理图"><a href="#原理图" class="headerlink" title="原理图"></a>原理图</h3><p><img src="/2023/04/15/51%E5%8D%95%E7%89%87%E6%9C%BA/image-20220606155119262-1681570106224-1.png" alt="image-20220606155119262"></p><h3 id="内部中断代码框架"><a href="#内部中断代码框架" class="headerlink" title="内部中断代码框架"></a>内部中断代码框架</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;reg51.h&gt;</span></span><br><span class="hljs-keyword">typedef</span> <span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> unint;<br><span class="hljs-type">void</span> <span class="hljs-title function_">IniTimer0</span><span class="hljs-params">()</span>&#123;<br>    TMOD = <span class="hljs-number">0x01</span>;<span class="hljs-comment">//设置工作模式</span><br>    TH0 = <span class="hljs-number">0x0FF</span>;<br>    TH0 = <span class="hljs-number">0X9C</span>;<span class="hljs-comment">//设置初值(决定你的定时时间)这里100us</span><br>    <span class="hljs-comment">//定时器最大上限是2^16us(65536),</span><br>    EA = <span class="hljs-number">1</span>;<span class="hljs-comment">//打开总中断</span><br>    ET0 = <span class="hljs-number">1</span>;<span class="hljs-comment">//打开定时计数器0(T0)中断</span><br>    PT0 = <span class="hljs-number">1</span>;<span class="hljs-comment">//设置高优先级</span><br>    TR0 = <span class="hljs-number">1</span>;<span class="hljs-comment">//开始定时</span><br>&#125;<br><br>sbit led = P1^<span class="hljs-number">0</span>;<br>unint count;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span>&#123;<br>    IniTimer0();<br>    led = <span class="hljs-number">1</span>;<br>    count =<span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">while</span>(<span class="hljs-number">1</span>);<br>&#125;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">Timer0Interrupt</span><span class="hljs-params">()</span> interrupt 1 &#123; <span class="hljs-comment">//这里的数字看上面的表格</span><br>    TH0 = <span class="hljs-number">0x0FF</span>;<br>    TL0 = <span class="hljs-number">0x9C</span>;<span class="hljs-comment">//重新赋初值</span><br>    <span class="hljs-comment">//中断后想干的事情</span><br>    count ++;<br>    <span class="hljs-keyword">if</span>(count == <span class="hljs-number">5000</span>)&#123;<span class="hljs-comment">//延时500ms</span><br>        count = <span class="hljs-number">0</span>;<br>        led = ~led;<span class="hljs-comment">//取反</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="外部中断代码框架"><a href="#外部中断代码框架" class="headerlink" title="外部中断代码框架"></a>外部中断代码框架</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;reg51.h&gt;</span></span><br><span class="hljs-keyword">typedef</span> <span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> unint;<br>sbit led = P1^<span class="hljs-number">0</span>;<br>sbit key = P3^<span class="hljs-number">2</span>;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">ex0init</span><span class="hljs-params">()</span>&#123;<br>    EA = <span class="hljs-number">1</span>;<span class="hljs-comment">//打开总中断</span><br>    ET0 = <span class="hljs-number">1</span>;<span class="hljs-comment">//打开定时计数器0(T0)中断</span><br>&#125;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span>&#123;<br>    ex0int();<span class="hljs-comment">//T0初始化</span><br>    led = <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">while</span>(<span class="hljs-number">1</span>);<br>&#125;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">Ex0Interrupt</span><span class="hljs-params">()</span> interrupt 0 &#123;<span class="hljs-comment">//查上面那个表</span><br>    led = ~led;<span class="hljs-comment">//取反</span><br>    <span class="hljs-comment">//实现效果是按一次亮，再一次灭，灯在P1.0，按键在P3.2</span><br>    <span class="hljs-keyword">while</span>(!key); <span class="hljs-comment">//在中断函数堵塞，直到你放开按键后才跳出去</span><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="外部中断的两种形式"><a href="#外部中断的两种形式" class="headerlink" title="外部中断的两种形式"></a>外部中断的两种形式</h3><h4 id="下降沿触发"><a href="#下降沿触发" class="headerlink" title="下降沿触发"></a>下降沿触发</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;reg51.h&gt;</span></span><br>sbit led = P0^<span class="hljs-number">0</span>;<br><span class="hljs-type">void</span> <span class="hljs-title function_">int0_isr</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span> interrupt 0<br>&#123;<br>led = !led;<br>&#125;<br><span class="hljs-type">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span><br>&#123;<br>EA = <span class="hljs-number">1</span>;<br>EX0 = <span class="hljs-number">1</span>;<br>IT0 = <span class="hljs-number">1</span>;<br><span class="hljs-keyword">while</span>(<span class="hljs-number">1</span>)<br>&#123;<br><br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="低电平触发"><a href="#低电平触发" class="headerlink" title="低电平触发"></a>低电平触发</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;reg51.h&gt;</span></span><br>sbit led = P0^<span class="hljs-number">0</span>;<br><span class="hljs-type">void</span> <span class="hljs-title function_">int0_isr</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span> interrupt 0<br>&#123;<br>led = !led;<br><span class="hljs-keyword">while</span>(P3 == <span class="hljs-number">0xfb</span>);<br>&#125;<br><span class="hljs-type">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span><br>&#123;<br>EA = <span class="hljs-number">1</span>;<br>EX0 = <span class="hljs-number">1</span>;<br>IT0 = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">while</span>(<span class="hljs-number">1</span>);<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>硬件</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>汇编入门</title>
    <link href="/2022/05/28/%E6%B1%87%E7%BC%96%E5%85%A5%E9%97%A8/"/>
    <url>/2022/05/28/%E6%B1%87%E7%BC%96%E5%85%A5%E9%97%A8/</url>
    
    <content type="html"><![CDATA[<h1 id="汇编入门"><a href="#汇编入门" class="headerlink" title="汇编入门"></a>汇编入门</h1><h2 id="基础知识"><a href="#基础知识" class="headerlink" title="基础知识"></a>基础知识</h2><h3 id="机器指令与汇编语言的关系"><a href="#机器指令与汇编语言的关系" class="headerlink" title="机器指令与汇编语言的关系"></a>机器指令与汇编语言的关系</h3><p>机器指令直观表示：101011100000</p><p>执行机器指令要通过：CPU</p><p>汇编语言-&gt;机器指令：编译器</p><p>机器指令(汇编指令)和数据存放在：内存（以二进制形式存放）、CPU（少部分）</p><h3 id="内存相关知识"><a href="#内存相关知识" class="headerlink" title="内存相关知识"></a>内存相关知识</h3><p>内存的最小单元：字节&#x3D;2个十六进制为&#x3D;8个二进制位1byte&#x3D;8bit</p><p>指令和数据在内存中没有区别，而在CPU中才能被区分</p><p>CPU和内存是通过电路联系的，这个电路需要有以下三种信息：</p><ul><li>内存编号：地址线——决定了CPU的寻址能力</li><li>数据信息：数据线——决定了CPU和其他部件进行传送时，一次传送数据多少的能力</li><li>读写信息：控制线—— 决定了CPU对其他部件进行控制的能力</li></ul><p>内存编号为什么从0开始：因为物理上的限制，电路上一根导线只能表示0或者1，所以最小为0</p><p>寻址能力：就是能寻找多大的地址的能力，而这个能力是通过地址线的数量决定的，因为地址线的数量决定了这个电路上能传多少个0或者1</p><p>补充知识：</p><ul><li>1KB的存储器有1024个存储单元，编号从0到1023</li><li>8080，8088，80256，80386的地址总线宽度分别位16根，20根，24根，32根，则它们的寻址能力分别为：64KB，1MB，16MB，4GB</li><li>8080，8088，8086，80286，80386的数据总线宽度分别为8根，8根，8根，16根，16根，32根一次可以传送的数据大小：1Byte，1Byte，2Byte，2Byte，4Byte</li><li>从内存中读取1024字节的数据，8086至少要读512次，80386至少要读取256次。（除以单次）</li></ul><h3 id="内存空间"><a href="#内存空间" class="headerlink" title="内存空间"></a><strong>内存空间</strong></h3><p>内存条 显存（？） （CPU给它们编号） ROM</p><h3 id="主板："><a href="#主板：" class="headerlink" title="主板："></a><strong>主板</strong>：</h3><p>CPU</p><h3 id="端口："><a href="#端口：" class="headerlink" title="端口："></a><strong>端口</strong>：</h3><p>读取写入 控制线 读写信息</p><p>几个的关系：</p><ul><li>CPU——大脑（CPU得到数据——大脑得到反馈）</li><li>主板——人体骨骼</li><li>主板上的电路——骨骼上的神经</li></ul><p>汇编指令可以修改寄存器中的内容，从而控制CPU，进而控制整个计算机</p><p>寄存器：存放地址信息和数据信息的地方</p><h3 id="通用寄存器："><a href="#通用寄存器：" class="headerlink" title="通用寄存器："></a>通用寄存器：</h3><p>def：存放<strong>数据</strong>的16位寄存器，特殊之处在于都能各自分割为2个8位寄存器</p><p>AX：AH+ALAX的高八位构成了AH，低八位构成了AL</p><p>BX：BH+BL</p><p>CX：CH+CL</p><p>DX: DH+DL</p><p>数据存放：</p><p>字节型数据——8位寄存器中</p><p>字型数据——16位寄存器中</p><p>其中高位字节放在AH,BH,CH,DH；低位字节放在AL,BL,CL,DL</p><p>其中高地址内存单元存放字型数据的高位字节；低地址内存单元存放字型数据的低位字节</p><p>（比如<code>4E20H</code>，<code>4EH</code>是高位，<code>20H</code>是低位，内存里存放方式是<code>20 4E</code>）</p><p>注意点：数据与寄存器要保持一致性，寄存器之间也要保证一致性</p><p>八位寄存器进行八位运算只保存八位数据（通用寄存器在八位运算时两个寄存器是互相独立的）</p><h3 id="内存的表示方式："><a href="#内存的表示方式：" class="headerlink" title="内存的表示方式："></a>内存的表示方式：</h3><p>段地址：偏移地址</p><p>段地址寄存器：偏移地址寄存器(这些寄存器都是16位的)</p><table><thead><tr><th>段地址寄存器</th><th>偏移地址寄存器</th></tr></thead><tbody><tr><td>DS(访问数据)</td><td>SI</td></tr><tr><td>ES</td><td>BP</td></tr><tr><td>SS(与栈有关)</td><td>SP(与栈有关)</td></tr><tr><td>CS(与指令有关)</td><td>IP(与指令有关)</td></tr><tr><td></td><td>DI</td></tr><tr><td></td><td>BX</td></tr></tbody></table><h3 id="地址加法器"><a href="#地址加法器" class="headerlink" title="地址加法器"></a>地址加法器</h3><p>对于8086：</p><p>8086中CPU给了20根地址线，但是上述的寄存器只有16位。由于地址线的数量是决定CPU的寻址能力的。现在20根线只用了16根，限制了CPU的表达能力。</p><p>因此引入了个新的东西——地址加法器：</p><p>def：地址的计算方式</p><p>作用：增加CPU的表达能力，也就是能表示更多的地址</p><p>形象化理解：</p><p><em>假如两个人通信时只能用三位以内的数字（0-999）进行交流，那如何表达2560这个数字呢？</em></p><p><em><strong>可以约定接受到的第一串数字乘一个倍数再加上接收到的第二串数字</strong></em></p><p><em>be like：第一串：250，第二串：60，然后约定第一串数字乘10再加上第二串，这样就做到了用三位以内的数字表示四位数（方式不唯一）</em></p><p>公式：</p><p>段地址 × 16（10H） &#x3D; 基础地址</p><p>段地址 × 16（10H） + 偏移地址 &#x3D; 物理地址</p><p>基础地址 + 偏移地址 &#x3D; 物理地址</p><p>注：如果段地址选取的过小，则有可能永远找不到最终的物理地址（由于偏移地址是有限的，即0~FFFFH）</p><p>总结：写成<strong>段地址：偏移地址</strong>的原因是：因为8086CPU有20根地址线，16位寄存器无法完全使用完这20根，所以用这种方式来扩充地址的表示范围。</p><p>例题：有一个数据存放在内存20000H的单元中，现在给段地址SA，若想用偏移地址寻找到此单元，则SA应该满足的条件范围是多少？</p><p>​【分析】也就是要考虑段地址给多少时，CPU无论怎么改变偏移地址都无法找到20000H<br>$$<br>最大:SA<em>10H+0&#x3D;20000H\Rightarrow SA&#x3D;2000H \<br>最小:SA</em>10H+FFFFH&#x3D;20000H\Rightarrow SA&#x3D;1001H\<br>这里要注意，不是1000H，因为1000H*10+FFFFH&#x3D;1FFFFH<br>$$<br>CPU是如何区分指令和数据的？</p><p>在8086的CPU中，在任意时刻CPU将CS:IP所指向的内容全部当作指令来执行，也就是说，CS和IP决定了CPU从哪里开始读取指令</p><p><em>而在内存中，指令和数据是不进行区分的</em></p><h2 id="栈："><a href="#栈：" class="headerlink" title="栈："></a>栈：</h2><h3 id="存储内容"><a href="#存储内容" class="headerlink" title="存储内容"></a>存储内容</h3><p>数据类型：只能是字型数据</p><p>数据来源：寄存器、内存</p><h3 id="栈顶标记："><a href="#栈顶标记：" class="headerlink" title="栈顶标记："></a>栈顶标记：</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs assembly">SS 段地址寄存器<br>SP 偏移地址寄存器; SS:SP = 栈顶标记<br></code></pre></td></tr></table></figure><h3 id="指令："><a href="#指令：" class="headerlink" title="指令："></a>指令：</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs assembly">push [寄存器] 入栈 将寄存器的字型数据放入SS中，然后改SP的值(-2n)<br>pop  [寄存器] 出栈 将SS的字型数据放入寄存器中，然后改SP的值(+2n)<br></code></pre></td></tr></table></figure><h3 id="作用："><a href="#作用：" class="headerlink" title="作用："></a>作用：</h3><p>临时性保存数据</p><h3 id="如何设置栈？"><a href="#如何设置栈？" class="headerlink" title="如何设置栈？"></a>如何设置栈？</h3><p>起始地址(SS) + 你所设定的站的大小的字节数(16n)</p><h3 id="越界问题："><a href="#越界问题：" class="headerlink" title="越界问题："></a>越界问题：</h3><p>8086没有提供一个寄存器来限制栈的上限或者下限，所以只能靠预先估计大小来分配</p><h3 id="最大空间设置："><a href="#最大空间设置：" class="headerlink" title="最大空间设置："></a>最大空间设置：</h3><p>SP寄存器的取值范围为<code>0~FFFFH</code>那么就是能装32768个字型数据(65536÷2)，要设置最大的话，只需要SP初始值为0即可</p><p>补：如果再进行了一轮入栈后，SP又回到了0，那么再下一个入栈则会覆盖原有的内容</p><h2 id="内存段的安全问题"><a href="#内存段的安全问题" class="headerlink" title="内存段的安全问题"></a>内存段的安全问题</h2><p>内存段的内部结构：数据段 代码段 栈段</p><p>但是如果随意地向某一段内存空间中写入内容是非常危险的，比如：</p><p>使用mov指令的时候，如果不小心修改了内存中重要的数据或者指令会导致程序的崩溃甚至是系统的崩溃。</p><p>那么如何安排安全的地方给数据段，代码段，栈段呢？</p><p>使用操作系统分配的内存空间。在操作系统的环境中，合法地通过操作系统取得的内存空间都是安全的。因为操作系统的作用是管理内存，它不会让一个程序所使用的内存空间和其他程序以及系统自己的空间产生冲突。</p><p>操作系统为程序分配内存有两种情况：</p><ol><li>系统加载程序时为程序分配内存</li><li>系统执行时向系统申请内存</li></ol><h2 id="DOSbox"><a href="#DOSbox" class="headerlink" title="DOSbox"></a>DOSbox</h2><h3 id="相应指令："><a href="#相应指令：" class="headerlink" title="相应指令："></a>相应指令：</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs assembly">-r 可以查看和改变寄存器中的内容<br>;直接-r可以查看寄存器内容，如果是-r [寄存器] 则可以修改值<br>-d 可以查看内存中的内容<br>;-d [段地址:偏移地址]; -d [段地址:偏移地址(头) 偏移地址(尾)]<br>-u 可以将内存中的机器指令翻译成汇编指令<br>;-u [段地址:偏移地址]<br>-a 可以以汇编指令的格式在内存中写入一条汇编指令<br>;要改特定位置是先 -a [段地址:偏移地址] 然后再写入指令<br>;改完执行的时候要先 -r [寄存器]去修改cs和ip的指，让他们指到刚刚编程的地方<br>-t 执行当前CS：IP所指向的机器指令<br>-e 可以改写内存中的内容 <br>;-e [段地址:偏移地址] 可以直接写入机器码，按空格直接补0<br>;-e [段地址:偏移地址] &quot;字符串&quot; 可将右边的字符改成&quot;&quot;内的东西<br><br>debug [程序名];进行程序的跟踪<br>;其中显示出来的cx=程序长度<br>-p 执行int指令<br>-q 退出<br></code></pre></td></tr></table></figure><h2 id="代码相关"><a href="#代码相关" class="headerlink" title="代码相关"></a>代码相关</h2><h3 id="指令"><a href="#指令" class="headerlink" title="指令"></a>指令</h3><p>指令是有长度的，一条指令可以由多个字节构成</p><h3 id="指令的执行过程："><a href="#指令的执行过程：" class="headerlink" title="指令的执行过程："></a>指令的执行过程：</h3><ol><li>CPU从CS:IP所指向的内存单元读取指令，存放到指令缓存器中</li><li>IP &#x3D; IP + 所读指令的长度 → 下一条指令</li><li>执行指令缓存器中的内容，回到第一步</li></ol><h3 id="汇编指令"><a href="#汇编指令" class="headerlink" title="汇编指令"></a>汇编指令</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs assembly">jmp ——转移指令:可以修改CS和IP这2个寄存器（它们决定了CPU从哪开始读取指令）<br>jmp 2000:0<br>jmp [寄存器]<br>jmp tag;代码中进行跳转<br>call ——转移指令:跟jmp比多了保存IP的数据这一步，存到了内存里（函数调用）<br>ret ——转移指令:将call指令执行后保存的数据取出，还给IP，跳转到call的下一条指令（返回主函数）<br>add ——加法指令:左 = 左 + 右<br>;（左:寄存器，右:数据,寄存器,[偏移地址]；左:[偏移地址]，右:寄存器）<br>sub ——减法指令:左 = 左 - 右<br>;（左:寄存器，右:数据,寄存器,[偏移地址]；左:[偏移地址]，右:寄存器）<br>mov ——移动指令:将右边的数据移动到左边<br>mov [寄存器] [寄存器]<br>mov [寄存器] [寄存器]:[偏移地址];偏移地址的括号要加上,debug里直接写[偏移地址就行]<br>mov [寄存器]:[偏移地址] [寄存器]<br></code></pre></td></tr></table></figure><p> 注：不能使用下面的方式，8086没提供，必须通过jmp指令完成</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs assembly">mov cs,2000<br>mov ip,0<br></code></pre></td></tr></table></figure><p>补充知识：</p><p>PC机主板上的ROM中写有一个生产日期，在内存<code>FFF00H~FFFFFH</code>的某几个单元中。（但是如果是DOSbox软件的话，这部分只能读不能修改）要修改只能在DOS系统中修改</p><h3 id="PSP区"><a href="#PSP区" class="headerlink" title="PSP区"></a>PSP区</h3><p>从<code>ds:0</code>开始的256个字节</p><p>用来进行系统和程序之间的通信</p><h3 id="框架："><a href="#框架：" class="headerlink" title="框架："></a>框架：</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs assembly">assume cs:code,ds:data,ss:stack<br>;这么取名的原因:cs与指令有关，ds与数据有关，ss与栈有关<br>data segment ;data段从这开始<br>...<br>mov ah, 4c00h<br>int 21h<br>data ends;data段在这结束 <br>;作用：分配内存，名字随意取 只要与上面assume一致即可<br></code></pre></td></tr></table></figure><p>分支</p><p>循环</p><p>loop 循环指令：<br>循环次数保存在cx寄存器</p><p>执行步骤：</p><ol><li>cx &#x3D; cx -1</li><li>判断cx的值，不为零则跳转到标号位置继续执行，为0则执行下面的指令。</li></ol><p>子程序调用</p><p>输入输出</p>]]></content>
    
    
    <categories>
      
      <category>硬件</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>编码总结</title>
    <link href="/2022/03/07/%E5%8C%BA%E5%9D%97%E9%93%BE%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    <url>/2022/03/07/%E5%8C%BA%E5%9D%97%E9%93%BE%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
    
    <content type="html"><![CDATA[<h1 id="区块链学习笔记"><a href="#区块链学习笔记" class="headerlink" title="区块链学习笔记"></a>区块链学习笔记</h1><h2 id="概括："><a href="#概括：" class="headerlink" title="概括："></a>概括：</h2><p>区块链最直接的词汇就是“<strong>分布式账本</strong>”</p><h3 id="分布式账本系统的特点："><a href="#分布式账本系统的特点：" class="headerlink" title="分布式账本系统的特点："></a>分布式账本系统的特点：</h3><ol><li>可以<strong>无限增加</strong>的巨型账本——每个区块可以视作这个账本的一页，每增加一个区块，账本就多了一页，这一页中可能会包含一条或多条记录信息；</li><li><strong>加密且有顺序</strong>的账本——账目信息会被打包成一个区块并加密，同时盖上时间戳，一个个区块按时间戳顺序链接形成一个总账本；</li><li>去<strong>中心化</strong>的账本——由网内用户共同维护的，它是去中心化的。</li></ol><h2 id="区块链出现原因："><a href="#区块链出现原因：" class="headerlink" title="区块链出现原因："></a>区块链出现原因：</h2><p>​需要<strong>传输货币信息</strong>，即需要价值转移（区块链是一种价值传输网络）</p><h3 id="什么叫价值转移"><a href="#什么叫价值转移" class="headerlink" title="什么叫价值转移"></a>什么叫价值转移</h3><p>​将某一部分价值从Ａ地址转移到Ｂ地址，那么需要Ａ地址精确地减少这部分价值，而Ｂ地址精确地增加了这部分价值。价值转移涉及Ａ和Ｂ这两个独立参与者，那么这个操作就必须同时得到Ａ和Ｂ地认可，而且，结果还不能收到Ａ和Ｂ任何一方地操纵。</p><h3 id="现在的状况"><a href="#现在的状况" class="headerlink" title="现在的状况"></a>现在的状况</h3><p>​目前价值转移往往不是直接传输，而是由一个中心化的第三方做背书。即通过政府或者集团公司的背书，把所有价值转移的计算都放在一个中心服务器中进行处理，其中一定会涉及人的参与，而人的“有限理论”和“机会主义行为”往往会使整个系统变得不那么可信。</p><h2 id="优势"><a href="#优势" class="headerlink" title="优势"></a>优势</h2><p>1.保证系统内数据记录的<strong>完整性和安全性</strong></p><ul><li>网络中所有授权的参与者都保存了一份完全相同的账本，一旦对账本进行修改，全部副本数据也将在几分钟甚至几秒钟内全部修改完毕。</li><li>作为一个分布式账本，账本中的每一笔交易都有一个独一无二的时间戳，这样可以方式重复支付的产生。</li></ul><p>2.有效降低交易的<strong>复杂性和风险</strong></p><ul><li>它可以在没有第三方信用背书的情况下，在一个开放式平台上跨越多个遍布全球的节点，进行远距离的安全支付，并且保存所有交易的历史记录。</li></ul><p>3.<strong>可编程性</strong></p><ul><li>这是一个开源的技术。</li></ul><h2 id="互信方式"><a href="#互信方式" class="headerlink" title="互信方式"></a>互信方式</h2><p>1.第三方——国家或大型企业</p><p>通过国家或大型企业的背书。</p><p>2.技术——区块链</p><p>通过一个不断增长的分布式结算数据库，解决信息系统中的信任危机</p><h2 id="公信力"><a href="#公信力" class="headerlink" title="公信力"></a>公信力</h2><h3 id="第三方"><a href="#第三方" class="headerlink" title="第三方"></a>第三方</h3><p>​现实社会中，人与人、人与公司、公司与公司之间的交易需要公信力提供支撑。公信力意指在社会生活中，公共权力面对时间差序、公众交往以及利益交换时，所表现出的一种公平、公正、公开、人道、民主与责任的信任力。当前社会，公信力一般由<strong>政府、国家机关或政府授权的第三方组织来提供</strong>。</p><h3 id="区块链"><a href="#区块链" class="headerlink" title="区块链"></a>区块链</h3><p>​<strong>区块链是一台创造信任的机器。</strong>区块链技术可以很好地满足公信力需求，并把公信力抽象出来作为一个独立的而不是由政府或第三方组织掌控的存在，形成政府、大众、区块链与公幼互相监督的“公信新格局”。信任是建立在区块链上的，非由单个组织掌控，从而公信动可以被多方交叉验证与监督。</p><h4 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h4><p>​1.区块链是<strong>分布式</strong>的，区块链公信力在网络上会有许多独立的节点，每一节点都有一份备份信息。每个有授权的人都可以从任意一个节点下载全部的信息，同时，区块链公信力网络也是不可篡改的，任何节点企图更改信息都会被其他节点发现，而更改的节点不会被确认，就会立刻丧失公信力。</p><p>​2.区块链<strong>不制定政策</strong>，在区块链公信力模型中，它只是一个公证人的色，是政府建立和执行政策的工具。区块链的作用是帮助政府更快速和准确地让政策被全民所接受与认可，同时，因为区块链是一个不变的、可以被复制的数据库，政府的政策就变得公开和透明。</p><h2 id="技术"><a href="#技术" class="headerlink" title="技术"></a>技术</h2><h3 id="比特币"><a href="#比特币" class="headerlink" title="比特币"></a>比特币</h3><h4 id="基本原则"><a href="#基本原则" class="headerlink" title="基本原则"></a>基本原则</h4><p>​1.是一个纯粹的<strong>点对点电子现金系统</strong>，使在线支付能够直接由一方发起并支付给另一人，中间不需要通过任何金融机构。</p><p>​2.不需要授信的第三方支持就能<strong>防止双重支付</strong>，点对点的网络环境是解决双重支付的一种方案。</p><p>​3.对全部交易<strong>加上时间戳</strong>，并将他们并入一个不断延展的基于哈希算法的工作量证明的链条作为交易记录。除非重新完成全部的工作量证明，形成的交易记录将不可更改。</p><p>​4.最长的链条不仅将作为被观察的事件序列的证明，且被视为来自CPU (中央处理器)的计算能力最大的池。<strong>只要大多数CPU的计算能不被合作攻击的节点所控制，那么就会生成最长的、长度超过攻击者的链条。</strong></p><p>​5.这个系统本身<strong>需要的基础设施非常少</strong>，节点尽最大努力在全网传播信息即可，<strong>节点可以随时离开和重新加入网络</strong>，并将最长的工作量证明作为该节点离线期间发生的交易的证明。</p><h4 id="运行比特币网络步骤"><a href="#运行比特币网络步骤" class="headerlink" title="运行比特币网络步骤"></a>运行比特币网络步骤</h4><ol><li><p>新的交易向全网进行广播； </p></li><li><p>每一个节点都将收到的交易信息纳入一个区块中； </p></li><li><p>每个节点都尝试在自己的区块中找到一个具有足够难度的工作量证明；</p></li><li><p>当一个节点找到了一个工作量证明，它就向全网进行广播； </p></li><li><p>当且仅当包含在该区块中的所有交易都是有效的且之前未存在过的，其他节点才认同该区块的有效性； </p></li><li><p>其他节点表示他们接受该区块，而接受的方法则是跟随在该区块的末尾，制造新的区块以延长该链条，并将该区块的随机散列值视为新区块的随机散列值。</p></li></ol><h3 id="相关规则"><a href="#相关规则" class="headerlink" title="相关规则"></a>相关规则</h3><h4 id="信息分叉"><a href="#信息分叉" class="headerlink" title="信息分叉"></a>信息分叉</h4><p>​让记录信息所需要的时间段增长，导致写完这句话所用的时刻变得不同。</p><h4 id="双花问题"><a href="#双花问题" class="headerlink" title="双花问题"></a>双花问题</h4><p>​把一笔资金进行两次支付交易的时候，确认时间比较长，所以第一笔交易确认有效后，第二笔交易无法得到确认，使其无法产生双花问题。</p><h2 id="核心概念"><a href="#核心概念" class="headerlink" title="核心概念"></a>核心概念</h2><h3 id="区块"><a href="#区块" class="headerlink" title="区块"></a>区块</h3><p>​是区块链的基本结构单元，包括元数据的区块头和包含交易数据的区块主体构成。</p><h4 id="区块头"><a href="#区块头" class="headerlink" title="区块头"></a>区块头</h4><ol><li><p>用于连接前面的区块、索引自父区块哈希值的数据； </p></li><li><p>挖矿难度、Nonce（随机数，用于工作量证明算法的计数器）、 时间戳；</p></li><li><p>能够总结并快速归纳校验区块中所有交易数据的Merkle（默克尔）树根数据。</p></li></ol><h3 id="工作流程"><a href="#工作流程" class="headerlink" title="工作流程"></a>工作流程</h3><h3 id="硬分叉和软分叉"><a href="#硬分叉和软分叉" class="headerlink" title="硬分叉和软分叉"></a>硬分叉和软分叉</h3><h4 id="硬分叉"><a href="#硬分叉" class="headerlink" title="硬分叉"></a>硬分叉</h4><h5 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h5><p>​硬分叉是指比特币的区块格式或交易格式（这就是广泛流传的“共识”）发生改变时，未升级的节点拒绝验证已经升级的节点生产出的区块，不过已经升级的节点可以验证未升级节点生产出的区块，然后大家各自延续自己认为正确的链，所以分成两条链。</p><h5 id="特点-1"><a href="#特点-1" class="headerlink" title="特点"></a>特点</h5><ol><li><p><strong>没有向前兼容性</strong>，之前的版本将不可再用，需要强制升级； </p></li><li><p>在区块链层面会有分叉的两条链，一条旧链，一条分叉新链； </p></li><li><p>需要在某个时间点<strong>全部同意分叉升级</strong>，不同意的将会进入旧 </p><p>链。</p></li></ol><h4 id="软分叉"><a href="#软分叉" class="headerlink" title="软分叉"></a>软分叉</h4><h5 id="定义-1"><a href="#定义-1" class="headerlink" title="定义"></a>定义</h5><p>​软分叉是指比特币交易的数据结构发生改变时，未升级的节点可以验证已经升级的节点生产出的区块，而且已经升级的节点也可以验证未升级的节点生产出的区块。</p><h5 id="特点-2"><a href="#特点-2" class="headerlink" title="特点"></a>特点</h5><ol><li><p><strong>有较好的兼容性</strong>，之前版本的部分功能可用，可不升级； </p></li><li><p><strong>在区块链层面没有分叉的链</strong>，只是组成链的区块有新区块和旧区块之分；</p></li><li><p>相当长的时间里，<strong>可允许不进行升级</strong>，继续使用原版本生成旧区 块，与新区块并存。</p></li></ol><h4 id="产生原因"><a href="#产生原因" class="headerlink" title="产生原因"></a>产生原因</h4><ul><li>区块链发生永久性分歧，在新共识规则发布后，部分没有升级的节点无法验证已经升级的节点生产的区块，通常硬分叉就会发生。</li><li>当新共识规则发布后，没有升级的节点由于不了解新共识规则，就会生产不合法的区块，从而产生临时性分叉，即软分叉。</li></ul><h4 id="区别"><a href="#区别" class="headerlink" title="区别"></a>区别</h4><p>兼容性的不同，软分叉是<strong>暂时的</strong>，硬分叉是<strong>永久的</strong>。 </p><h2 id="四大特点"><a href="#四大特点" class="headerlink" title="四大特点"></a>四大特点</h2><ol><li><p><strong>去中心化</strong>：在一个去中心化的金融系统中，没有中介机构，所有节点的权利和义务都相等，任意节点停止工作都不会影响系统整体的运作。</p></li><li><p><strong>去信任</strong>：系统中所有节点之间无须信任也可以进行交易，因为数据库和整个系统的运作是公开透明的，在系统的规则和时间范围内，节点之间无法欺骗彼此。</p></li><li><p><strong>集体维护</strong>：系统是由其中具有维护功能的所有节点共同维护的，系统中所有人共同参与维护工作。</p></li><li><p><strong>可靠的数据库</strong>：系统中每一个节点都拥有最新的完整数据库拷贝，修改单个节点的数据库是无效的，因为系统会自动比较，认为最多次出现的相同数据记录为真。</p></li></ol><h2 id="结构模型"><a href="#结构模型" class="headerlink" title="结构模型"></a>结构模型</h2><p>​区块链基础架构分为6层，包括<strong>数据层、网络层、共识层、激励层、合约层、应用层</strong>。每层分别完成一项核心功能，各层之间互相配合，实现一个去中心化的信任机制。 </p><h3 id="数据层"><a href="#数据层" class="headerlink" title="数据层"></a>数据层</h3><p>​数据层主要描述区块链技术的<strong>物理形式</strong>。区块链系统设计的技术人员们首先建立的一个起始节点是“<strong>创世区块</strong>”，之后在同样规则下创建的规格相同的区块通过一个链式的结构依次相连组成一条主链条。随着运行时间越来越长，新的区块通过验证后不断被添加到主链上，主链也会不断地延长。</p><h3 id="网络层"><a href="#网络层" class="headerlink" title="网络层"></a>网络层</h3><p>​网络层的主要目的是实现区块链网络中<strong>节点之间的信息交流</strong>。区块链网络本质上是一个P2P（点对点）网络。每一个节点既接收信息，也产生信息。节点之间通过维护一个共同的区块链来保持通信。区块链的网络中，每一个节点都可以创造新的区块，在新区块被创造后会以广播的形式通知其他节点，其他节点会对这个区块进行验证，当全区块链网络中超过51%的用户验证通过后，这个新区块就可以被添加到主链上了</p><h3 id="共识层"><a href="#共识层" class="headerlink" title="共识层"></a>共识层</h3><p>​共识层能让高度分散的节点在去中心化的系统中高效地<strong>针对区块数据的有效性</strong>达成共识。区块链中比较常用的共识机制主要有工作量证明、权益证明和股份授权证明三种。</p><h3 id="激励层"><a href="#激励层" class="headerlink" title="激励层"></a>激励层</h3><p>​激励层的主要功能是提供一定的激励措施，<strong>鼓励节点参与区块链的安全验证工作</strong>。</p><h3 id="合约层"><a href="#合约层" class="headerlink" title="合约层"></a>合约层</h3><p>​合约层主要是指各种<strong>脚本代码、算法机制以及智能合约</strong>等。</p><h4 id="智能合约"><a href="#智能合约" class="headerlink" title="智能合约"></a>智能合约</h4><h5 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h5><p>是一个计算机程序，是一个任何人都可以使用的去中心化系统，不需要任何中介机构。</p><h5 id="形成条件"><a href="#形成条件" class="headerlink" title="形成条件"></a>形成条件</h5><ol><li><p>必须有货币参与。</p></li><li><p>资产必须数字化。</p></li><li><p>资产必须联网且绝对信任某个数据库。</p></li></ol><h3 id="应用层"><a href="#应用层" class="headerlink" title="应用层"></a>应用层</h3><p>​应用层<strong>封装了区块链的各种应用场景和案例</strong>。</p><h2 id="基本类型"><a href="#基本类型" class="headerlink" title="基本类型"></a>基本类型</h2><h3 id="公有链"><a href="#公有链" class="headerlink" title="公有链"></a>公有链</h3><h4 id="概念-1"><a href="#概念-1" class="headerlink" title="概念"></a>概念</h4><p>​公有链是指全世界任何人都可读取、任何人都能发送交易且交易能获得有效确认，任何人都能参与共识过程的区块链——共识过程决定<strong>哪个区块可被添加到区块链中，同时明确当前状态</strong>。</p><h4 id="特点-3"><a href="#特点-3" class="headerlink" title="特点"></a>特点</h4><ol><li><p><strong>保护用户免受开发者的影响</strong></p><p>在公有链中程序开发者无权干涉用户，区块链可以保护其用户。 </p></li><li><p><strong>访问门槛低</strong></p><p>任何人都可以访问，只要有一台能够联网的计算机就能够满足基本的访问条件。 </p></li><li><p><strong>所有数据默认公开</strong></p><p>公有链中的每个参与者可以看到整个分布式账本中的所有交易记录。</p></li></ol><h3 id="私有链"><a href="#私有链" class="headerlink" title="私有链"></a>私有链</h3><h4 id="概念-2"><a href="#概念-2" class="headerlink" title="概念"></a>概念</h4><p>​私有链是指其写入权限仅在一个组织手里的区块链，目的是<strong>对读取权限或者对外开放权限进行限制</strong>。 </p><h4 id="特点-4"><a href="#特点-4" class="headerlink" title="特点"></a>特点</h4><ol><li><p><strong>交易速度非常快</strong></p><p>私有链中少量的节点具有很高的信任度，并不需要每个节点都来验证一个交易。因此，私有链的交易速度比公有链快很多。 </p></li><li><p><strong>为隐私提供更好的保障</strong></p><p>私有链的数据不会被公开，不能被拥有网络连接的所有人获得。</p></li><li><p><strong>交易成本大幅降低甚至为零</strong></p><p>私有链上可以进行完全免费或者至少说是非常廉价的交易。如果一 个实体机构控制和处理所有的交易，它就不再需要为工作收取费用。 </p></li><li><p><strong>有助于保护其基本的产品不被破坏</strong></p><p>银行和传统的金融机构使用私有链可以保证它们的既有利益，以至 原有的生态体系不被破坏。</p></li></ol><h3 id="联盟链"><a href="#联盟链" class="headerlink" title="联盟链"></a>联盟链</h3><p>​联盟链是指其共识过程受到预选节点控制的区块链。联盟链可以视为“部分去中心化”。 </p><h3 id="许可链"><a href="#许可链" class="headerlink" title="许可链"></a>许可链</h3><p>​许可链是指每个节点都需要许可才能加入的区块链系统，私有链联盟链都属于许可链。</p><h3 id="混合链-x2F-复杂链"><a href="#混合链-x2F-复杂链" class="headerlink" title="混合链&#x2F;复杂链"></a>混合链&#x2F;复杂链</h3><p>随着区块链技术的日益发展，区块链的技术架构不再简单地划分为私有链和公有链，它们之间的界限越来越模糊，所以有了混合链&#x2F;复杂链。</p><h2 id="发展脉络"><a href="#发展脉络" class="headerlink" title="发展脉络"></a>发展脉络</h2><h3 id="区块链1-0"><a href="#区块链1-0" class="headerlink" title="区块链1.0"></a>区块链1.0</h3><p>​以比特币为代表的<strong>可编程货币</strong>。它更多是指数字货币领域的创新，如货币转移、兑付和支付系统等。 </p><h3 id="区块链2-0"><a href="#区块链2-0" class="headerlink" title="区块链2.0"></a>区块链2.0</h3><p>​基于区块链的<strong>可编程金融</strong>。它更多涉及一些合约方面的创新，特别是商业合同以及交易方面的创新，比如股票、证券、期货、贷款、清算结算、所谓的智能合约等。 </p><h3 id="区块链3-0"><a href="#区块链3-0" class="headerlink" title="区块链3.0"></a>区块链3.0</h3><p>​区块链在<strong>其他行业</strong>的应用。它更多地对应人类组织形态的变革，包括健康、科学、文化和基于区块链的司法、投票等。</p><h2 id="共识机制"><a href="#共识机制" class="headerlink" title="共识机制"></a>共识机制</h2><h3 id="工作量证明"><a href="#工作量证明" class="headerlink" title="工作量证明"></a>工作量证明</h3><p>​工作量证明（Proof of Work，简称PoW）通常只能从结果证明，因为监测工作过程通常是<strong>烦琐且低效</strong>的。 </p><p>​比特币在区块的生成过程中使用了PoW机制，一个符合要求的区块哈希值由N个前导零构成，零的个数取决于网络的难度值。要得到合理的区块哈希值需要经过大量的尝试计算，计算时间取决于机器的哈希运算速度。当某个节点提供出一个合理的区块哈希值，说明该节点确实经过了大量的尝试计算，当然，这并不能得出计算次数的绝对值，因为寻找合理的哈希值是一个概率事件。当节点拥有占全网n%的算力时，该节点即有n%的概率找到区块哈希值。 </p><p>​PoW依赖机器进行数学运算来获取记账权，资源<strong>消耗大、共识机制高、可监管性弱</strong>，同时每次达成共识需要全网共同参与运算，<strong>性能效率比较低，容错性方面允许全网50%节点出错</strong>。 </p><h4 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h4><p><strong>完全去中心化</strong>，节点自由进出。</p><h4 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h4><p>​目前比特币已经吸引全球大部分的算力，其他再使用PoW共识机制的区块链应用很难获得相同的算力来<strong>保障自身的安全</strong>；挖矿造成大量的<strong>资源浪费</strong>；共识达成的<strong>周期较长</strong>。 </p><h4 id="使用PoW的项目"><a href="#使用PoW的项目" class="headerlink" title="使用PoW的项目"></a>使用PoW的项目</h4><p>​比特币、以太坊前三个阶段——Frontier（前沿）、Homestead（家园）、Metropolis（大都会）。以太坊的第4个阶段，即Serenity（宁静），将采用权益证明机制。 </p><h3 id="权益证明"><a href="#权益证明" class="headerlink" title="权益证明"></a>权益证明</h3><p>权益证明（Proof of Stake，简称PoS）由“Quantum Mechanic”2011年在比特币论坛讲座上首先提出，后经Peercoin（点点币）和NXT（未来币）以不同思路实现。</p><h4 id="工作原理"><a href="#工作原理" class="headerlink" title="工作原理"></a>工作原理</h4><p>​PoS的主要理念是<strong>节点记账权的获得难度与节点持有的权益成反比</strong>，相比PoW，其在一定程度上减少了数学运算带来的资源消耗，性能也得到了相应的提升，但依然是基于哈希运算，竞争获取记账权的方式，可监管性弱。该共识机制的容错性和PoW相同。它是PoW的一种升级，根据每个节点所占代币的比例和时间，等比例地降低挖矿难度，从而加快找到随机数的速度。 </p><p>​这个系统中存在一个持币人的集合，他们把手中的代币放入PoS机制中，这样他们就变成验证者。比如对区块链最前面的一个区块而言，PoS算法在验证者中随机选取一个（选择验证者的权重依据他们投入的代币量，比如一个投入押金为10 000代币的验证者被选择的概率是一个投入1000代币验证者的10倍），给他权利产生下一个区块。如果在一定时间内，这个验证者没有产生一个区块，则选出第二个验证者代替产生新区块。与PoW一样，PoS以最长的链为准。 </p><p>​但是随着规模经济（指扩大生产规模引起经济效益增加的现象）的消失，中心化所带来的风险减小了，因此，不会有人因为负担得起大规模生产工具而得到不成比例的额外回报。 </p><h4 id="优点-1"><a href="#优点-1" class="headerlink" title="优点"></a>优点</h4><p>在一定程度上<strong>缩短了共识达成的时间</strong>；<strong>不再需要大量消耗能源去挖</strong>矿。 </p><h4 id="缺点-1"><a href="#缺点-1" class="headerlink" title="缺点"></a>缺点</h4><p>还是需要挖矿，<strong>本质上没有解决商业应用的痛点</strong>；所有的确认都只是一个概率上的表达，而不是一个确定性的事情，理论上有可能存在其他攻击影响。</p><h3 id="股份授权证明"><a href="#股份授权证明" class="headerlink" title="股份授权证明"></a>股份授权证明</h3><p>​BitShares（比特股）社区首先提出了股份授权证明（简称DPoS）机制，它与PoS的主要区别在于节点选举若干代理人，由代理人验证和记账，但其合规监管、性能、资源消耗和容错性与PoS相似。类似于董事会投票，持币者投出一定数量的节点，进行代理验证和记账。 </p><h4 id="工作原理-1"><a href="#工作原理-1" class="headerlink" title="工作原理"></a>工作原理</h4><p>​每个股东按其持股比例拥有相应的影响力，51%股东投票的结果将是不可逆且有约束力的，其挑战是通过及时而高效的方法达到“51%批准”。为了达到这个目标，每个股东可以将其投票权授予一名代表。获票数最多的前100位代表按既定时间表轮流产生区块。每位代表分配到一个时间段来生产区块。</p><p>​所有的代表将收到等同于一个平均水平的区块所含交易费的10%作为报酬。如果一个平均水平的区块用100股作为交易费，一位代表将获得一股作为报酬。 </p><p>​网络延迟有可能使某些代表没能及时广播他们的区块，而这将导致区块链分叉。然而，这不太可能发生，因为制造该区块的代表可以与制造该区块前后的区块的代表建立直接连接。建立这种与你之后的代表（也许也包括其后的那名代表）的直接连接是为了确保你能得到报酬。 </p><h4 id="执行模式"><a href="#执行模式" class="headerlink" title="执行模式"></a>执行模式</h4><p>DPoS的投票模式可以每30秒产生一个新区块，并且在正常的网络条件下，区块链分叉的可能性极其小，即使发生也可以在几分钟内得到解决。执行该模式的基本步骤如下： </p><ol><li><p><strong>成为代表</strong>。成为一位代表，你必须在网络上注册你的公钥，并获得一个32位的特有标识符。该标识符会被每笔交易数据的“头部”引用。</p></li><li><p><strong>授权投票</strong>。每个钱包有一个参数设置窗口，在该窗口里用户可以选择一位或更多的代表，并将其分级。一经设定，用户所做的每笔交易将把选票从“输入代表”转移至“输出代表”。一般情况下，用户不会创建专门以投票为目的的交易，因为那将耗费他们一笔交易费。但在紧急情况下，某些用户可能觉得通过支付费用这一更积极的方式来改变他们的投票是值得的。 </p></li><li><p><strong>保持代表诚实</strong>。每个钱包将显示一个状态指示器，让用户知道他们的代表表现如何。如果他们错过了太多的区块，那么系统将会推荐用户更换一位新的代表。如果任何代表被发现签发了一个无效的区块，那么所有标准钱包将在每个钱包进行更多交易前要求选出一位新代表。 </p></li><li><p><strong>抵抗攻击</strong>。在抵抗攻击上，前100位代表所获得的权力是相同的，即每位代表都有一项平等的投票权，因此，无法通过获得超过1%的选票而将权力集中到单一代表上。由于只有100位代表，不难想象一个攻击者可以对每位轮到其生产区块的代表依次进行拒绝服务攻击。幸运的是，由于每位代表的标识是其公钥而非IP地址，这种特定攻击的威胁很容易被减轻。这将使确定DDoS（分布式拒绝服务）攻击目标更为困难。而代表之间的潜在连接将使妨碍他们生产区块变得更为困难。</p></li></ol><h4 id="优点-2"><a href="#优点-2" class="headerlink" title="优点"></a>优点</h4><p>​大幅<strong>缩小参与验证和记账节点的数量</strong>，可以达到秒级的共识验证。 </p><h4 id="缺点-2"><a href="#缺点-2" class="headerlink" title="缺点"></a>缺点</h4><p>​整个共识机制<strong>还是依赖于代币</strong>，而很多商业应用是不需要代币的。</p><h3 id="投注共识"><a href="#投注共识" class="headerlink" title="投注共识"></a>投注共识</h3><p>​投注共识是以太坊下一代的共识机制Casper（鬼马小精灵）引入的一个全新概念，属于PoS。Casper的共识是按区块达成的，而不是像PoS那样按链达成。 </p><p>​为了防止验证人在不同的世界中提供不同的投注，我们还有一个简单严格的条款：<strong>如果你两次的投注序号一样，或者说你提交了一个无法让Casper依照合约处理的投注，你将失去所有保证金。</strong>即Casper有惩罚机制，并且在Casper协议下的验证人需要完成出块和投注两个活动。</p><h4 id="惩罚机制"><a href="#惩罚机制" class="headerlink" title="惩罚机制"></a>惩罚机制</h4><p>非法节点通过恶意攻击网络不仅得不到交易费，而且还面临着保证金被没收的风险。</p><h4 id="出块"><a href="#出块" class="headerlink" title="出块"></a>出块</h4><p>出块是一个独立于其他所有事件而发生的过程，验证人收集交易，当轮到他们的出块时间时，他们就制造一个区块，并签名，然后发送到网络上。</p><h4 id="投注"><a href="#投注" class="headerlink" title="投注"></a>投注</h4><p>目前Casper默认的验证人策略被设计为模仿传统的拜占庭容错共识：观察其他的验证人如何投注，取33%处的值，向0或者1进一步移动。 </p><h4 id="确认当前状态的过程"><a href="#确认当前状态的过程" class="headerlink" title="确认当前状态的过程"></a>确认当前状态的过程</h4><ol><li>下载所有的区块和投注</li><li>用上面的算法来形成自己的意见，但是不公布意见；它只要简单地按顺序在每个高度进行观察，如果一个区块的概率高于0.5就处理它，否则就跳过它。</li><li>在处理所有的区块之后所得到的状态就可以显示为区块链的“当前状态”。</li><li>客户端还可以给出对于“最终确定”的主观看法：如果高度k之前的每个区块形成的意见高于99.999%或者低于0.001%，那么客户端就可以认为前k个区块已经最终确定。</li></ol><h3 id="瑞波共识机制"><a href="#瑞波共识机制" class="headerlink" title="瑞波共识机制"></a>瑞波共识机制</h3><p>​瑞波共识算法使一组节点能够基于特殊节点列表形成共识。初始特殊节点列表要接纳一个新成员，必须由该节点的51%的会员投票通过。共识遵循这些核心成员的“51%权力”，外部人员则没有影响力。</p><h4 id="优点-3"><a href="#优点-3" class="headerlink" title="优点"></a>优点</h4><p>瑞波系统将股东们与其投票权隔开，因此，它比其他系统更中心化。 </p><h4 id="缺点-3"><a href="#缺点-3" class="headerlink" title="缺点"></a>缺点</h4><p>由于该共识由中心化开始，它将一直是中心化的，而如果它开始腐化，内部成员们就什么也做不了。</p><h3 id="Pool验证池"><a href="#Pool验证池" class="headerlink" title="Pool验证池"></a><strong>Pool</strong>验证池</h3><p>​基于<strong>传统的分布式一致性技术以及数据验证机制</strong>，Pool（联营）验证池是目前行业内大范围使用的共识机制。</p><h4 id="优点-4"><a href="#优点-4" class="headerlink" title="优点"></a>优点</h4><p>​不需要代币也可以工作，在成熟的分布式一致性算法（Pasox、Raft）的基础上，实现秒级共识验证。</p><h4 id="缺点-4"><a href="#缺点-4" class="headerlink" title="缺点"></a>缺点</h4><p>​去中心化程度不如比特币，更适合多方参与的多中心商业模式。 </p><h3 id="实用拜占庭容错"><a href="#实用拜占庭容错" class="headerlink" title="实用拜占庭容错"></a>实用拜占庭容错</h3><p>​实用拜占庭容错机制是一种采用“许可投票、少数服从多数”来选举领导者并进行记账的共识机制，该共识机制允许拜占庭容错，允许强监管节点参与，具备权限分级能力，性能更高，耗能更低，而且每轮记账都会由全网节点共同选举领导者，允许33%的节点作恶，容错性为33%。由于特别适合联盟链的应用场景，实用拜占庭容错机制及其改进算法为目前使用最多的联盟链共识算法，其改进算法在以下方面进行调整：修改底层网络拓扑的要求，使用P2P网络；可以动态地调整节点数量；减少协议使用的消息数量。</p><h4 id="实用拜占庭容错算法简介"><a href="#实用拜占庭容错算法简介" class="headerlink" title="实用拜占庭容错算法简介"></a>实用拜占庭容错算法简介</h4><p>最早由卡斯特罗和利斯科夫在1999年提出的实用拜占庭容错（PBFT）是第一个得到广泛应用的拜占庭容错算法。只要系统中有2&#x2F;3的节点是正常工作的，就可以保证一致性。 </p><h4 id="总体过程"><a href="#总体过程" class="headerlink" title="总体过程"></a>总体过程</h4><p>客户端向主节点发送请求调用服务操作，如<strong>“&lt;REQUEST,o,t,c&gt;”</strong>，这里客户端c请求执行操作o，时间戳t用来保证客户端请求只会执行一次。</p><p>每个由副本节点发给客户端的消息都包含了当前的<strong>视图编号</strong>，使得客户端能够追踪视图编号，从而进一步推算出当前主节点的编号。其中视图编号是<strong>连续编号的整数</strong>。主节点由公式**p &#x3D; v mod |R|**计算得到，这里v是视图编号，p是副本编号，|R|是副本集合的个数。 </p><p>客户端通过点对点消息向它自己认为的主节点发送请求，然后主节点自动将该请求向所有备份节点进行广播。</p><p>主节点通过广播将请求发送给其他<strong>副本</strong>，其中副本发给客户端的响应为<strong>“&lt;REPLY,v,t,c,i,r&gt;”</strong>，v是视图编号，t是时间戳，i是副本的编号，r是请求执行的结果。 </p><p>然后就开始执行三个阶段的任务。</p><ol><li><p>预准备阶段。主节点分配一个序列号n给收到的请求，然后向所有备份节点群发预准备消息，预准备消息的格式为“&lt;&lt;PRE–PREPARE,v,n,d&gt;,m&gt;”，这里v是视图编号，m是客户端发送的请求消息，d是请求消息m的摘要。 </p></li><li><p>准备阶段。如果备份节点i接受了预准备消息，则进入准备阶段。在准备的同时，该节点向所有副本节点发送准备消息“&lt;PREPARE,v,n,d,i&gt;”，并且将预准备消息和准备消息写入自己的消息日志。</p></li><li><p>确认阶段。当“(m,v,n,i)”条件为真的时候，副本i“&lt;COMMIT,v,n,D(m),i&gt;”向其他副本节点广播，于是就进入了确认阶段。所有副本都执行请求并将结果发回客户端。客户端需要等待不同副本节点发回相同的结果，作为整个操作的最终结果。</p></li></ol><p>如果客户端没有在有限时间内收到回复，请求将向所有副本节点进行广播；如果该请求已经在副本节点处理过了，副本就向客户端重发一遍执行结果；如果请求没有在副本节点处理过，该副本节点将把请求转发给主节点；如果主节点没有将该请求进行广播，那么就认为主节点失效；如果有足够多的副本节点认为主节点失效，则会触发一次视图变更。</p><h3 id="授权拜占庭容错"><a href="#授权拜占庭容错" class="headerlink" title="授权拜占庭容错"></a>授权拜占庭容错</h3><h4 id="核心"><a href="#核心" class="headerlink" title="核心"></a>核心</h4><p>最大限度地确保系统的最终性，使区块链能够适用于真正的金融应用场景。 </p><h4 id="内容"><a href="#内容" class="headerlink" title="内容"></a>内容</h4><p>2016年4月，小蚁公司发布共识算法白皮书，描述了一种通用的共识机制——授权拜占庭容错，提出了一种改进的拜占庭容错算法，使其能够适用于区块链系统。授权拜占庭容错算法在实用拜占庭容错算法的基础上进行了以下改进： </p><ol><li><p>将C&#x2F;S（客户机&#x2F;服务器）架构的请求响应模式改进为适合P2P网络的对等节点模式； </p></li><li><p>将静态的共识参与节点改进为可动态进入、退出的共识参与节点；</p></li><li><p>为共识参与节点的产生设计了一套基于持有权益比例的投票机制，通过投票决定共识参与节点（记账节点）； </p></li><li><p>在区块链中引入数字证书，解决了投票中对记账节点真实身份的认证问题。授权拜占庭容错机制的优点：专业化的记账人；可以容忍任何类型的错误；记账由多人协同完成；每一个区块都有最终性，不会分叉；算法的可靠性有严格的数学证明。</p></li></ol><h4 id="缺点-5"><a href="#缺点-5" class="headerlink" title="缺点"></a>缺点</h4><p>​当1&#x2F;3及以上的记账人停止工作后，系统将无法提供服务；当1&#x2F;3及以上的记账人联合作恶，且其他所有的记账人被恰好分割为两个网络孤岛时，恶意记账人可以使系统出现分叉，但是会留下密码学证据。 </p><h3 id="帕克索斯算法"><a href="#帕克索斯算法" class="headerlink" title="帕克索斯算法"></a>帕克索斯算法</h3><p>这是一种传统的分布式一致性算法，是一种基于选举领导者的共识机制。</p><h4 id="优点-5"><a href="#优点-5" class="headerlink" title="优点"></a>优点</h4><p>领导者节点拥有绝对权限，并允许强监管节点参与，其性能高，资源消耗低。</p><h4 id="缺点-6"><a href="#缺点-6" class="headerlink" title="缺点"></a>缺点</h4><p>所有节点一般有线下准入机制，但选举过程中不允许有作恶节点，不具备容错性。 </p>]]></content>
    
    
    <categories>
      
      <category>区块链</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>编码总结</title>
    <link href="/2021/10/30/%E7%BC%96%E7%A0%81%E6%80%BB%E7%BB%93/"/>
    <url>/2021/10/30/%E7%BC%96%E7%A0%81%E6%80%BB%E7%BB%93/</url>
    
    <content type="html"><![CDATA[<h2 id="Base家族"><a href="#Base家族" class="headerlink" title="Base家族"></a>Base家族</h2><h3 id="Base10（十进制）"><a href="#Base10（十进制）" class="headerlink" title="Base10（十进制）"></a>Base10（十进制）</h3><h3 id="Base2（二进制）"><a href="#Base2（二进制）" class="headerlink" title="Base2（二进制）"></a>Base2（二进制）</h3><h3 id="Base16（十六进制）"><a href="#Base16（十六进制）" class="headerlink" title="Base16（十六进制）"></a>Base16（十六进制）</h3><p>字符集：0-9，A-F，共16个</p><p>代码示例：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> base64<br><span class="hljs-built_in">print</span> (base64.b16encode(<span class="hljs-string">b&quot;flag&quot;</span>))<br><span class="hljs-built_in">print</span> (base64.b16decode(<span class="hljs-string">b&quot;666C6167&quot;</span>))<br></code></pre></td></tr></table></figure><span id="more"></span><h3 id="Base32"><a href="#Base32" class="headerlink" title="Base32"></a>Base32</h3><p>字符集：A-Z，2-7，共32个以及补位的“&#x3D;”</p><p><img src="/2021/10/30/%E7%BC%96%E7%A0%81%E6%80%BB%E7%BB%93/base32%E7%BC%96%E7%A0%81%E8%A1%A8.png"></p><p>代码示例：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> base64<br><span class="hljs-built_in">print</span> (base64.b32encode(<span class="hljs-string">b&quot;flag&quot;</span>))<br><span class="hljs-built_in">print</span> (base64.b32decode(<span class="hljs-string">b&quot;MZWGCZY=&quot;</span>))<br></code></pre></td></tr></table></figure><h3 id="Base64"><a href="#Base64" class="headerlink" title="Base64"></a>Base64</h3><p>字符集：a-z,A-z,0-9,+,&#x2F;共64个以及补位的“&#x3D;”</p><p><img src="https://github.com/Desdemonasyy/desdemonasyy.github.io/blob/main/2021/10/30/%E7%BC%96%E7%A0%81%E6%80%BB%E7%BB%93/%E7%BC%96%E7%A0%81%E6%80%BB%E7%BB%93%E5%9B%BE%E5%BA%93/Base64%E7%BC%96%E7%A0%81%E8%A1%A8.png?raw=true"></p><p>代码示例 :</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> codecs<br><span class="hljs-built_in">print</span> (codecs.encode(<span class="hljs-string">b&quot;flag&quot;</span>,<span class="hljs-string">&quot;base64&quot;</span>)[:-<span class="hljs-number">1</span>])<br><span class="hljs-built_in">print</span> (codecs.decode(<span class="hljs-string">b&quot;ZmxhZw==&quot;</span>,<span class="hljs-string">&quot;base64&quot;</span>))<br><br><span class="hljs-keyword">import</span> base64<br><span class="hljs-built_in">print</span> (base64.b64encode(<span class="hljs-string">b&quot;flag&quot;</span>))<br><span class="hljs-built_in">print</span> (base64.b64decode(<span class="hljs-string">b&quot;ZmxhZw==&quot;</span>))<br></code></pre></td></tr></table></figure><h3 id="以flag为例来讲解一下这些进制："><a href="#以flag为例来讲解一下这些进制：" class="headerlink" title="以flag为例来讲解一下这些进制："></a>以flag为例来讲解一下这些进制：</h3><table><thead><tr><th></th><th>f</th><th>l</th><th>a</th><th>g</th></tr></thead><tbody><tr><td>Base10</td><td>102</td><td>108</td><td>97</td><td>103</td></tr><tr><td>Base2</td><td>01100110</td><td>01101100</td><td>01100001</td><td>01100111</td></tr><tr><td>Base16</td><td>66</td><td>6C</td><td>61</td><td>67</td></tr></tbody></table><p>Base32：<br>$$<br>32&#x3D;2^5<br>$$<br>所以应该为五个一组：</p><p>01100 11001 10110 00110 00010 11001 11</p><p>后面缺了的位数用0补上，最后应该为：</p><p>01100 11001 10110 00110 00010 11001 11000</p><p>对应的字符如下表所示：</p><table><thead><tr><th>二进制</th><th>01100</th><th>11001</th><th>10110</th><th>00110</th><th>00010</th><th>11001</th><th>11000</th></tr></thead><tbody><tr><td>十进制</td><td>12</td><td>25</td><td>22</td><td>6</td><td>2</td><td>25</td><td>24</td></tr><tr><td>Base32</td><td>M</td><td>Z</td><td>W</td><td>G</td><td>C</td><td>Z</td><td>Y</td></tr></tbody></table><p>此时不是40（5、8的最小公倍数）的倍数，所以需要补一个“&#x3D;”，一个“&#x3D;”相当于一个组（5位）</p><p>Base64：<br>$$<br>64&#x3D;2^6<br>$$<br>所以应该分为6个一组：</p><p>011001 100110 110001 100001 011001 11</p><p>后面缺了的位数用0补上，最后应该为：</p><p>011001 100110 110001 100001 011001 110000</p><p>对应的字符如下表所示：</p><table><thead><tr><th>二进制</th><th>011001</th><th>100110</th><th>110001</th><th>100001</th><th>011001</th><th>110000</th></tr></thead><tbody><tr><td>十进制</td><td>25</td><td>38</td><td>49</td><td>33</td><td>25</td><td>48</td></tr><tr><td>Base64</td><td>Z</td><td>m</td><td>x</td><td>h</td><td>Z</td><td>w</td></tr></tbody></table><p>此时不是24（6、8的最小公倍数）的倍数，所以应该进行补位，这里补（48-36）÷6&#x3D;2，即两个”&#x3D;“</p><h3 id="Base58"><a href="#Base58" class="headerlink" title="Base58"></a>Base58</h3><p>base_58 是用于 Bitcoin 中使用的一种独特的编码方式，主要用于产生Bitcoin的钱包地址。</p><p>Base58遵循Base64类似的过程，但不同于Base64的是，编码表少了数字0，大写字母I，O，小写字母 l (这个是L），以及符号+和&#x2F;。</p><p><img src="https://github.com/Desdemonasyy/desdemonasyy.github.io/blob/main/2021/10/30/%E7%BC%96%E7%A0%81%E6%80%BB%E7%BB%93/%E7%BC%96%E7%A0%81%E6%80%BB%E7%BB%93%E5%9B%BE%E5%BA%93/Base58%E7%BC%96%E7%A0%81%E8%A1%A8.png?raw=true"></p><h3 id="Base62"><a href="#Base62" class="headerlink" title="Base62"></a>Base62</h3><p>Base62遵循Base64类似的过程，但不同于Base64的是，编码表少了符号+和&#x2F;。</p><h3 id="Base85"><a href="#Base85" class="headerlink" title="Base85"></a>Base85</h3><p>Base85 也称为Ascii85，是Paul E. Rutter为btoa实用程序开发的一种二进制文本编码形式。通过使用五个ASCII字符来表示四个字节的二进制数据，它比UUENCODE或Base64使用四个字符来表示三个字节的数据更有效。</p><p>以flag举例：</p><table><thead><tr><th>编码类型</th><th>结果</th></tr></thead><tbody><tr><td>Base85</td><td>Ao(mg</td></tr><tr><td>Base64</td><td>ZmxhZw&#x3D;&#x3D;</td></tr><tr><td>UUENCODE</td><td>$9FQA9P&#96;&#96;</td></tr></tbody></table><h3 id="Base91"><a href="#Base91" class="headerlink" title="Base91"></a>Base91</h3><p>base91需要91个字符来表示用ASCII编码的二进制数据。</p><h3 id="Base100（emoji编码）"><a href="#Base100（emoji编码）" class="headerlink" title="Base100（emoji编码）"></a>Base100（emoji编码）</h3><p>所谓Emoji就是一种在Unicode位于<code>\u1F601</code>-<code>\u1F64F</code>区段的字符。而这个编码就是在这个范围内进行转换。</p><p><strong>解码工具：</strong></p><p>base16-base91：<a href="https://www.qtool.net/baseencode">https://www.qtool.net/baseencode</a></p><p>base100：<a href="http://www.atoolbox.net/Tool.php?Id=936">http://www.atoolbox.net/Tool.php?Id=936</a></p><h2 id="MD5"><a href="#MD5" class="headerlink" title="MD5"></a>MD5</h2><p>MD5实质上，是一种哈希算法，它的输出则是生成一个128位输出结果。若输入两个不同的明文，则会输出两个不相同的输出值，且根据输出值，不能得到原始的明文，其过程是不可逆的。</p><p>解码工具：<a href="https://www.cmd5.com/">https://www.cmd5.com/</a></p><p><a href="https://www.somd5.com/">https://www.somd5.com/</a></p><h2 id="ROT编码"><a href="#ROT编码" class="headerlink" title="ROT编码"></a>ROT编码</h2><table><thead><tr><th><strong>类型</strong></th><th><strong>字符集</strong></th><th><strong>例子</strong></th></tr></thead><tbody><tr><td>rot5</td><td>只将字符串中的<strong>数字</strong>进行加密，步数为5，同时在0-9十个数字进行循环</td><td>12abcc3——&gt;67abcc8</td></tr><tr><td><strong>rot13</strong></td><td>只将字符串中的<strong>字母</strong>进行加密，步数为13，加密方式上最接近凯撒密码，分别在A-Z或a-z之间循环</td><td>A——&gt;N  B——&gt;O</td></tr><tr><td>rot18</td><td>0-9十个数字，步数为5；A-Z或a-z之间，步数为13</td><td>12abcc3——&gt;67nopp8</td></tr><tr><td>rot47</td><td>对<strong>数字、字母、常用符号</strong>进行编码，按照它们的ASCII(范围是33－126)值进行位置替换，用当前字符ASCII值往前数的第47位对应字符替换当前字符</td><td>Z——&gt;K   O——&gt;_</td></tr></tbody></table><p>解密网址：<a href="https://www.qqxiuzi.cn/bianma/ROT5-13-18-47.php">https://www.qqxiuzi.cn/bianma/ROT5-13-18-47.php</a> (全部都能解)<br>                <a href="http://ctf.ssleye.com/rot13.html">http://ctf.ssleye.com/rot13.html</a>    (仅能解rot13)</p><h2 id="字符类编码"><a href="#字符类编码" class="headerlink" title="字符类编码"></a>字符类编码</h2><h3 id="带相同符号"><a href="#带相同符号" class="headerlink" title="带相同符号"></a><strong>带相同符号</strong></h3><table><thead><tr><th>编码类型</th><th>例子</th><th>解码网址</th></tr></thead><tbody><tr><td>Unicode</td><td><img src="https://github.com/Desdemonasyy/desdemonasyy.github.io/blob/main/2021/10/30/%E7%BC%96%E7%A0%81%E6%80%BB%E7%BB%93/%E7%BC%96%E7%A0%81%E6%80%BB%E7%BB%93%E5%9B%BE%E5%BA%93/Unicode%E4%BE%8B%E5%AD%90.png?raw=true"></td><td><strong><a href="https://tool.chinaz.com/tools/unicode.aspx">https://tool.chinaz.com/tools/unicode.aspx</a></strong></td></tr><tr><td>Urlencode</td><td>A → %41a → %61</td><td><strong><a href="http://tool.chinaz.com/tools/urlencode.aspx">http://tool.chinaz.com/tools/urlencode.aspx</a></strong></td></tr><tr><td>quoted printable</td><td>&#x3D;E5&#x3D;A4&#x3D;A9&#x3D;E4&#x3D;B8&#x3D;8A&#x3D;E6&#x3D;8E&#x3D;89&#x3D;E4&#x3D;B8&#x3D;8B&#x3D;E4&#x3D;BA&#x3D;86<br>&#x3D;E4&#x3D;B8&#x3D;AA&#x3D;E7&#x3D;8C&#x3D;AA&#x3D;E5&#x3D;85&#x3D;AB&#x3D;E6&#x3D;88&#x3D;92</td><td><strong><a href="http://web.chacuo.net/charsetquotedprintable/**%E3%80%81**http://ctf.ssleye.com/quoted.html">http://web.chacuo.net/charsetquotedprintable/**、**http://ctf.ssleye.com/quoted.html</a></strong></td></tr><tr><td>HTML实体编码</td><td><img src="https://github.com/Desdemonasyy/desdemonasyy.github.io/blob/main/2021/10/30/%E7%BC%96%E7%A0%81%E6%80%BB%E7%BB%93/%E7%BC%96%E7%A0%81%E6%80%BB%E7%BB%93%E5%9B%BE%E5%BA%93/HTML%E5%AE%9E%E4%BD%93%E7%BC%96%E7%A0%81%E4%BE%8B%E5%AD%90.png?raw=true"></td><td><strong><a href="http://www.toolzl.com/tools/htmlende.html*%E3%80%81">http://www.toolzl.com/tools/htmlende.html*、</a>*</strong><a href="https://www.qqxiuzi.cn/bianma/zifushiti.php">https://www.qqxiuzi.cn/bianma/zifushiti.php</a></td></tr><tr><td>Eescape、Unscape编码</td><td>%u0068%u0065%u006c%u006c%u006f%uff0c%u0077%u006f<br>%u0072%u006c%u0064%u002e</td><td><strong><a href="http://web.chacuo.net/charsetescape/">http://web.chacuo.net/charsetescape/</a></strong></td></tr></tbody></table><h3 id="纯字符类型："><a href="#纯字符类型：" class="headerlink" title="纯字符类型："></a><strong>纯字符类型：</strong></h3><table><thead><tr><th><strong>编码类型</strong></th><th><strong>例子</strong></th><th><strong>字符集</strong></th><th><strong>解码网址</strong></th></tr></thead><tbody><tr><td>Jother</td><td>!![]+!![]+!![]+!![]+!![]+!![]+!![]+!![]+!![]</td><td>是一种运用于javascript语言中利用少量字符构造精简的匿名函数方法对于字符串进行的编码方式。其中8个少量字符包括：! + ( ) [ ] { }。只用这些字符就能完成对任意字符串的编码</td><td>直接在浏览器(IE可以)的控制台里输入密文即可执行解密</td></tr><tr><td>JSFuck</td><td>1 &#x3D;&gt; +!+[]</td><td>用 6 个字符’()[]!+’来编写 JavaScript 程序</td><td><strong><a href="http://www.jsfuck.com/">http://www.jsfuck.com/</a></strong></td></tr><tr><td>BrainFuck</td><td>,&gt;++++++[&lt;——–&gt;-],,[&lt;+&gt;-],&lt;.&gt;.</td><td><strong>&gt;</strong> 指针右移一位指向下一个字节 <strong>&lt;</strong> 指针左移一位指向上一个字节**+** 当前指针指向的字节+1   <strong>-</strong> 当前指针指向的字节-1 .以char的形式输出当前指针指向的字节（48会输出’0’）, 以ASCII的形式读入到当前指针指向的字节（读入’0’会存储48）[ 当当前指针指向的字节不是零时，会进行循环] 当当前指针指向的字节非零时回到循环，否则退出</td><td><strong><a href="https://www.nayuki.io/page/brainfuck-interpreter-javascript">https://www.nayuki.io/page/brainfuck-interpreter-javascript</a></strong>*</td></tr></tbody></table><h2 id="图形类编码"><a href="#图形类编码" class="headerlink" title="图形类编码"></a>图形类编码</h2><h3 id="摩斯电码"><a href="#摩斯电码" class="headerlink" title="摩斯电码"></a>摩斯电码</h3><p><img src="https://github.com/Desdemonasyy/desdemonasyy.github.io/blob/main/2021/10/30/%E7%BC%96%E7%A0%81%E6%80%BB%E7%BB%93/%E7%BC%96%E7%A0%81%E6%80%BB%E7%BB%93%E5%9B%BE%E5%BA%93/%E6%91%A9%E5%B0%94%E5%AF%86%E7%A0%81%E5%8A%A0%E5%AF%86%E4%B8%8E%E8%A7%A3%E5%AF%86.jpg?raw=true"></p><p>解码网址：</p><p><a href="http://www.hiencode.com/morse.html">http://www.hiencode.com/morse.html</a></p><h3 id="培根密码"><a href="#培根密码" class="headerlink" title="培根密码"></a>培根密码</h3><p><img src="https://github.com/Desdemonasyy/desdemonasyy.github.io/blob/main/2021/10/30/%E7%BC%96%E7%A0%81%E6%80%BB%E7%BB%93/%E7%BC%96%E7%A0%81%E6%80%BB%E7%BB%93%E5%9B%BE%E5%BA%93/%E5%9F%B9%E6%A0%B9%E5%AF%86%E7%A0%81.jpg?raw=true"></p><h3 id="猪圈密码"><a href="#猪圈密码" class="headerlink" title="猪圈密码"></a>猪圈密码</h3><p><img src="https://github.com/Desdemonasyy/desdemonasyy.github.io/blob/main/2021/10/30/%E7%BC%96%E7%A0%81%E6%80%BB%E7%BB%93/%E7%BC%96%E7%A0%81%E6%80%BB%E7%BB%93%E5%9B%BE%E5%BA%93/%E7%8C%AA%E5%9C%88%E5%AF%86%E7%A0%81.png?raw=true"></p><p>猪圈密码的变式</p><p><img src="https://github.com/Desdemonasyy/desdemonasyy.github.io/blob/main/2021/10/30/%E7%BC%96%E7%A0%81%E6%80%BB%E7%BB%93/%E7%BC%96%E7%A0%81%E6%80%BB%E7%BB%93%E5%9B%BE%E5%BA%93/%E7%8C%AA%E5%9C%88%E5%AF%86%E7%A0%81%E5%8A%A0%E5%AF%86%E8%A7%A3%E5%AF%86.jpg?raw=true"></p><p>解码网址：<a href="http://www.hiencode.com/yd_pigpen.html">http://www.hiencode.com/yd_pigpen.html</a></p><p>如果想了解更多的猪圈密码的变种，可以看一下这个网站：<br><a href="https://tieba.baidu.com/p/3938367567">https://tieba.baidu.com/p/3938367567</a></p><h3 id="跳舞的小人"><a href="#跳舞的小人" class="headerlink" title="跳舞的小人"></a>跳舞的小人</h3><p>在线网站：<a href="https://www.dcode.fr/dancing-men-cipher">https://www.dcode.fr/dancing-men-cipher</a></p><p><img src="https://github.com/Desdemonasyy/desdemonasyy.github.io/blob/main/2021/10/30/%E7%BC%96%E7%A0%81%E6%80%BB%E7%BB%93/%E7%BC%96%E7%A0%81%E6%80%BB%E7%BB%93%E5%9B%BE%E5%BA%93/%E8%B7%B3%E8%88%9E%E7%9A%84%E5%B0%8F%E4%BA%BA.jpg?raw=true"></p><h3 id="古灵精怪码"><a href="#古灵精怪码" class="headerlink" title="古灵精怪码"></a>古灵精怪码</h3><p><img src="https://github.com/Desdemonasyy/desdemonasyy.github.io/blob/main/2021/10/30/%E7%BC%96%E7%A0%81%E6%80%BB%E7%BB%93/%E7%BC%96%E7%A0%81%E6%80%BB%E7%BB%93%E5%9B%BE%E5%BA%93/%E5%8F%A4%E7%B2%BE%E7%81%B5%E7%A0%81.jpg?raw=true"></p><h3 id="象形文字"><a href="#象形文字" class="headerlink" title="象形文字"></a>象形文字</h3><p><img src="https://github.com/Desdemonasyy/desdemonasyy.github.io/blob/main/2021/10/30/%E7%BC%96%E7%A0%81%E6%80%BB%E7%BB%93/%E7%BC%96%E7%A0%81%E6%80%BB%E7%BB%93%E5%9B%BE%E5%BA%93/%E9%9D%9E%E6%96%AF%E7%9A%84%E8%B1%A1%E5%BD%A2%E6%96%87%E5%AD%97%E7%BF%BB%E8%AF%91%E5%9B%BE.png?raw=true"></p><h3 id="盲文"><a href="#盲文" class="headerlink" title="盲文"></a>盲文</h3><p><img src="https://github.com/Desdemonasyy/desdemonasyy.github.io/blob/main/2021/10/30/%E7%BC%96%E7%A0%81%E6%80%BB%E7%BB%93/%E7%BC%96%E7%A0%81%E6%80%BB%E7%BB%93%E5%9B%BE%E5%BA%93/%E7%9B%B2%E6%96%87.jpg?raw=true"></p><h3 id="音符加密"><a href="#音符加密" class="headerlink" title="音符加密"></a>音符加密</h3><p><img src="https://github.com/Desdemonasyy/desdemonasyy.github.io/blob/main/2021/10/30/%E7%BC%96%E7%A0%81%E6%80%BB%E7%BB%93/%E7%BC%96%E7%A0%81%E6%80%BB%E7%BB%93%E5%9B%BE%E5%BA%93/%E9%9F%B3%E7%AC%A6%E5%8A%A0%E5%AF%86.jpg?raw=true"></p><h3 id="银河语言"><a href="#银河语言" class="headerlink" title="银河语言"></a>银河语言</h3><p><img src="https://github.com/Desdemonasyy/desdemonasyy.github.io/blob/main/2021/10/30/%E7%BC%96%E7%A0%81%E6%80%BB%E7%BB%93/%E7%BC%96%E7%A0%81%E6%80%BB%E7%BB%93%E5%9B%BE%E5%BA%93/%E9%93%B6%E6%B2%B3%E8%AF%AD%E8%A8%80.png?raw=true"></p><h3 id="alphabet-minimoys"><a href="#alphabet-minimoys" class="headerlink" title="alphabet minimoys"></a>alphabet minimoys</h3><p>在线网站：<a href="https://www.dcode.fr/arthur-invisibles-cipher">https://www.dcode.fr/arthur-invisibles-cipher</a></p><p><img src="https://github.com/Desdemonasyy/desdemonasyy.github.io/blob/main/2021/10/30/%E7%BC%96%E7%A0%81%E6%80%BB%E7%BB%93/%E7%BC%96%E7%A0%81%E6%80%BB%E7%BB%93%E5%9B%BE%E5%BA%93/alphabet%20minimoys.png?raw=true"></p><h3 id="Pokemon-species"><a href="#Pokemon-species" class="headerlink" title="Pokemon species"></a>Pokemon species</h3><p><img src="https://github.com/Desdemonasyy/desdemonasyy.github.io/blob/main/2021/10/30/%E7%BC%96%E7%A0%81%E6%80%BB%E7%BB%93/%E7%BC%96%E7%A0%81%E6%80%BB%E7%BB%93%E5%9B%BE%E5%BA%93/Pokemon%20species.png?raw=true"></p><h3 id="dtmf"><a href="#dtmf" class="headerlink" title="dtmf"></a>dtmf</h3><p>简单说就是手机不同按键对应不同的声音，看谱图解密。</p><h2 id="文字类编码"><a href="#文字类编码" class="headerlink" title="文字类编码"></a>文字类编码</h2><h3 id="社会主义编码"><a href="#社会主义编码" class="headerlink" title="社会主义编码"></a>社会主义编码</h3><p>字符全部是社会主义核心价值观。</p><p> <strong>在线工具：</strong></p><p><a href="https://sym233.github.io/core-values-encoder/">社会主义编码</a></p><h3 id="与佛论禅"><a href="#与佛论禅" class="headerlink" title="与佛论禅"></a>与佛论禅</h3><p>密文以”佛曰：如是我闻：”开头，密文一般是与关佛经的汉字</p><p> <strong>在线工具：</strong></p><p><a href="http://www.keyfc.net/bbs/tools/tudoucode.aspx">与佛论禅</a></p><h3 id="新与佛论禅"><a href="#新与佛论禅" class="headerlink" title="新与佛论禅"></a>新与佛论禅</h3><p>以“新佛曰：”开头的文字。</p><p><strong>在线工具：</strong></p><p><a href="http://hi.pcmoe.net/buddha.html">http://hi.pcmoe.net/buddha.html</a></p><h3 id="当铺密码"><a href="#当铺密码" class="headerlink" title="当铺密码"></a>当铺密码</h3><p><img src="https://github.com/Desdemonasyy/desdemonasyy.github.io/blob/main/2021/10/30/%E7%BC%96%E7%A0%81%E6%80%BB%E7%BB%93/%E7%BC%96%E7%A0%81%E6%80%BB%E7%BB%93%E5%9B%BE%E5%BA%93/%E5%BD%93%E9%93%BA%E5%AF%86%E7%A0%81.jpg?raw=true"></p><h2 id="通过按键产生的编码"><a href="#通过按键产生的编码" class="headerlink" title="通过按键产生的编码"></a>通过按键产生的编码</h2><h3 id="电脑键盘QWE加密"><a href="#电脑键盘QWE加密" class="headerlink" title="电脑键盘QWE加密"></a>电脑键盘QWE加密</h3><p><img src="https://github.com/Desdemonasyy/desdemonasyy.github.io/blob/main/2021/10/30/%E7%BC%96%E7%A0%81%E6%80%BB%E7%BB%93/%E7%BC%96%E7%A0%81%E6%80%BB%E7%BB%93%E5%9B%BE%E5%BA%93/%E7%94%B5%E8%84%91%E9%94%AE%E7%9B%98QWE%E5%8A%A0%E5%AF%86%E6%B3%95.jpg?raw=true"></p><h3 id="电脑键盘棋盘加密"><a href="#电脑键盘棋盘加密" class="headerlink" title="电脑键盘棋盘加密"></a>电脑键盘棋盘加密</h3><p><img src="https://github.com/Desdemonasyy/desdemonasyy.github.io/blob/main/2021/10/30/%E7%BC%96%E7%A0%81%E6%80%BB%E7%BB%93/%E7%BC%96%E7%A0%81%E6%80%BB%E7%BB%93%E5%9B%BE%E5%BA%93/%E7%94%B5%E8%84%91%E9%94%AE%E7%9B%98%E6%A3%8B%E7%9B%98%E5%8A%A0%E5%AF%86.jpg?raw=true"></p><h3 id="电脑键盘坐标加密"><a href="#电脑键盘坐标加密" class="headerlink" title="电脑键盘坐标加密"></a>电脑键盘坐标加密</h3><p><img src="https://github.com/Desdemonasyy/desdemonasyy.github.io/blob/main/2021/10/30/%E7%BC%96%E7%A0%81%E6%80%BB%E7%BB%93/%E7%BC%96%E7%A0%81%E6%80%BB%E7%BB%93%E5%9B%BE%E5%BA%93/%E7%94%B5%E8%84%91%E9%94%AE%E7%9B%98%E5%9D%90%E6%A0%87%E5%8A%A0%E5%AF%86.jpg?raw=true"></p><h3 id="手机键盘加密"><a href="#手机键盘加密" class="headerlink" title="手机键盘加密"></a>手机键盘加密</h3><p><img src="https://github.com/Desdemonasyy/desdemonasyy.github.io/blob/main/2021/10/30/%E7%BC%96%E7%A0%81%E6%80%BB%E7%BB%93/%E7%BC%96%E7%A0%81%E6%80%BB%E7%BB%93%E5%9B%BE%E5%BA%93/%E6%89%8B%E6%9C%BA%E9%94%AE%E7%9B%98%E5%8A%A0%E5%AF%86%E8%A7%A3%E5%AF%86.jpg?raw=true"></p>]]></content>
    
    
    <categories>
      
      <category>CTF</category>
      
    </categories>
    
    
    <tags>
      
      <tag>CTF中的编码总结</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
